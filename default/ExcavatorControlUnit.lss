
ExcavatorControlUnit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00003bc8  00003c5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003bc8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000027a  0080014a  0080014a  00003ca6  2**0
                  ALLOC
  3 .stab         000051c0  00000000  00000000  00003ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001026  00000000  00000000  00008e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000368  00000000  00000000  00009e90  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f0c  00000000  00000000  0000a1f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001962  00000000  00000000  0000e104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002084  00000000  00000000  0000fa66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000cac  00000000  00000000  00011aec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ee1  00000000  00000000  00012798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003a80  00000000  00000000  00013679  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000170f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 01 	jmp	0x274	; 0x274 <__ctors_end>
       4:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
       8:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
       c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      10:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      14:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      18:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      1c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      20:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      24:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      28:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      2c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      30:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      34:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      38:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      3c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      40:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      44:	0c 94 54 06 	jmp	0xca8	; 0xca8 <__vector_17>
      48:	0c 94 e4 10 	jmp	0x21c8	; 0x21c8 <__vector_18>
      4c:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__vector_19>
      50:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      54:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__vector_21>
      58:	0c 94 d6 0a 	jmp	0x15ac	; 0x15ac <__vector_22>
      5c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      60:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      64:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      68:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      6c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      70:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      74:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      78:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      7c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      80:	0c 94 65 0b 	jmp	0x16ca	; 0x16ca <__vector_32>
      84:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__vector_33>
      88:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      8c:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      90:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <__bad_interrupt>
      94:	08 4a       	sbci	r16, 0xA8	; 168
      96:	d7 3b       	cpi	r29, 0xB7	; 183
      98:	3b ce       	rjmp	.-906    	; 0xfffffd10 <__eeprom_end+0xff7efd10>
      9a:	01 6e       	ori	r16, 0xE1	; 225
      9c:	84 bc       	out	0x24, r8	; 36
      9e:	bf fd       	.word	0xfdbf	; ????
      a0:	c1 2f       	mov	r28, r17
      a2:	3d 6c       	ori	r19, 0xCD	; 205
      a4:	74 31       	cpi	r23, 0x14	; 20
      a6:	9a bd       	out	0x2a, r25	; 42
      a8:	56 83       	std	Z+6, r21	; 0x06
      aa:	3d da       	rcall	.-2950   	; 0xfffff526 <__eeprom_end+0xff7ef526>
      ac:	3d 00       	.word	0x003d	; ????
      ae:	c7 7f       	andi	r28, 0xF7	; 247
      b0:	11 be       	out	0x31, r1	; 49
      b2:	d9 e4       	ldi	r29, 0x49	; 73
      b4:	bb 4c       	sbci	r27, 0xCB	; 203
      b6:	3e 91       	ld	r19, -X
      b8:	6b aa       	sts	0x9b, r22
      ba:	aa be       	out	0x3a, r10	; 58
      bc:	00 00       	nop
      be:	00 80       	ld	r0, Z
      c0:	3f 05       	cpc	r19, r15
      c2:	a8 4c       	sbci	r26, 0xC8	; 200
      c4:	cd b2       	in	r12, 0x1d	; 29
      c6:	d4 4e       	sbci	r29, 0xE4	; 228
      c8:	b9 38       	cpi	r27, 0x89	; 137
      ca:	36 a9       	sts	0x46, r19
      cc:	02 0c       	add	r0, r2
      ce:	50 b9       	out	0x00, r21	; 0
      d0:	91 86       	std	Z+9, r9	; 0x09
      d2:	88 08       	sbc	r8, r8
      d4:	3c a6       	lds	r19, 0xbc
      d6:	aa aa       	sts	0x9a, r26
      d8:	2a be       	out	0x3a, r2	; 58
      da:	00 00       	nop
      dc:	00 80       	ld	r0, Z
      de:	3f 07       	cpc	r19, r31
      e0:	63 42       	sbci	r22, 0x23	; 35
      e2:	36 b7       	in	r19, 0x36	; 54
      e4:	9b d8       	rcall	.-3786   	; 0xfffff21c <__eeprom_end+0xff7ef21c>
      e6:	a7 1a       	sub	r10, r23
      e8:	39 68       	ori	r19, 0x89	; 137
      ea:	56 18       	sub	r5, r6
      ec:	ae ba       	out	0x1e, r10	; 30
      ee:	ab 55       	subi	r26, 0x5B	; 91
      f0:	8c 1d       	adc	r24, r12
      f2:	3c b7       	in	r19, 0x3c	; 60
      f4:	cc 57       	subi	r28, 0x7C	; 124
      f6:	63 bd       	out	0x23, r22	; 35
      f8:	6d ed       	ldi	r22, 0xDD	; 221
      fa:	fd 75       	andi	r31, 0x5D	; 93
      fc:	3e f6       	brtc	.-114    	; 0x8c <__SREG__+0x4d>
      fe:	17 72       	andi	r17, 0x27	; 39
     100:	31 bf       	out	0x31, r19	; 49
     102:	00 00       	nop
     104:	00 80       	ld	r0, Z
     106:	3f 08       	sbc	r3, r15
     108:	00 00       	nop
     10a:	00 be       	out	0x30, r0	; 48
     10c:	92 24       	eor	r9, r2
     10e:	49 12       	cpse	r4, r25
     110:	3e ab       	sts	0x5e, r19
     112:	aa aa       	sts	0x9a, r26
     114:	2a be       	out	0x3a, r2	; 58
     116:	cd cc       	rjmp	.-1638   	; 0xfffffab2 <__eeprom_end+0xff7efab2>
     118:	cc 4c       	sbci	r28, 0xCC	; 204
     11a:	3e 00       	.word	0x003e	; ????
     11c:	00 00       	nop
     11e:	80 be       	out	0x30, r8	; 48
     120:	ab aa       	sts	0x9b, r26
     122:	aa aa       	sts	0x9a, r26
     124:	3e 00       	.word	0x003e	; ????
     126:	00 00       	nop
     128:	00 bf       	out	0x30, r16	; 48
     12a:	00 00       	nop
     12c:	00 80       	ld	r0, Z
     12e:	3f 00       	.word	0x003f	; ????
     130:	00 00       	nop
     132:	00 00       	nop
     134:	08 41       	sbci	r16, 0x18	; 24
     136:	78 d3       	rcall	.+1776   	; 0x828 <calculateJointAngles+0x342>
     138:	bb 43       	sbci	r27, 0x3B	; 59
     13a:	87 d1       	rcall	.+782    	; 0x44a <initCAN+0x10a>
     13c:	13 3d       	cpi	r17, 0xD3	; 211
     13e:	19 0e       	add	r1, r25
     140:	3c c3       	rjmp	.+1656   	; 0x7ba <calculateJointAngles+0x2d4>
     142:	bd 42       	sbci	r27, 0x2D	; 45
     144:	82 ad       	sts	0x62, r24
     146:	2b 3e       	cpi	r18, 0xEB	; 235
     148:	68 ec       	ldi	r22, 0xC8	; 200
     14a:	82 76       	andi	r24, 0x62	; 98
     14c:	be d9       	rcall	.-3204   	; 0xfffff4ca <__eeprom_end+0xff7ef4ca>
     14e:	8f e1       	ldi	r24, 0x1F	; 31
     150:	a9 3e       	cpi	r26, 0xE9	; 233
     152:	4c 80       	ldd	r4, Y+4	; 0x04
     154:	ef ff       	.word	0xffef	; ????
     156:	be 01       	movw	r22, r28
     158:	c4 ff       	sbrs	r28, 4
     15a:	7f 3f       	cpi	r23, 0xFF	; 255
     15c:	00 00       	nop
     15e:	00 00       	nop
	...

00000161 <_at90can_cnf>:
     161:	7e 6e 7f 62 0c 37 26 0c 37 12 0c 37 0e 0c 37 06     ~n.b.7&.7..7..7.
     171:	0c 37 02 0c 37 00 0c 36 00 40 7a 10 f3 5a 00 a0     .7..7..6.@z..Z..
     181:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     191:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     1a1:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     1b1:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     1c1:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     1d1:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     1e1:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     1f1:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     201:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     211:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     221:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     231:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     241:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     251:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     261:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     271:	3d 27 00                                            ='.

00000274 <__ctors_end>:
     274:	11 24       	eor	r1, r1
     276:	1f be       	out	0x3f, r1	; 63
     278:	cf ef       	ldi	r28, 0xFF	; 255
     27a:	d0 e1       	ldi	r29, 0x10	; 16
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	cd bf       	out	0x3d, r28	; 61

00000280 <__do_copy_data>:
     280:	11 e0       	ldi	r17, 0x01	; 1
     282:	a0 e0       	ldi	r26, 0x00	; 0
     284:	b1 e0       	ldi	r27, 0x01	; 1
     286:	e8 ec       	ldi	r30, 0xC8	; 200
     288:	fb e3       	ldi	r31, 0x3B	; 59
     28a:	00 e0       	ldi	r16, 0x00	; 0
     28c:	0b bf       	out	0x3b, r16	; 59
     28e:	02 c0       	rjmp	.+4      	; 0x294 <__do_copy_data+0x14>
     290:	07 90       	elpm	r0, Z+
     292:	0d 92       	st	X+, r0
     294:	aa 34       	cpi	r26, 0x4A	; 74
     296:	b1 07       	cpc	r27, r17
     298:	d9 f7       	brne	.-10     	; 0x290 <__do_copy_data+0x10>
     29a:	1b be       	out	0x3b, r1	; 59

0000029c <__do_clear_bss>:
     29c:	13 e0       	ldi	r17, 0x03	; 3
     29e:	aa e4       	ldi	r26, 0x4A	; 74
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
     2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <.do_clear_bss_start>

000002a4 <.do_clear_bss_loop>:
     2a4:	1d 92       	st	X+, r1

000002a6 <.do_clear_bss_start>:
     2a6:	a4 3c       	cpi	r26, 0xC4	; 196
     2a8:	b1 07       	cpc	r27, r17
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <.do_clear_bss_loop>
     2ac:	0e 94 91 15 	call	0x2b22	; 0x2b22 <main>
     2b0:	0c 94 36 1b 	jmp	0x366c	; 0x366c <exit>

000002b4 <__bad_interrupt>:
     2b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002b8 <initADC>:
   * this pin is not needed, this bit should be written logic one to reduce power
   * consumption in the digital input buffer.
   */

   // Digital signal is only needed for ADC3 and ADC4 as the joystick buttons are connected to these two.
   DIDR0=(1<<ADC7D) | (1<<ADC6D) | (1<<ADC5D) | (0<<ADC4D) | (0<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (1<<ADC0D);
     2b8:	87 ee       	ldi	r24, 0xE7	; 231
     2ba:	80 93 7e 00 	sts	0x007E, r24

   // Set the reference voltage to AVCC.
	ADMUX |= (0<<REFS1) | (1<<REFS0);
     2be:	ec e7       	ldi	r30, 0x7C	; 124
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	80 64       	ori	r24, 0x40	; 64
     2c6:	80 83       	st	Z, r24

   /* Set divisor value to 128. ADC sample rate will be 16,000,000/128 = 125,000 Hz
    * According to AT90CAN128 datasheet the sample rate should be between 50kHz - 200kHz
    * when using 10 bit accuracy. The sample rate can be higher when using only 8 bits.
    */
   ADCSRA |= (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
     2c8:	ea e7       	ldi	r30, 0x7A	; 122
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	87 60       	ori	r24, 0x07	; 7
     2d0:	80 83       	st	Z, r24

   /* Enable A/D converter */
   ADCSRA |= (1<<ADEN);
     2d2:	80 81       	ld	r24, Z
     2d4:	80 68       	ori	r24, 0x80	; 128
     2d6:	80 83       	st	Z, r24

}
     2d8:	08 95       	ret

000002da <readADCChannel>:

int16_t readADCChannel(int8_t channelNumber)
{
   ADMUX = (0<<REFS1) | (1<<REFS0) | (1<<ADLAR) | (0<<MUX4) | (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);
     2da:	90 e6       	ldi	r25, 0x60	; 96
     2dc:	90 93 7c 00 	sts	0x007C, r25
	if (channelNumber == 0)
     2e0:	88 23       	and	r24, r24
     2e2:	19 f4       	brne	.+6      	; 0x2ea <readADCChannel+0x10>
		ADMUX |= (0<<MUX4) | (0<<MUX3) | (0<<MUX2) | (0<<MUX1) | (0<<MUX0);
     2e4:	80 91 7c 00 	lds	r24, 0x007C
     2e8:	0b c0       	rjmp	.+22     	; 0x300 <readADCChannel+0x26>
	if (channelNumber == 2)
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	21 f4       	brne	.+8      	; 0x2f6 <readADCChannel+0x1c>
		ADMUX |= (0<<MUX4) | (0<<MUX3) | (0<<MUX2) | (1<<MUX1) | (0<<MUX0);
     2ee:	80 91 7c 00 	lds	r24, 0x007C
     2f2:	82 60       	ori	r24, 0x02	; 2
     2f4:	05 c0       	rjmp	.+10     	; 0x300 <readADCChannel+0x26>
	if (channelNumber == 6)
     2f6:	86 30       	cpi	r24, 0x06	; 6
     2f8:	29 f4       	brne	.+10     	; 0x304 <readADCChannel+0x2a>
		ADMUX |= (0<<MUX4) | (0<<MUX3) | (1<<MUX2) | (1<<MUX1) | (0<<MUX0);
     2fa:	80 91 7c 00 	lds	r24, 0x007C
     2fe:	86 60       	ori	r24, 0x06	; 6
     300:	80 93 7c 00 	sts	0x007C, r24
   /* ADSC will read as one as long as a conversion is in progress. When the conversion is complete,
   * it returns to zero. Writing zero to this bit has no effect.
   *
   * This while loop will ensure that the conversion is complete.
   */
	while( !(ADCSRA & (1<<ADSC)) );
     304:	80 91 7a 00 	lds	r24, 0x007A
     308:	86 ff       	sbrs	r24, 6
     30a:	fc cf       	rjmp	.-8      	; 0x304 <readADCChannel+0x2a>

	/* Return 10bit ADC conversion result */
	uint16_t tenBitADC = (ADCH<<8) | ADCL;
     30c:	90 91 79 00 	lds	r25, 0x0079
     310:	80 91 78 00 	lds	r24, 0x0078
     314:	39 2f       	mov	r19, r25
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	82 2b       	or	r24, r18
     31c:	93 2b       	or	r25, r19

	return tenBitADC;
}
     31e:	08 95       	ret

00000320 <initPorts>:

void initPorts()
{
	PORTA = 0x00;
     320:	12 b8       	out	0x02, r1	; 2
	DDRA = 0x00;
     322:	11 b8       	out	0x01, r1	; 1

	PORTB = 0x00;
     324:	15 b8       	out	0x05, r1	; 5
	DDRB = 0x00;
     326:	14 b8       	out	0x04, r1	; 4

	PORTC = 0x00;
     328:	18 b8       	out	0x08, r1	; 8
	DDRC = (1<<PIN1) | (1<<PIN0); // Set PC0 and PC1 as outputs (+5V out)
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	87 b9       	out	0x07, r24	; 7

	PORTD = 0x00; 
     32e:	1b b8       	out	0x0b, r1	; 11
	DDRD = (1<<PIN3); // Set PD3 (TX1 = USB Tx) as output
     330:	88 e0       	ldi	r24, 0x08	; 8
     332:	8a b9       	out	0x0a, r24	; 10

	PORTE = 0x00; 
     334:	1e b8       	out	0x0e, r1	; 14
	DDRE = (1<<PIN1); // Set PE1 (TX0 = RS232 Tx) as output
     336:	82 e0       	ldi	r24, 0x02	; 2
     338:	8d b9       	out	0x0d, r24	; 13

	PORTF = 0x00;
     33a:	11 ba       	out	0x11, r1	; 17
	DDRF = 0x00;
     33c:	10 ba       	out	0x10, r1	; 16

}
     33e:	08 95       	ret

00000340 <initCAN>:

void initCAN()
{
     340:	cf 93       	push	r28
     342:	df 93       	push	r29
     344:	cd b7       	in	r28, 0x3d	; 61
     346:	de b7       	in	r29, 0x3e	; 62
     348:	c8 54       	subi	r28, 0x48	; 72
     34a:	d0 40       	sbci	r29, 0x00	; 0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	f8 94       	cli
     350:	de bf       	out	0x3e, r29	; 62
     352:	0f be       	out	0x3f, r0	; 63
     354:	cd bf       	out	0x3d, r28	; 61
    can_init(BITRATE_250_KBPS);
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	0e 94 a4 10 	call	0x2148	; 0x2148 <can_init>
    can_set_mode(NORMAL_MODE);
     35c:	82 e0       	ldi	r24, 0x02	; 2
     35e:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <can_set_mode>
	/* -----------------------------------------------------------
	 * Filters for the resolvers
	 * ----------------------------------------------------------- */

    can_filter_t slewJointResolver;
    slewJointResolver.id = SLEW_JOINT_RESOLVER_ID;
     362:	8a e8       	ldi	r24, 0x8A	; 138
     364:	91 e0       	ldi	r25, 0x01	; 1
     366:	a0 e0       	ldi	r26, 0x00	; 0
     368:	b0 e0       	ldi	r27, 0x00	; 0
     36a:	24 96       	adiw	r28, 0x04	; 4
     36c:	8c af       	sts	0x7c, r24
     36e:	9d af       	sts	0x7d, r25
     370:	ae af       	sts	0x7e, r26
     372:	bf af       	sts	0x7f, r27
     374:	24 97       	sbiw	r28, 0x04	; 4
    slewJointResolver.mask = SLEW_JOINT_RESOLVER_ID;
     376:	28 96       	adiw	r28, 0x08	; 8
     378:	8c af       	sts	0x7c, r24
     37a:	9d af       	sts	0x7d, r25
     37c:	ae af       	sts	0x7e, r26
     37e:	bf af       	sts	0x7f, r27
     380:	28 97       	sbiw	r28, 0x08	; 8
    slewJointResolver.flags.rtr = 0;
     382:	29 96       	adiw	r28, 0x09	; 9
     384:	8f ad       	sts	0x6f, r24
     386:	29 97       	sbiw	r28, 0x09	; 9
    slewJointResolver.flags.extended = 1;
     388:	80 7f       	andi	r24, 0xF0	; 240
     38a:	84 60       	ori	r24, 0x04	; 4
     38c:	29 96       	adiw	r28, 0x09	; 9
     38e:	8f af       	sts	0x7f, r24
     390:	29 97       	sbiw	r28, 0x09	; 9
    can_set_filter(0, &slewJointResolver);
     392:	80 e0       	ldi	r24, 0x00	; 0
     394:	be 01       	movw	r22, r28
     396:	60 5c       	subi	r22, 0xC0	; 192
     398:	7f 4f       	sbci	r23, 0xFF	; 255
     39a:	0e 94 2c 14 	call	0x2858	; 0x2858 <can_set_filter>
	
    can_filter_t boomJointResolver;
    boomJointResolver.id = BOOM_JOINT_RESOLVER_ID;
     39e:	82 ea       	ldi	r24, 0xA2	; 162
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	a0 e0       	ldi	r26, 0x00	; 0
     3a4:	b0 e0       	ldi	r27, 0x00	; 0
     3a6:	8f ab       	sts	0x5f, r24
     3a8:	98 af       	sts	0x78, r25
     3aa:	a9 af       	sts	0x79, r26
     3ac:	ba af       	sts	0x7a, r27
    boomJointResolver.mask = BOOM_JOINT_RESOLVER_ID;
     3ae:	8b af       	sts	0x7b, r24
     3b0:	9c af       	sts	0x7c, r25
     3b2:	ad af       	sts	0x7d, r26
     3b4:	be af       	sts	0x7e, r27
    boomJointResolver.flags.rtr = 0;
     3b6:	8f ad       	sts	0x6f, r24
    boomJointResolver.flags.extended = 1;
     3b8:	80 7f       	andi	r24, 0xF0	; 240
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	8f af       	sts	0x7f, r24
    can_set_filter(1, &boomJointResolver);
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	be 01       	movw	r22, r28
     3c2:	69 5c       	subi	r22, 0xC9	; 201
     3c4:	7f 4f       	sbci	r23, 0xFF	; 255
     3c6:	0e 94 2c 14 	call	0x2858	; 0x2858 <can_set_filter>

    can_filter_t armJointResolver;
    armJointResolver.id = ARM_JOINT_RESOLVER_ID;
     3ca:	81 ea       	ldi	r24, 0xA1	; 161
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	a0 e0       	ldi	r26, 0x00	; 0
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	8e a7       	lds	r24, 0x7e
     3d4:	9f a7       	lds	r25, 0x7f
     3d6:	a8 ab       	sts	0x58, r26
     3d8:	b9 ab       	sts	0x59, r27
    armJointResolver.mask = ARM_JOINT_RESOLVER_ID;
     3da:	8a ab       	sts	0x5a, r24
     3dc:	9b ab       	sts	0x5b, r25
     3de:	ac ab       	sts	0x5c, r26
     3e0:	bd ab       	sts	0x5d, r27
    armJointResolver.flags.rtr = 0;
     3e2:	8e a9       	sts	0x4e, r24
    armJointResolver.flags.extended = 1;
     3e4:	80 7f       	andi	r24, 0xF0	; 240
     3e6:	84 60       	ori	r24, 0x04	; 4
     3e8:	8e ab       	sts	0x5e, r24
    can_set_filter(2, &armJointResolver);
     3ea:	82 e0       	ldi	r24, 0x02	; 2
     3ec:	be 01       	movw	r22, r28
     3ee:	62 5d       	subi	r22, 0xD2	; 210
     3f0:	7f 4f       	sbci	r23, 0xFF	; 255
     3f2:	0e 94 2c 14 	call	0x2858	; 0x2858 <can_set_filter>

    can_filter_t bucketJointResolver;
    bucketJointResolver.id = BUCKET_JOINT_RESOLVER_ID;
     3f6:	83 ea       	ldi	r24, 0xA3	; 163
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	a0 e0       	ldi	r26, 0x00	; 0
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	8d a3       	lds	r24, 0x5d
     400:	9e a3       	lds	r25, 0x5e
     402:	af a3       	lds	r26, 0x5f
     404:	b8 a7       	lds	r27, 0x78
    bucketJointResolver.mask = BUCKET_JOINT_RESOLVER_ID;
     406:	89 a7       	lds	r24, 0x79
     408:	9a a7       	lds	r25, 0x7a
     40a:	ab a7       	lds	r26, 0x7b
     40c:	bc a7       	lds	r27, 0x7c
    bucketJointResolver.flags.rtr = 0;
     40e:	8d a5       	lds	r24, 0x6d
    bucketJointResolver.flags.extended = 1;
     410:	80 7f       	andi	r24, 0xF0	; 240
     412:	84 60       	ori	r24, 0x04	; 4
     414:	8d a7       	lds	r24, 0x7d
    can_set_filter(3, &bucketJointResolver);
     416:	83 e0       	ldi	r24, 0x03	; 3
     418:	be 01       	movw	r22, r28
     41a:	6b 5d       	subi	r22, 0xDB	; 219
     41c:	7f 4f       	sbci	r23, 0xFF	; 255
     41e:	0e 94 2c 14 	call	0x2858	; 0x2858 <can_set_filter>
	/* -----------------------------------------------------------
	 * Filters for the valves
	 * ----------------------------------------------------------- */

	can_filter_t slewJointValve;
    slewJointValve.id = SLEW_JOINT_VALVE_AVEF_ID;
     422:	81 e8       	ldi	r24, 0x81	; 129
     424:	91 e1       	ldi	r25, 0x11	; 17
     426:	ae ef       	ldi	r26, 0xFE	; 254
     428:	bc e0       	ldi	r27, 0x0C	; 12
     42a:	8c 8f       	std	Y+28, r24	; 0x1c
     42c:	9d 8f       	std	Y+29, r25	; 0x1d
     42e:	ae 8f       	std	Y+30, r26	; 0x1e
     430:	bf 8f       	std	Y+31, r27	; 0x1f
    slewJointValve.mask = SLEW_JOINT_VALVE_AVEF_ID;
     432:	88 a3       	lds	r24, 0x58
     434:	99 a3       	lds	r25, 0x59
     436:	aa a3       	lds	r26, 0x5a
     438:	bb a3       	lds	r27, 0x5b
    slewJointValve.flags.rtr = 0;
     43a:	8c a1       	lds	r24, 0x4c
     43c:	8c 7f       	andi	r24, 0xFC	; 252
    slewJointValve.flags.extended = 3;
     43e:	8c 60       	ori	r24, 0x0C	; 12
     440:	8c a3       	lds	r24, 0x5c
    can_set_filter(4, &slewJointValve);
     442:	84 e0       	ldi	r24, 0x04	; 4
     444:	be 01       	movw	r22, r28
     446:	64 5e       	subi	r22, 0xE4	; 228
     448:	7f 4f       	sbci	r23, 0xFF	; 255
     44a:	0e 94 2c 14 	call	0x2858	; 0x2858 <can_set_filter>

	can_filter_t boomJointValve;
    boomJointValve.id = BOOM_JOINT_VALVE_AVEF_ID;
     44e:	83 e8       	ldi	r24, 0x83	; 131
     450:	93 e1       	ldi	r25, 0x13	; 19
     452:	ae ef       	ldi	r26, 0xFE	; 254
     454:	bc e0       	ldi	r27, 0x0C	; 12
     456:	8b 8b       	std	Y+19, r24	; 0x13
     458:	9c 8b       	std	Y+20, r25	; 0x14
     45a:	ad 8b       	std	Y+21, r26	; 0x15
     45c:	be 8b       	std	Y+22, r27	; 0x16
    boomJointValve.mask = BOOM_JOINT_VALVE_AVEF_ID;
     45e:	8f 8b       	std	Y+23, r24	; 0x17
     460:	98 8f       	std	Y+24, r25	; 0x18
     462:	a9 8f       	std	Y+25, r26	; 0x19
     464:	ba 8f       	std	Y+26, r27	; 0x1a
    boomJointValve.flags.rtr = 0;
     466:	8b 8d       	ldd	r24, Y+27	; 0x1b
     468:	8c 7f       	andi	r24, 0xFC	; 252
    boomJointValve.flags.extended = 3;
     46a:	8c 60       	ori	r24, 0x0C	; 12
     46c:	8b 8f       	std	Y+27, r24	; 0x1b
    can_set_filter(5, &boomJointValve);
     46e:	85 e0       	ldi	r24, 0x05	; 5
     470:	be 01       	movw	r22, r28
     472:	6d 5e       	subi	r22, 0xED	; 237
     474:	7f 4f       	sbci	r23, 0xFF	; 255
     476:	0e 94 2c 14 	call	0x2858	; 0x2858 <can_set_filter>

	can_filter_t armJointValve;
    armJointValve.id = ARM_JOINT_VALVE_AVEF_ID;
     47a:	84 e8       	ldi	r24, 0x84	; 132
     47c:	94 e1       	ldi	r25, 0x14	; 20
     47e:	ae ef       	ldi	r26, 0xFE	; 254
     480:	bc e0       	ldi	r27, 0x0C	; 12
     482:	8a 87       	std	Y+10, r24	; 0x0a
     484:	9b 87       	std	Y+11, r25	; 0x0b
     486:	ac 87       	std	Y+12, r26	; 0x0c
     488:	bd 87       	std	Y+13, r27	; 0x0d
    armJointValve.mask = ARM_JOINT_VALVE_AVEF_ID;
     48a:	8e 87       	std	Y+14, r24	; 0x0e
     48c:	9f 87       	std	Y+15, r25	; 0x0f
     48e:	a8 8b       	std	Y+16, r26	; 0x10
     490:	b9 8b       	std	Y+17, r27	; 0x11
    armJointValve.flags.rtr = 0;
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	8c 7f       	andi	r24, 0xFC	; 252
    armJointValve.flags.extended = 3;
     496:	8c 60       	ori	r24, 0x0C	; 12
     498:	8a 8b       	std	Y+18, r24	; 0x12
    can_set_filter(6, &armJointValve);
     49a:	86 e0       	ldi	r24, 0x06	; 6
     49c:	be 01       	movw	r22, r28
     49e:	66 5f       	subi	r22, 0xF6	; 246
     4a0:	7f 4f       	sbci	r23, 0xFF	; 255
     4a2:	0e 94 2c 14 	call	0x2858	; 0x2858 <can_set_filter>

	can_filter_t bucketJointValve;
    bucketJointValve.id = BUCKET_JOINT_VALVE_AVEF_ID;
     4a6:	85 e8       	ldi	r24, 0x85	; 133
     4a8:	95 e1       	ldi	r25, 0x15	; 21
     4aa:	ae ef       	ldi	r26, 0xFE	; 254
     4ac:	bc e0       	ldi	r27, 0x0C	; 12
     4ae:	89 83       	std	Y+1, r24	; 0x01
     4b0:	9a 83       	std	Y+2, r25	; 0x02
     4b2:	ab 83       	std	Y+3, r26	; 0x03
     4b4:	bc 83       	std	Y+4, r27	; 0x04
    bucketJointValve.mask = BUCKET_JOINT_VALVE_AVEF_ID;
     4b6:	8d 83       	std	Y+5, r24	; 0x05
     4b8:	9e 83       	std	Y+6, r25	; 0x06
     4ba:	af 83       	std	Y+7, r26	; 0x07
     4bc:	b8 87       	std	Y+8, r27	; 0x08
    bucketJointValve.flags.rtr = 0;
     4be:	89 85       	ldd	r24, Y+9	; 0x09
     4c0:	8c 7f       	andi	r24, 0xFC	; 252
    bucketJointValve.flags.extended = 3;
     4c2:	8c 60       	ori	r24, 0x0C	; 12
     4c4:	89 87       	std	Y+9, r24	; 0x09
    can_set_filter(7, &bucketJointValve);
     4c6:	87 e0       	ldi	r24, 0x07	; 7
     4c8:	be 01       	movw	r22, r28
     4ca:	6f 5f       	subi	r22, 0xFF	; 255
     4cc:	7f 4f       	sbci	r23, 0xFF	; 255
     4ce:	0e 94 2c 14 	call	0x2858	; 0x2858 <can_set_filter>

}
     4d2:	c8 5b       	subi	r28, 0xB8	; 184
     4d4:	df 4f       	sbci	r29, 0xFF	; 255
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <calculateJointAngles>:
#include "kinematics.h"
#include <math.h>

void calculateJointAngles(Waypoint const* const wp, float* const th1_ptr, float* const th2_ptr,
                          float* const th3_ptr, float* const th4_ptr)
{
     4e6:	2f 92       	push	r2
     4e8:	3f 92       	push	r3
     4ea:	4f 92       	push	r4
     4ec:	5f 92       	push	r5
     4ee:	6f 92       	push	r6
     4f0:	7f 92       	push	r7
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
     50a:	cd b7       	in	r28, 0x3d	; 61
     50c:	de b7       	in	r29, 0x3e	; 62
     50e:	6c 97       	sbiw	r28, 0x1c	; 28
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	7c 01       	movw	r14, r24
     51c:	5b 01       	movw	r10, r22
     51e:	5e 87       	std	Y+14, r21	; 0x0e
     520:	4d 87       	std	Y+13, r20	; 0x0d
     522:	3a 8f       	std	Y+26, r19	; 0x1a
     524:	29 8f       	std	Y+25, r18	; 0x19
     526:	1c 8f       	std	Y+28, r17	; 0x1c
     528:	0b 8f       	std	Y+27, r16	; 0x1b
	float x,y,z,thdg,d,num,den,th1,th2,th3,th4;

	/* Waypoint coordinates for the last joint (the joint that holds the bucket) */
	x = wp->x;
     52a:	dc 01       	movw	r26, r24
     52c:	4d 90       	ld	r4, X+
     52e:	5d 90       	ld	r5, X+
     530:	6d 90       	ld	r6, X+
     532:	7c 90       	ld	r7, X
     534:	13 97       	sbiw	r26, 0x03	; 3
	y = wp->y;
     536:	14 96       	adiw	r26, 0x04	; 4
     538:	8d 91       	ld	r24, X+
     53a:	9d 91       	ld	r25, X+
     53c:	0d 90       	ld	r0, X+
     53e:	bc 91       	ld	r27, X
     540:	a0 2d       	mov	r26, r0
     542:	89 83       	std	Y+1, r24	; 0x01
     544:	9a 83       	std	Y+2, r25	; 0x02
     546:	ab 83       	std	Y+3, r26	; 0x03
     548:	bc 83       	std	Y+4, r27	; 0x04
	/* To make these coordinates essentially bucket coordinates, the
      z coordinate must be adjusted accordingly */
	z = wp->z + BUCKET_LEN - GROUND_OFFSET;
     54a:	f7 01       	movw	r30, r14
     54c:	60 85       	ldd	r22, Z+8	; 0x08
     54e:	71 85       	ldd	r23, Z+9	; 0x09
     550:	82 85       	ldd	r24, Z+10	; 0x0a
     552:	93 85       	ldd	r25, Z+11	; 0x0b
     554:	2d e3       	ldi	r18, 0x3D	; 61
     556:	3a e0       	ldi	r19, 0x0A	; 10
     558:	47 ed       	ldi	r20, 0xD7	; 215
     55a:	5e e3       	ldi	r21, 0x3E	; 62
     55c:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     560:	2a e0       	ldi	r18, 0x0A	; 10
     562:	37 ed       	ldi	r19, 0xD7	; 215
     564:	43 ee       	ldi	r20, 0xE3	; 227
     566:	5e e3       	ldi	r21, 0x3E	; 62
     568:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     56c:	69 87       	std	Y+9, r22	; 0x09
     56e:	7a 87       	std	Y+10, r23	; 0x0a
     570:	8b 87       	std	Y+11, r24	; 0x0b
     572:	9c 87       	std	Y+12, r25	; 0x0c
	thdg = wp->thdg;
     574:	d7 01       	movw	r26, r14
     576:	1c 96       	adiw	r26, 0x0c	; 12
     578:	8d 91       	ld	r24, X+
     57a:	9d 91       	ld	r25, X+
     57c:	0d 90       	ld	r0, X+
     57e:	bc 91       	ld	r27, X
     580:	a0 2d       	mov	r26, r0
     582:	8d 8b       	std	Y+21, r24	; 0x15
     584:	9e 8b       	std	Y+22, r25	; 0x16
     586:	af 8b       	std	Y+23, r26	; 0x17
     588:	b8 8f       	std	Y+24, r27	; 0x18

	/* Calculate angle theta1 */
	th1 = atan2(y, x);
     58a:	69 81       	ldd	r22, Y+1	; 0x01
     58c:	7a 81       	ldd	r23, Y+2	; 0x02
     58e:	8b 81       	ldd	r24, Y+3	; 0x03
     590:	9c 81       	ldd	r25, Y+4	; 0x04
     592:	a3 01       	movw	r20, r6
     594:	92 01       	movw	r18, r4
     596:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <atan2>
     59a:	6b 01       	movw	r12, r22
     59c:	7c 01       	movw	r14, r24
	*th1_ptr = th1;
     59e:	f5 01       	movw	r30, r10
     5a0:	60 83       	st	Z, r22
     5a2:	71 83       	std	Z+1, r23	; 0x01
     5a4:	82 83       	std	Z+2, r24	; 0x02
     5a6:	93 83       	std	Z+3, r25	; 0x03

	/* Calculate angle theta2 */
	d = cos(th1)*x + sin(th1)*y - SLEW_JOINT_LEN;
     5a8:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <cos>
     5ac:	4b 01       	movw	r8, r22
     5ae:	5c 01       	movw	r10, r24
     5b0:	c7 01       	movw	r24, r14
     5b2:	b6 01       	movw	r22, r12
     5b4:	0e 94 c4 19 	call	0x3388	; 0x3388 <sin>
     5b8:	6d 83       	std	Y+5, r22	; 0x05
     5ba:	7e 83       	std	Y+6, r23	; 0x06
     5bc:	8f 83       	std	Y+7, r24	; 0x07
     5be:	98 87       	std	Y+8, r25	; 0x08
     5c0:	c5 01       	movw	r24, r10
     5c2:	b4 01       	movw	r22, r8
     5c4:	a3 01       	movw	r20, r6
     5c6:	92 01       	movw	r18, r4
     5c8:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     5cc:	6b 01       	movw	r12, r22
     5ce:	7c 01       	movw	r14, r24
     5d0:	6d 81       	ldd	r22, Y+5	; 0x05
     5d2:	7e 81       	ldd	r23, Y+6	; 0x06
     5d4:	8f 81       	ldd	r24, Y+7	; 0x07
     5d6:	98 85       	ldd	r25, Y+8	; 0x08
     5d8:	29 81       	ldd	r18, Y+1	; 0x01
     5da:	3a 81       	ldd	r19, Y+2	; 0x02
     5dc:	4b 81       	ldd	r20, Y+3	; 0x03
     5de:	5c 81       	ldd	r21, Y+4	; 0x04
     5e0:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     5e4:	9b 01       	movw	r18, r22
     5e6:	ac 01       	movw	r20, r24
     5e8:	c7 01       	movw	r24, r14
     5ea:	b6 01       	movw	r22, r12
     5ec:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     5f0:	2c ee       	ldi	r18, 0xEC	; 236
     5f2:	31 e5       	ldi	r19, 0x51	; 81
     5f4:	48 e3       	ldi	r20, 0x38	; 56
     5f6:	5e e3       	ldi	r21, 0x3E	; 62
     5f8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     5fc:	36 2e       	mov	r3, r22
     5fe:	27 2e       	mov	r2, r23
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	9d 83       	std	Y+5, r25	; 0x05
	num = sqrt(4*BOOM_LEN*BOOM_LEN*(z*z + d*d) - pow((z*z + d*d + BOOM_LEN*BOOM_LEN - ARM_LEN*ARM_LEN), 2));
     604:	59 85       	ldd	r21, Y+9	; 0x09
     606:	4a 85       	ldd	r20, Y+10	; 0x0a
     608:	3b 85       	ldd	r19, Y+11	; 0x0b
     60a:	2c 85       	ldd	r18, Y+12	; 0x0c
     60c:	85 2f       	mov	r24, r21
     60e:	94 2f       	mov	r25, r20
     610:	a3 2f       	mov	r26, r19
     612:	b2 2f       	mov	r27, r18
     614:	bc 01       	movw	r22, r24
     616:	cd 01       	movw	r24, r26
     618:	fa 01       	movw	r30, r20
     61a:	0f 2f       	mov	r16, r31
     61c:	1e 2f       	mov	r17, r30
     61e:	23 2f       	mov	r18, r19
     620:	3b 2f       	mov	r19, r27
     622:	a9 01       	movw	r20, r18
     624:	98 01       	movw	r18, r16
     626:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     62a:	6b 01       	movw	r12, r22
     62c:	7c 01       	movw	r14, r24
     62e:	a1 01       	movw	r20, r2
     630:	39 81       	ldd	r19, Y+1	; 0x01
     632:	2d 81       	ldd	r18, Y+5	; 0x05
     634:	85 2f       	mov	r24, r21
     636:	94 2f       	mov	r25, r20
     638:	a3 2f       	mov	r26, r19
     63a:	b2 2f       	mov	r27, r18
     63c:	bc 01       	movw	r22, r24
     63e:	cd 01       	movw	r24, r26
     640:	f1 01       	movw	r30, r2
     642:	0f 2f       	mov	r16, r31
     644:	1e 2f       	mov	r17, r30
     646:	23 2f       	mov	r18, r19
     648:	3b 2f       	mov	r19, r27
     64a:	a9 01       	movw	r20, r18
     64c:	98 01       	movw	r18, r16
     64e:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     652:	9b 01       	movw	r18, r22
     654:	ac 01       	movw	r20, r24
     656:	c7 01       	movw	r24, r14
     658:	b6 01       	movw	r22, r12
     65a:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     65e:	4b 01       	movw	r8, r22
     660:	48 2e       	mov	r4, r24
     662:	f9 2e       	mov	r15, r25
     664:	86 2f       	mov	r24, r22
     666:	99 2d       	mov	r25, r9
     668:	a4 2d       	mov	r26, r4
     66a:	bf 2d       	mov	r27, r15
     66c:	bc 01       	movw	r22, r24
     66e:	cd 01       	movw	r24, r26
     670:	29 e3       	ldi	r18, 0x39	; 57
     672:	36 ed       	ldi	r19, 0xD6	; 214
     674:	45 ee       	ldi	r20, 0xE5	; 229
     676:	5f e3       	ldi	r21, 0x3F	; 63
     678:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     67c:	29 e4       	ldi	r18, 0x49	; 73
     67e:	3d e9       	ldi	r19, 0x9D	; 157
     680:	44 e6       	ldi	r20, 0x64	; 100
     682:	5f e3       	ldi	r21, 0x3F	; 63
     684:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     688:	69 8b       	std	Y+17, r22	; 0x11
     68a:	c7 2e       	mov	r12, r23
     68c:	e8 2e       	mov	r14, r24
     68e:	d9 2e       	mov	r13, r25
     690:	56 2f       	mov	r21, r22
     692:	38 2f       	mov	r19, r24
     694:	86 2f       	mov	r24, r22
     696:	9c 2d       	mov	r25, r12
     698:	ae 2d       	mov	r26, r14
     69a:	bd 2d       	mov	r27, r13
     69c:	bc 01       	movw	r22, r24
     69e:	cd 01       	movw	r24, r26
     6a0:	f5 2f       	mov	r31, r21
     6a2:	0f 2f       	mov	r16, r31
     6a4:	1c 2d       	mov	r17, r12
     6a6:	23 2f       	mov	r18, r19
     6a8:	3b 2f       	mov	r19, r27
     6aa:	a9 01       	movw	r20, r18
     6ac:	98 01       	movw	r18, r16
     6ae:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     6b2:	8b 01       	movw	r16, r22
     6b4:	b8 2e       	mov	r11, r24
     6b6:	a9 2e       	mov	r10, r25
     6b8:	88 2d       	mov	r24, r8
     6ba:	99 2d       	mov	r25, r9
     6bc:	a4 2d       	mov	r26, r4
     6be:	bf 2d       	mov	r27, r15
     6c0:	bc 01       	movw	r22, r24
     6c2:	cd 01       	movw	r24, r26
     6c4:	29 e3       	ldi	r18, 0x39	; 57
     6c6:	36 ed       	ldi	r19, 0xD6	; 214
     6c8:	45 ee       	ldi	r20, 0xE5	; 229
     6ca:	50 e4       	ldi	r21, 0x40	; 64
     6cc:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     6d0:	a5 01       	movw	r20, r10
     6d2:	25 2f       	mov	r18, r21
     6d4:	34 2f       	mov	r19, r20
     6d6:	a9 01       	movw	r20, r18
     6d8:	98 01       	movw	r18, r16
     6da:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     6de:	0e 94 ce 19 	call	0x339c	; 0x339c <sqrt>
     6e2:	4b 01       	movw	r8, r22
     6e4:	5c 01       	movw	r10, r24
	den = z*z + d*d + BOOM_LEN*BOOM_LEN - ARM_LEN*ARM_LEN;
	th2 = atan2(z,d) + atan2(num, den);
     6e6:	59 85       	ldd	r21, Y+9	; 0x09
     6e8:	4a 85       	ldd	r20, Y+10	; 0x0a
     6ea:	3b 85       	ldd	r19, Y+11	; 0x0b
     6ec:	2c 85       	ldd	r18, Y+12	; 0x0c
     6ee:	85 2f       	mov	r24, r21
     6f0:	94 2f       	mov	r25, r20
     6f2:	a3 2f       	mov	r26, r19
     6f4:	b2 2f       	mov	r27, r18
     6f6:	bc 01       	movw	r22, r24
     6f8:	cd 01       	movw	r24, r26
     6fa:	f1 01       	movw	r30, r2
     6fc:	59 81       	ldd	r21, Y+1	; 0x01
     6fe:	4d 81       	ldd	r20, Y+5	; 0x05
     700:	0f 2f       	mov	r16, r31
     702:	1e 2f       	mov	r17, r30
     704:	25 2f       	mov	r18, r21
     706:	34 2f       	mov	r19, r20
     708:	a9 01       	movw	r20, r18
     70a:	98 01       	movw	r18, r16
     70c:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <atan2>
     710:	2b 01       	movw	r4, r22
     712:	3c 01       	movw	r6, r24
     714:	c5 01       	movw	r24, r10
     716:	b4 01       	movw	r22, r8
     718:	f9 89       	ldd	r31, Y+17	; 0x11
     71a:	0f 2f       	mov	r16, r31
     71c:	1c 2d       	mov	r17, r12
     71e:	2e 2d       	mov	r18, r14
     720:	3d 2d       	mov	r19, r13
     722:	a9 01       	movw	r20, r18
     724:	98 01       	movw	r18, r16
     726:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <atan2>
     72a:	9b 01       	movw	r18, r22
     72c:	ac 01       	movw	r20, r24
     72e:	c3 01       	movw	r24, r6
     730:	b2 01       	movw	r22, r4
     732:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     736:	b6 2e       	mov	r11, r22
     738:	a7 2e       	mov	r10, r23
     73a:	88 2e       	mov	r8, r24
     73c:	49 2e       	mov	r4, r25
	*th2_ptr = th2;
     73e:	a5 01       	movw	r20, r10
     740:	85 2f       	mov	r24, r21
     742:	94 2f       	mov	r25, r20
     744:	a8 2d       	mov	r26, r8
     746:	b4 2d       	mov	r27, r4
     748:	ed 85       	ldd	r30, Y+13	; 0x0d
     74a:	fe 85       	ldd	r31, Y+14	; 0x0e
     74c:	80 83       	st	Z, r24
     74e:	91 83       	std	Z+1, r25	; 0x01
     750:	a2 83       	std	Z+2, r26	; 0x02
     752:	b3 83       	std	Z+3, r27	; 0x03

	/* Calculate angle theta3 */
	num = cos(th2)*z - sin(th2)*d;
     754:	bc 01       	movw	r22, r24
     756:	cd 01       	movw	r24, r26
     758:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <cos>
     75c:	6d 87       	std	Y+13, r22	; 0x0d
     75e:	7e 87       	std	Y+14, r23	; 0x0e
     760:	8f 87       	std	Y+15, r24	; 0x0f
     762:	98 8b       	std	Y+16, r25	; 0x10
     764:	a5 01       	movw	r20, r10
     766:	85 2f       	mov	r24, r21
     768:	94 2f       	mov	r25, r20
     76a:	a8 2d       	mov	r26, r8
     76c:	b4 2d       	mov	r27, r4
     76e:	bc 01       	movw	r22, r24
     770:	cd 01       	movw	r24, r26
     772:	0e 94 c4 19 	call	0x3388	; 0x3388 <sin>
     776:	6b 01       	movw	r12, r22
     778:	7c 01       	movw	r14, r24
     77a:	6d 85       	ldd	r22, Y+13	; 0x0d
     77c:	7e 85       	ldd	r23, Y+14	; 0x0e
     77e:	8f 85       	ldd	r24, Y+15	; 0x0f
     780:	98 89       	ldd	r25, Y+16	; 0x10
     782:	f9 85       	ldd	r31, Y+9	; 0x09
     784:	ea 85       	ldd	r30, Y+10	; 0x0a
     786:	5b 85       	ldd	r21, Y+11	; 0x0b
     788:	4c 85       	ldd	r20, Y+12	; 0x0c
     78a:	0f 2f       	mov	r16, r31
     78c:	1e 2f       	mov	r17, r30
     78e:	25 2f       	mov	r18, r21
     790:	34 2f       	mov	r19, r20
     792:	a9 01       	movw	r20, r18
     794:	98 01       	movw	r18, r16
     796:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     79a:	69 8b       	std	Y+17, r22	; 0x11
     79c:	7a 8b       	std	Y+18, r23	; 0x12
     79e:	8b 8b       	std	Y+19, r24	; 0x13
     7a0:	9c 8b       	std	Y+20, r25	; 0x14
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	f1 01       	movw	r30, r2
     7a8:	59 81       	ldd	r21, Y+1	; 0x01
     7aa:	4d 81       	ldd	r20, Y+5	; 0x05
     7ac:	0f 2f       	mov	r16, r31
     7ae:	1e 2f       	mov	r17, r30
     7b0:	25 2f       	mov	r18, r21
     7b2:	34 2f       	mov	r19, r20
     7b4:	a9 01       	movw	r20, r18
     7b6:	98 01       	movw	r18, r16
     7b8:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     7bc:	9b 01       	movw	r18, r22
     7be:	ac 01       	movw	r20, r24
     7c0:	69 89       	ldd	r22, Y+17	; 0x11
     7c2:	7a 89       	ldd	r23, Y+18	; 0x12
     7c4:	8b 89       	ldd	r24, Y+19	; 0x13
     7c6:	9c 89       	ldd	r25, Y+20	; 0x14
     7c8:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     7cc:	69 8b       	std	Y+17, r22	; 0x11
     7ce:	7a 8b       	std	Y+18, r23	; 0x12
     7d0:	8b 8b       	std	Y+19, r24	; 0x13
     7d2:	9c 8b       	std	Y+20, r25	; 0x14
	den = sin(th2)*z + cos(th2)*d - BOOM_LEN;
     7d4:	c7 01       	movw	r24, r14
     7d6:	b6 01       	movw	r22, r12
     7d8:	f9 85       	ldd	r31, Y+9	; 0x09
     7da:	ea 85       	ldd	r30, Y+10	; 0x0a
     7dc:	5b 85       	ldd	r21, Y+11	; 0x0b
     7de:	4c 85       	ldd	r20, Y+12	; 0x0c
     7e0:	0f 2f       	mov	r16, r31
     7e2:	1e 2f       	mov	r17, r30
     7e4:	25 2f       	mov	r18, r21
     7e6:	34 2f       	mov	r19, r20
     7e8:	a9 01       	movw	r20, r18
     7ea:	98 01       	movw	r18, r16
     7ec:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     7f0:	6b 01       	movw	r12, r22
     7f2:	7c 01       	movw	r14, r24
     7f4:	6d 85       	ldd	r22, Y+13	; 0x0d
     7f6:	7e 85       	ldd	r23, Y+14	; 0x0e
     7f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     7fa:	98 89       	ldd	r25, Y+16	; 0x10
     7fc:	f1 01       	movw	r30, r2
     7fe:	59 81       	ldd	r21, Y+1	; 0x01
     800:	4d 81       	ldd	r20, Y+5	; 0x05
     802:	0f 2f       	mov	r16, r31
     804:	1e 2f       	mov	r17, r30
     806:	25 2f       	mov	r18, r21
     808:	34 2f       	mov	r19, r20
     80a:	a9 01       	movw	r20, r18
     80c:	98 01       	movw	r18, r16
     80e:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     812:	9b 01       	movw	r18, r22
     814:	ac 01       	movw	r20, r24
     816:	c7 01       	movw	r24, r14
     818:	b6 01       	movw	r22, r12
     81a:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     81e:	2f e1       	ldi	r18, 0x1F	; 31
     820:	35 e8       	ldi	r19, 0x85	; 133
     822:	4b ea       	ldi	r20, 0xAB	; 171
     824:	5f e3       	ldi	r21, 0x3F	; 63
     826:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     82a:	9b 01       	movw	r18, r22
     82c:	ac 01       	movw	r20, r24
	th3 = atan2(num, den);
     82e:	69 89       	ldd	r22, Y+17	; 0x11
     830:	7a 89       	ldd	r23, Y+18	; 0x12
     832:	8b 89       	ldd	r24, Y+19	; 0x13
     834:	9c 89       	ldd	r25, Y+20	; 0x14
     836:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <atan2>
     83a:	6b 01       	movw	r12, r22
     83c:	7c 01       	movw	r14, r24
	*th3_ptr = th3;
     83e:	a9 8d       	ldd	r26, Y+25	; 0x19
     840:	ba 8d       	ldd	r27, Y+26	; 0x1a
     842:	6d 93       	st	X+, r22
     844:	7d 93       	st	X+, r23
     846:	8d 93       	st	X+, r24
     848:	9c 93       	st	X, r25
     84a:	13 97       	sbiw	r26, 0x03	; 3

	/* Calculate angle theta4 */
	th4 = -thdg - th2 + fabs(th3);
     84c:	6d 89       	ldd	r22, Y+21	; 0x15
     84e:	7e 89       	ldd	r23, Y+22	; 0x16
     850:	8f 89       	ldd	r24, Y+23	; 0x17
     852:	98 8d       	ldd	r25, Y+24	; 0x18
     854:	90 58       	subi	r25, 0x80	; 128
     856:	f5 01       	movw	r30, r10
     858:	0f 2f       	mov	r16, r31
     85a:	1e 2f       	mov	r17, r30
     85c:	28 2d       	mov	r18, r8
     85e:	34 2d       	mov	r19, r4
     860:	a9 01       	movw	r20, r18
     862:	98 01       	movw	r18, r16
     864:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     868:	a7 01       	movw	r20, r14
     86a:	96 01       	movw	r18, r12
     86c:	5f 77       	andi	r21, 0x7F	; 127
     86e:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     872:	dc 01       	movw	r26, r24
     874:	cb 01       	movw	r24, r22
	//th4 = thdg - fabs(th3) + th2 - BUCKET_ANGLE;
	*th4_ptr = th4;
     876:	eb 8d       	ldd	r30, Y+27	; 0x1b
     878:	fc 8d       	ldd	r31, Y+28	; 0x1c
     87a:	80 83       	st	Z, r24
     87c:	91 83       	std	Z+1, r25	; 0x01
     87e:	a2 83       	std	Z+2, r26	; 0x02
     880:	b3 83       	std	Z+3, r27	; 0x03

}
     882:	6c 96       	adiw	r28, 0x1c	; 28
     884:	0f b6       	in	r0, 0x3f	; 63
     886:	f8 94       	cli
     888:	de bf       	out	0x3e, r29	; 62
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	cd bf       	out	0x3d, r28	; 61
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	ff 90       	pop	r15
     898:	ef 90       	pop	r14
     89a:	df 90       	pop	r13
     89c:	cf 90       	pop	r12
     89e:	bf 90       	pop	r11
     8a0:	af 90       	pop	r10
     8a2:	9f 90       	pop	r9
     8a4:	8f 90       	pop	r8
     8a6:	7f 90       	pop	r7
     8a8:	6f 90       	pop	r6
     8aa:	5f 90       	pop	r5
     8ac:	4f 90       	pop	r4
     8ae:	3f 90       	pop	r3
     8b0:	2f 90       	pop	r2
     8b2:	08 95       	ret

000008b4 <calculateBucketCoordinates>:


void calculateBucketCoordinates(float* const x_ptr, float* const y_ptr, float* const z_ptr,
							const float th1, const float th2, const float th3, const float th4)
{
     8b4:	2f 92       	push	r2
     8b6:	3f 92       	push	r3
     8b8:	4f 92       	push	r4
     8ba:	5f 92       	push	r5
     8bc:	6f 92       	push	r6
     8be:	7f 92       	push	r7
     8c0:	8f 92       	push	r8
     8c2:	9f 92       	push	r9
     8c4:	af 92       	push	r10
     8c6:	bf 92       	push	r11
     8c8:	cf 92       	push	r12
     8ca:	df 92       	push	r13
     8cc:	ef 92       	push	r14
     8ce:	ff 92       	push	r15
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	68 97       	sbiw	r28, 0x18	; 24
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	9c 8b       	std	Y+20, r25	; 0x14
     8ea:	8b 8b       	std	Y+19, r24	; 0x13
     8ec:	7e 8b       	std	Y+22, r23	; 0x16
     8ee:	6d 8b       	std	Y+21, r22	; 0x15
     8f0:	58 8f       	std	Y+24, r21	; 0x18
     8f2:	4f 8b       	std	Y+23, r20	; 0x17
     8f4:	0f 83       	std	Y+7, r16	; 0x07
     8f6:	18 87       	std	Y+8, r17	; 0x08
     8f8:	29 87       	std	Y+9, r18	; 0x09
     8fa:	3a 87       	std	Y+10, r19	; 0x0a
     8fc:	c9 82       	std	Y+1, r12	; 0x01
     8fe:	da 82       	std	Y+2, r13	; 0x02
     900:	eb 82       	std	Y+3, r14	; 0x03
     902:	fc 82       	std	Y+4, r15	; 0x04
     904:	a5 01       	movw	r20, r10
     906:	94 01       	movw	r18, r8
	float cos234 = cos(th2+th3+th4);
     908:	c7 01       	movw	r24, r14
     90a:	b6 01       	movw	r22, r12
     90c:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     910:	36 2e       	mov	r3, r22
     912:	27 2e       	mov	r2, r23
     914:	8d 83       	std	Y+5, r24	; 0x05
     916:	9e 83       	std	Y+6, r25	; 0x06
     918:	a1 01       	movw	r20, r2
     91a:	38 2f       	mov	r19, r24
     91c:	29 2f       	mov	r18, r25
     91e:	85 2f       	mov	r24, r21
     920:	94 2f       	mov	r25, r20
     922:	a3 2f       	mov	r26, r19
     924:	b2 2f       	mov	r27, r18
     926:	bc 01       	movw	r22, r24
     928:	cd 01       	movw	r24, r26
     92a:	2d a5       	lds	r18, 0x6d
     92c:	3e a5       	lds	r19, 0x6e
     92e:	4f a5       	lds	r20, 0x6f
     930:	58 a9       	sts	0x48, r21
     932:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     936:	16 2f       	mov	r17, r22
     938:	07 2f       	mov	r16, r23
     93a:	f8 2e       	mov	r15, r24
     93c:	c9 2e       	mov	r12, r25
     93e:	a8 01       	movw	r20, r16
     940:	85 2f       	mov	r24, r21
     942:	94 2f       	mov	r25, r20
     944:	af 2d       	mov	r26, r15
     946:	bc 2d       	mov	r27, r12
     948:	bc 01       	movw	r22, r24
     94a:	cd 01       	movw	r24, r26
     94c:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <cos>
     950:	4b 01       	movw	r8, r22
     952:	5c 01       	movw	r10, r24
	float sin234 = sin(th2+th3+th4);
     954:	a8 01       	movw	r20, r16
     956:	85 2f       	mov	r24, r21
     958:	94 2f       	mov	r25, r20
     95a:	af 2d       	mov	r26, r15
     95c:	bc 2d       	mov	r27, r12
     95e:	bc 01       	movw	r22, r24
     960:	cd 01       	movw	r24, r26
     962:	0e 94 c4 19 	call	0x3388	; 0x3388 <sin>
     966:	6b 87       	std	Y+11, r22	; 0x0b
     968:	7c 87       	std	Y+12, r23	; 0x0c
     96a:	8d 87       	std	Y+13, r24	; 0x0d
     96c:	9e 87       	std	Y+14, r25	; 0x0e

	*x_ptr = cos(th1)*(BUCKET_LEN*cos234 + ARM_LEN*cos(th2+th3) + BOOM_LEN*cos(th2) + SLEW_JOINT_LEN);
     96e:	6f 81       	ldd	r22, Y+7	; 0x07
     970:	78 85       	ldd	r23, Y+8	; 0x08
     972:	89 85       	ldd	r24, Y+9	; 0x09
     974:	9a 85       	ldd	r25, Y+10	; 0x0a
     976:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <cos>
     97a:	6f 87       	std	Y+15, r22	; 0x0f
     97c:	78 8b       	std	Y+16, r23	; 0x10
     97e:	89 8b       	std	Y+17, r24	; 0x11
     980:	9a 8b       	std	Y+18, r25	; 0x12
     982:	a1 01       	movw	r20, r2
     984:	3d 81       	ldd	r19, Y+5	; 0x05
     986:	2e 81       	ldd	r18, Y+6	; 0x06
     988:	85 2f       	mov	r24, r21
     98a:	94 2f       	mov	r25, r20
     98c:	a3 2f       	mov	r26, r19
     98e:	b2 2f       	mov	r27, r18
     990:	bc 01       	movw	r22, r24
     992:	cd 01       	movw	r24, r26
     994:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <cos>
     998:	6b 01       	movw	r12, r22
     99a:	7c 01       	movw	r14, r24
     99c:	69 81       	ldd	r22, Y+1	; 0x01
     99e:	7a 81       	ldd	r23, Y+2	; 0x02
     9a0:	8b 81       	ldd	r24, Y+3	; 0x03
     9a2:	9c 81       	ldd	r25, Y+4	; 0x04
     9a4:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <cos>
     9a8:	2b 01       	movw	r4, r22
     9aa:	3c 01       	movw	r6, r24
     9ac:	c5 01       	movw	r24, r10
     9ae:	b4 01       	movw	r22, r8
     9b0:	2d e3       	ldi	r18, 0x3D	; 61
     9b2:	3a e0       	ldi	r19, 0x0A	; 10
     9b4:	47 ed       	ldi	r20, 0xD7	; 215
     9b6:	5e e3       	ldi	r21, 0x3E	; 62
     9b8:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     9bc:	4b 01       	movw	r8, r22
     9be:	5c 01       	movw	r10, r24
     9c0:	c7 01       	movw	r24, r14
     9c2:	b6 01       	movw	r22, r12
     9c4:	25 e8       	ldi	r18, 0x85	; 133
     9c6:	3b ee       	ldi	r19, 0xEB	; 235
     9c8:	41 e7       	ldi	r20, 0x71	; 113
     9ca:	5f e3       	ldi	r21, 0x3F	; 63
     9cc:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     9d0:	9b 01       	movw	r18, r22
     9d2:	ac 01       	movw	r20, r24
     9d4:	c5 01       	movw	r24, r10
     9d6:	b4 01       	movw	r22, r8
     9d8:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     9dc:	6b 01       	movw	r12, r22
     9de:	7c 01       	movw	r14, r24
     9e0:	c3 01       	movw	r24, r6
     9e2:	b2 01       	movw	r22, r4
     9e4:	2f e1       	ldi	r18, 0x1F	; 31
     9e6:	35 e8       	ldi	r19, 0x85	; 133
     9e8:	4b ea       	ldi	r20, 0xAB	; 171
     9ea:	5f e3       	ldi	r21, 0x3F	; 63
     9ec:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     9f0:	9b 01       	movw	r18, r22
     9f2:	ac 01       	movw	r20, r24
     9f4:	c7 01       	movw	r24, r14
     9f6:	b6 01       	movw	r22, r12
     9f8:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     9fc:	2c ee       	ldi	r18, 0xEC	; 236
     9fe:	31 e5       	ldi	r19, 0x51	; 81
     a00:	48 e3       	ldi	r20, 0x38	; 56
     a02:	5e e3       	ldi	r21, 0x3E	; 62
     a04:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     a08:	f6 2e       	mov	r15, r22
     a0a:	c7 2e       	mov	r12, r23
     a0c:	e8 2e       	mov	r14, r24
     a0e:	d9 2e       	mov	r13, r25
     a10:	6f 85       	ldd	r22, Y+15	; 0x0f
     a12:	78 89       	ldd	r23, Y+16	; 0x10
     a14:	89 89       	ldd	r24, Y+17	; 0x11
     a16:	9a 89       	ldd	r25, Y+18	; 0x12
     a18:	0f 2d       	mov	r16, r15
     a1a:	1c 2d       	mov	r17, r12
     a1c:	2e 2d       	mov	r18, r14
     a1e:	3d 2d       	mov	r19, r13
     a20:	a9 01       	movw	r20, r18
     a22:	98 01       	movw	r18, r16
     a24:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     a28:	dc 01       	movw	r26, r24
     a2a:	cb 01       	movw	r24, r22
     a2c:	eb 89       	ldd	r30, Y+19	; 0x13
     a2e:	fc 89       	ldd	r31, Y+20	; 0x14
     a30:	80 83       	st	Z, r24
     a32:	91 83       	std	Z+1, r25	; 0x01
     a34:	a2 83       	std	Z+2, r26	; 0x02
     a36:	b3 83       	std	Z+3, r27	; 0x03

	*y_ptr = sin(th1)*(BUCKET_LEN*cos234 + ARM_LEN*cos(th2+th3) + BOOM_LEN*cos(th2) + SLEW_JOINT_LEN);
     a38:	6f 81       	ldd	r22, Y+7	; 0x07
     a3a:	78 85       	ldd	r23, Y+8	; 0x08
     a3c:	89 85       	ldd	r24, Y+9	; 0x09
     a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a40:	0e 94 c4 19 	call	0x3388	; 0x3388 <sin>
     a44:	2e 2d       	mov	r18, r14
     a46:	3d 2d       	mov	r19, r13
     a48:	a9 01       	movw	r20, r18
     a4a:	98 01       	movw	r18, r16
     a4c:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     a50:	dc 01       	movw	r26, r24
     a52:	cb 01       	movw	r24, r22
     a54:	ed 89       	ldd	r30, Y+21	; 0x15
     a56:	fe 89       	ldd	r31, Y+22	; 0x16
     a58:	80 83       	st	Z, r24
     a5a:	91 83       	std	Z+1, r25	; 0x01
     a5c:	a2 83       	std	Z+2, r26	; 0x02
     a5e:	b3 83       	std	Z+3, r27	; 0x03

	*z_ptr = BUCKET_LEN*sin234 + ARM_LEN*sin(th2+th3) + BOOM_LEN*sin(th2);
     a60:	a1 01       	movw	r20, r2
     a62:	3d 81       	ldd	r19, Y+5	; 0x05
     a64:	2e 81       	ldd	r18, Y+6	; 0x06
     a66:	85 2f       	mov	r24, r21
     a68:	94 2f       	mov	r25, r20
     a6a:	a3 2f       	mov	r26, r19
     a6c:	b2 2f       	mov	r27, r18
     a6e:	bc 01       	movw	r22, r24
     a70:	cd 01       	movw	r24, r26
     a72:	0e 94 c4 19 	call	0x3388	; 0x3388 <sin>
     a76:	6b 01       	movw	r12, r22
     a78:	7c 01       	movw	r14, r24
     a7a:	69 81       	ldd	r22, Y+1	; 0x01
     a7c:	7a 81       	ldd	r23, Y+2	; 0x02
     a7e:	8b 81       	ldd	r24, Y+3	; 0x03
     a80:	9c 81       	ldd	r25, Y+4	; 0x04
     a82:	0e 94 c4 19 	call	0x3388	; 0x3388 <sin>
     a86:	2b 01       	movw	r4, r22
     a88:	3c 01       	movw	r6, r24
     a8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     a90:	9e 85       	ldd	r25, Y+14	; 0x0e
     a92:	2d e3       	ldi	r18, 0x3D	; 61
     a94:	3a e0       	ldi	r19, 0x0A	; 10
     a96:	47 ed       	ldi	r20, 0xD7	; 215
     a98:	5e e3       	ldi	r21, 0x3E	; 62
     a9a:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     a9e:	4b 01       	movw	r8, r22
     aa0:	5c 01       	movw	r10, r24
     aa2:	c7 01       	movw	r24, r14
     aa4:	b6 01       	movw	r22, r12
     aa6:	25 e8       	ldi	r18, 0x85	; 133
     aa8:	3b ee       	ldi	r19, 0xEB	; 235
     aaa:	41 e7       	ldi	r20, 0x71	; 113
     aac:	5f e3       	ldi	r21, 0x3F	; 63
     aae:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	c5 01       	movw	r24, r10
     ab8:	b4 01       	movw	r22, r8
     aba:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     abe:	6b 01       	movw	r12, r22
     ac0:	7c 01       	movw	r14, r24
     ac2:	c3 01       	movw	r24, r6
     ac4:	b2 01       	movw	r22, r4
     ac6:	2f e1       	ldi	r18, 0x1F	; 31
     ac8:	35 e8       	ldi	r19, 0x85	; 133
     aca:	4b ea       	ldi	r20, 0xAB	; 171
     acc:	5f e3       	ldi	r21, 0x3F	; 63
     ace:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     ad2:	9b 01       	movw	r18, r22
     ad4:	ac 01       	movw	r20, r24
     ad6:	c7 01       	movw	r24, r14
     ad8:	b6 01       	movw	r22, r12
     ada:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     ade:	dc 01       	movw	r26, r24
     ae0:	cb 01       	movw	r24, r22
     ae2:	ef 89       	ldd	r30, Y+23	; 0x17
     ae4:	f8 8d       	ldd	r31, Y+24	; 0x18
     ae6:	80 83       	st	Z, r24
     ae8:	91 83       	std	Z+1, r25	; 0x01
     aea:	a2 83       	std	Z+2, r26	; 0x02
     aec:	b3 83       	std	Z+3, r27	; 0x03

}
     aee:	68 96       	adiw	r28, 0x18	; 24
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	de bf       	out	0x3e, r29	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	bf 90       	pop	r11
     b0c:	af 90       	pop	r10
     b0e:	9f 90       	pop	r9
     b10:	8f 90       	pop	r8
     b12:	7f 90       	pop	r7
     b14:	6f 90       	pop	r6
     b16:	5f 90       	pop	r5
     b18:	4f 90       	pop	r4
     b1a:	3f 90       	pop	r3
     b1c:	2f 90       	pop	r2
     b1e:	08 95       	ret

00000b20 <pid_controller>:
                 uint8_t* const direction,
                 int16_t* const jointErrorIntegral,
				 uint8_t switchDirection,
                 const float Kp,
                 const float Ki)
{
     b20:	2f 92       	push	r2
     b22:	3f 92       	push	r3
     b24:	4f 92       	push	r4
     b26:	5f 92       	push	r5
     b28:	7f 92       	push	r7
     b2a:	8f 92       	push	r8
     b2c:	9f 92       	push	r9
     b2e:	af 92       	push	r10
     b30:	bf 92       	push	r11
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	0f 93       	push	r16
     b3c:	1f 93       	push	r17
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	00 d0       	rcall	.+0      	; 0xb44 <pid_controller+0x24>
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
     b48:	5a 83       	std	Y+2, r21	; 0x02
     b4a:	49 83       	std	Y+1, r20	; 0x01
     b4c:	70 2e       	mov	r7, r16
     b4e:	14 01       	movw	r2, r8
     b50:	25 01       	movw	r4, r10

	int16_t error;
	int16_t integral = *jointErrorIntegral;
     b52:	f9 01       	movw	r30, r18
     b54:	a0 80       	ld	r10, Z
     b56:	b1 80       	ldd	r11, Z+1	; 0x01
	int16_t pid, P, I;

	error = *referenceAngle - *currentAngle;     //Calculate error
     b58:	fc 01       	movw	r30, r24
     b5a:	00 81       	ld	r16, Z
     b5c:	11 81       	ldd	r17, Z+1	; 0x01
     b5e:	fb 01       	movw	r30, r22
     b60:	80 81       	ld	r24, Z
     b62:	91 81       	ldd	r25, Z+1	; 0x01
     b64:	08 1b       	sub	r16, r24
     b66:	19 0b       	sbc	r17, r25
	
	uart1_puts("PID error term: ");
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	itoa(error,buffer, 10);
     b70:	c8 01       	movw	r24, r16
     b72:	69 e5       	ldi	r22, 0x59	; 89
     b74:	72 e0       	ldi	r23, 0x02	; 2
     b76:	4a e0       	ldi	r20, 0x0A	; 10
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
	uart1_puts(buffer);
     b7e:	89 e5       	ldi	r24, 0x59	; 89
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>

	if(abs(error) < 1)
     b86:	01 15       	cp	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	31 f4       	brne	.+12     	; 0xb98 <pid_controller+0x78>
   	{
		*direction = FLOATING;
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	e9 81       	ldd	r30, Y+1	; 0x01
     b90:	fa 81       	ldd	r31, Y+2	; 0x02
     b92:	80 83       	st	Z, r24
		pid = 0;
		return (uint8_t)pid;
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	74 c0       	rjmp	.+232    	; 0xc80 <pid_controller+0x160>
   	}

	integral += error;		//Calculate integral of the error
     b98:	a0 0e       	add	r10, r16
     b9a:	b1 1e       	adc	r11, r17
     b9c:	fc e9       	ldi	r31, 0x9C	; 156
     b9e:	af 16       	cp	r10, r31
     ba0:	ff ef       	ldi	r31, 0xFF	; 255
     ba2:	bf 06       	cpc	r11, r31
     ba4:	24 f4       	brge	.+8      	; 0xbae <pid_controller+0x8e>
     ba6:	9c e9       	ldi	r25, 0x9C	; 156
     ba8:	a9 2e       	mov	r10, r25
     baa:	9f ef       	ldi	r25, 0xFF	; 255
     bac:	b9 2e       	mov	r11, r25
     bae:	85 e6       	ldi	r24, 0x65	; 101
     bb0:	a8 16       	cp	r10, r24
     bb2:	b1 04       	cpc	r11, r1
     bb4:	1c f0       	brlt	.+6      	; 0xbbc <pid_controller+0x9c>
     bb6:	84 e6       	ldi	r24, 0x64	; 100
     bb8:	a8 2e       	mov	r10, r24
     bba:	b1 2c       	mov	r11, r1
	if(integral > MAXFLOW) integral = MAXFLOW;           //Anti-windup for the integral
	else if(integral < -MAXFLOW) integral = -MAXFLOW;   //Anti-windup for the negative side
	//*jointErrorIntegral = integral;
	P = Kp * error;    		//P term
     bbc:	b8 01       	movw	r22, r16
     bbe:	88 27       	eor	r24, r24
     bc0:	77 fd       	sbrc	r23, 7
     bc2:	80 95       	com	r24
     bc4:	98 2f       	mov	r25, r24
     bc6:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__floatsisf>
     bca:	9b 01       	movw	r18, r22
     bcc:	ac 01       	movw	r20, r24
     bce:	c7 01       	movw	r24, r14
     bd0:	b6 01       	movw	r22, r12
     bd2:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     bd6:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__fixsfsi>
     bda:	dc 01       	movw	r26, r24
     bdc:	cb 01       	movw	r24, r22
     bde:	8c 01       	movw	r16, r24
	I = Ki * integral;		//I term
     be0:	b5 01       	movw	r22, r10
     be2:	88 27       	eor	r24, r24
     be4:	77 fd       	sbrc	r23, 7
     be6:	80 95       	com	r24
     be8:	98 2f       	mov	r25, r24
     bea:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__floatsisf>
     bee:	6b 01       	movw	r12, r22
     bf0:	7c 01       	movw	r14, r24
	
	uart1_puts("PID integral term: ");
     bf2:	81 e1       	ldi	r24, 0x11	; 17
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	itoa(integral,buffer, 10);
     bfa:	c5 01       	movw	r24, r10
     bfc:	69 e5       	ldi	r22, 0x59	; 89
     bfe:	72 e0       	ldi	r23, 0x02	; 2
     c00:	4a e0       	ldi	r20, 0x0A	; 10
     c02:	50 e0       	ldi	r21, 0x00	; 0
     c04:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
	uart1_puts(buffer);
     c08:	89 e5       	ldi	r24, 0x59	; 89
     c0a:	92 e0       	ldi	r25, 0x02	; 2
     c0c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	integral += error;		//Calculate integral of the error
	if(integral > MAXFLOW) integral = MAXFLOW;           //Anti-windup for the integral
	else if(integral < -MAXFLOW) integral = -MAXFLOW;   //Anti-windup for the negative side
	//*jointErrorIntegral = integral;
	P = Kp * error;    		//P term
	I = Ki * integral;		//I term
     c10:	c2 01       	movw	r24, r4
     c12:	b1 01       	movw	r22, r2
     c14:	a7 01       	movw	r20, r14
     c16:	96 01       	movw	r18, r12
     c18:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     c1c:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__fixsfsi>
	
	uart1_puts("PID integral term: ");
	itoa(integral,buffer, 10);
	uart1_puts(buffer);

	pid = P + I;
     c20:	60 0f       	add	r22, r16
     c22:	71 1f       	adc	r23, r17

	if(pid < 0)								//Check for negative values
     c24:	77 ff       	sbrs	r23, 7
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <pid_controller+0x11a>
	{
		if(switchDirection)
     c28:	77 20       	and	r7, r7
     c2a:	11 f0       	breq	.+4      	; 0xc30 <pid_controller+0x110>
		{
			*direction = RETRACT;
     c2c:	82 e0       	ldi	r24, 0x02	; 2
     c2e:	01 c0       	rjmp	.+2      	; 0xc32 <pid_controller+0x112>
		}
		else
		{
			*direction = EXTEND;         							
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	e9 81       	ldd	r30, Y+1	; 0x01
     c34:	fa 81       	ldd	r31, Y+2	; 0x02
     c36:	80 83       	st	Z, r24
     c38:	18 c0       	rjmp	.+48     	; 0xc6a <pid_controller+0x14a>
	}
	else
	{
		// I term is different when lifting the arm or the boom as
		// more power is required to reach the wanted position
		I = (Ki+1.5) * integral;
     c3a:	c2 01       	movw	r24, r4
     c3c:	b1 01       	movw	r22, r2
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 ec       	ldi	r20, 0xC0	; 192
     c44:	5f e3       	ldi	r21, 0x3F	; 63
     c46:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     c4a:	a7 01       	movw	r20, r14
     c4c:	96 01       	movw	r18, r12
     c4e:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     c52:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__fixsfsi>
		if(switchDirection)
     c56:	77 20       	and	r7, r7
     c58:	11 f0       	breq	.+4      	; 0xc5e <pid_controller+0x13e>
		{
			*direction = EXTEND;
     c5a:	81 e0       	ldi	r24, 0x01	; 1
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <pid_controller+0x140>
		}
		else
		{
			*direction = RETRACT;          							
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	80 83       	st	Z, r24
		}

		pid = P + I;
     c66:	60 0f       	add	r22, r16
     c68:	71 1f       	adc	r23, r17
	}

	pid = abs(pid);
     c6a:	77 ff       	sbrs	r23, 7
     c6c:	03 c0       	rjmp	.+6      	; 0xc74 <pid_controller+0x154>
     c6e:	70 95       	com	r23
     c70:	61 95       	neg	r22
     c72:	7f 4f       	sbci	r23, 0xFF	; 255

	if(pid > MAXFLOW) pid = MAXFLOW;        		//Limit the maximum value of the output

	return (uint8_t)pid;  					//Controller output */
     c74:	cb 01       	movw	r24, r22
     c76:	65 36       	cpi	r22, 0x65	; 101
     c78:	71 05       	cpc	r23, r1
     c7a:	14 f0       	brlt	.+4      	; 0xc80 <pid_controller+0x160>
     c7c:	84 e6       	ldi	r24, 0x64	; 100
     c7e:	90 e0       	ldi	r25, 0x00	; 0
}
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	8f 90       	pop	r8
     c9c:	7f 90       	pop	r7
     c9e:	5f 90       	pop	r5
     ca0:	4f 90       	pop	r4
     ca2:	3f 90       	pop	r3
     ca4:	2f 90       	pop	r2
     ca6:	08 95       	ret

00000ca8 <__vector_17>:
}



ISR(TIMER0_OVF_vect)
{
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	2f 93       	push	r18
     cb4:	3f 93       	push	r19
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
	// Set hb flag every 1000ms
	if (msCount++ > HEARTBEAT_INTERVAL)
     cc4:	80 91 4c 01 	lds	r24, 0x014C
     cc8:	90 91 4d 01 	lds	r25, 0x014D
     ccc:	9c 01       	movw	r18, r24
     cce:	2f 5f       	subi	r18, 0xFF	; 255
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	30 93 4d 01 	sts	0x014D, r19
     cd6:	20 93 4c 01 	sts	0x014C, r18
     cda:	21 e0       	ldi	r18, 0x01	; 1
     cdc:	85 3f       	cpi	r24, 0xF5	; 245
     cde:	92 07       	cpc	r25, r18
     ce0:	38 f0       	brcs	.+14     	; 0xcf0 <__vector_17+0x48>
	{
		f_heartbeat = 1;
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 4b 01 	sts	0x014B, r24
		msCount = 0;
     ce8:	10 92 4d 01 	sts	0x014D, r1
     cec:	10 92 4c 01 	sts	0x014C, r1
	}

	if ((msCount % PID_CTRL_INTERVAL) == 0)
     cf0:	80 91 4c 01 	lds	r24, 0x014C
     cf4:	90 91 4d 01 	lds	r25, 0x014D
     cf8:	62 e3       	ldi	r22, 0x32	; 50
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__udivmodhi4>
     d00:	00 97       	sbiw	r24, 0x00	; 0
     d02:	19 f4       	brne	.+6      	; 0xd0a <__vector_17+0x62>
		f_ctrl = 1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	80 93 4a 01 	sts	0x014A, r24

	// Start counting from '6' to make sure next interrupt
	// occurs in a millisecond. 256 - 16MHz/64/1000 = 6
	TCNT0 =  6;
     d0a:	86 e0       	ldi	r24, 0x06	; 6
     d0c:	86 bd       	out	0x26, r24	; 38
}
     d0e:	bf 91       	pop	r27
     d10:	af 91       	pop	r26
     d12:	9f 91       	pop	r25
     d14:	8f 91       	pop	r24
     d16:	7f 91       	pop	r23
     d18:	6f 91       	pop	r22
     d1a:	5f 91       	pop	r21
     d1c:	3f 91       	pop	r19
     d1e:	2f 91       	pop	r18
     d20:	0f 90       	pop	r0
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	0f 90       	pop	r0
     d26:	1f 90       	pop	r1
     d28:	18 95       	reti

00000d2a <max>:
#include <string.h>
#include "kinematics.h"
#include "waypoint.h"

float max(float x, float y)
{
     d2a:	af 92       	push	r10
     d2c:	bf 92       	push	r11
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	d6 2f       	mov	r29, r22
     d40:	c7 2f       	mov	r28, r23
     d42:	f8 2e       	mov	r15, r24
     d44:	e9 2e       	mov	r14, r25
     d46:	d2 2e       	mov	r13, r18
     d48:	c3 2e       	mov	r12, r19
     d4a:	b4 2e       	mov	r11, r20
     d4c:	a5 2e       	mov	r10, r21
   return (x > y ? x : y);
     d4e:	ae 01       	movw	r20, r28
     d50:	97 01       	movw	r18, r14
     d52:	85 2f       	mov	r24, r21
     d54:	94 2f       	mov	r25, r20
     d56:	a3 2f       	mov	r26, r19
     d58:	b2 2f       	mov	r27, r18
     d5a:	bc 01       	movw	r22, r24
     d5c:	cd 01       	movw	r24, r26
     d5e:	f6 01       	movw	r30, r12
     d60:	a5 01       	movw	r20, r10
     d62:	0f 2f       	mov	r16, r31
     d64:	1e 2f       	mov	r17, r30
     d66:	25 2f       	mov	r18, r21
     d68:	34 2f       	mov	r19, r20
     d6a:	a9 01       	movw	r20, r18
     d6c:	98 01       	movw	r18, r16
     d6e:	0e 94 0a 19 	call	0x3214	; 0x3214 <__gesf2>
     d72:	18 16       	cp	r1, r24
     d74:	14 f0       	brlt	.+4      	; 0xd7a <max+0x50>
     d76:	e6 01       	movw	r28, r12
     d78:	75 01       	movw	r14, r10
}
     d7a:	ae 01       	movw	r20, r28
     d7c:	97 01       	movw	r18, r14
     d7e:	85 2f       	mov	r24, r21
     d80:	9c 2f       	mov	r25, r28
     d82:	a3 2f       	mov	r26, r19
     d84:	be 2d       	mov	r27, r14
     d86:	bc 01       	movw	r22, r24
     d88:	cd 01       	movw	r24, r26
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	08 95       	ret

00000da0 <checkWaypoint>:

uint8_t checkWaypoint(const Waypoint* const wp)
{
     da0:	2f 92       	push	r2
     da2:	3f 92       	push	r3
     da4:	4f 92       	push	r4
     da6:	5f 92       	push	r5
     da8:	6f 92       	push	r6
     daa:	7f 92       	push	r7
     dac:	8f 92       	push	r8
     dae:	9f 92       	push	r9
     db0:	af 92       	push	r10
     db2:	bf 92       	push	r11
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	0f 93       	push	r16
     dbe:	1f 93       	push	r17
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	cd b7       	in	r28, 0x3d	; 61
     dc6:	de b7       	in	r29, 0x3e	; 62
     dc8:	a4 97       	sbiw	r28, 0x24	; 36
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	9a 8b       	std	Y+18, r25	; 0x12
     dd6:	89 8b       	std	Y+17, r24	; 0x11
   float th1, th2, th3, th4, x1, x2, u1, u2, limit, d;
   float x = wp->x;
     dd8:	dc 01       	movw	r26, r24
     dda:	8d 91       	ld	r24, X+
     ddc:	9d 91       	ld	r25, X+
     dde:	0d 90       	ld	r0, X+
     de0:	bc 91       	ld	r27, X
     de2:	a0 2d       	mov	r26, r0
     de4:	8f 8b       	std	Y+23, r24	; 0x17
     de6:	98 8f       	std	Y+24, r25	; 0x18
     de8:	a9 8f       	std	Y+25, r26	; 0x19
     dea:	ba 8f       	std	Y+26, r27	; 0x1a
   float y = wp->y;
     dec:	a9 89       	ldd	r26, Y+17	; 0x11
     dee:	ba 89       	ldd	r27, Y+18	; 0x12
     df0:	14 96       	adiw	r26, 0x04	; 4
     df2:	8d 91       	ld	r24, X+
     df4:	9d 91       	ld	r25, X+
     df6:	0d 90       	ld	r0, X+
     df8:	bc 91       	ld	r27, X
     dfa:	a0 2d       	mov	r26, r0
     dfc:	8b 8f       	std	Y+27, r24	; 0x1b
     dfe:	9c 8f       	std	Y+28, r25	; 0x1c
     e00:	ad 8f       	std	Y+29, r26	; 0x1d
     e02:	be 8f       	std	Y+30, r27	; 0x1e
   float z = wp->z;
     e04:	e9 89       	ldd	r30, Y+17	; 0x11
     e06:	fa 89       	ldd	r31, Y+18	; 0x12
     e08:	c0 84       	ldd	r12, Z+8	; 0x08
     e0a:	d1 84       	ldd	r13, Z+9	; 0x09
     e0c:	e2 84       	ldd	r14, Z+10	; 0x0a
     e0e:	f3 84       	ldd	r15, Z+11	; 0x0b

   x1 = 2*BOOM_LEN*BOOM_LEN + 2*ARM_LEN*ARM_LEN - 2*z*z;
     e10:	c7 01       	movw	r24, r14
     e12:	b6 01       	movw	r22, r12
     e14:	a7 01       	movw	r20, r14
     e16:	96 01       	movw	r18, r12
     e18:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     e1c:	a7 01       	movw	r20, r14
     e1e:	96 01       	movw	r18, r12
     e20:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     e24:	9b 01       	movw	r18, r22
     e26:	ac 01       	movw	r20, r24
     e28:	6f e6       	ldi	r22, 0x6F	; 111
     e2a:	72 e1       	ldi	r23, 0x12	; 18
     e2c:	8c ea       	ldi	r24, 0xAC	; 172
     e2e:	90 e4       	ldi	r25, 0x40	; 64
     e30:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     e34:	46 2e       	mov	r4, r22
     e36:	77 2e       	mov	r7, r23
     e38:	68 2e       	mov	r6, r24
     e3a:	59 2e       	mov	r5, r25
     e3c:	86 2f       	mov	r24, r22
     e3e:	97 2d       	mov	r25, r7
     e40:	a6 2d       	mov	r26, r6
     e42:	b5 2d       	mov	r27, r5
     e44:	8b 8b       	std	Y+19, r24	; 0x13
     e46:	9c 8b       	std	Y+20, r25	; 0x14
     e48:	ad 8b       	std	Y+21, r26	; 0x15
     e4a:	be 8b       	std	Y+22, r27	; 0x16
   x2 = pow(BOOM_LEN, 4) + pow(ARM_LEN,4) - 2*pow(BOOM_LEN*ARM_LEN, 2) - 2*pow(BOOM_LEN*z, 2) - 2*ARM_LEN*ARM_LEN*z*z + pow(z,4);
     e4c:	c7 01       	movw	r24, r14
     e4e:	b6 01       	movw	r22, r12
     e50:	2f e1       	ldi	r18, 0x1F	; 31
     e52:	35 e8       	ldi	r19, 0x85	; 133
     e54:	4b ea       	ldi	r20, 0xAB	; 171
     e56:	5f e3       	ldi	r21, 0x3F	; 63
     e58:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     e5c:	9b 01       	movw	r18, r22
     e5e:	ac 01       	movw	r20, r24
     e60:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     e64:	86 2e       	mov	r8, r22
     e66:	b7 2e       	mov	r11, r23
     e68:	a8 2e       	mov	r10, r24
     e6a:	99 2e       	mov	r9, r25
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e8       	ldi	r20, 0x80	; 128
     e76:	50 e4       	ldi	r21, 0x40	; 64
     e78:	0e 94 78 19 	call	0x32f0	; 0x32f0 <pow>
     e7c:	36 2e       	mov	r3, r22
     e7e:	27 2e       	mov	r2, r23
     e80:	8b a3       	lds	r24, 0x5b
     e82:	9c a3       	lds	r25, 0x5c

   u1 = (-x1 + sqrt(x1*x1 - 4*x2))/(-2);
     e84:	84 2d       	mov	r24, r4
     e86:	97 2d       	mov	r25, r7
     e88:	a6 2d       	mov	r26, r6
     e8a:	b5 2d       	mov	r27, r5
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	04 2d       	mov	r16, r4
     e92:	17 2d       	mov	r17, r7
     e94:	26 2d       	mov	r18, r6
     e96:	35 2d       	mov	r19, r5
     e98:	a9 01       	movw	r20, r18
     e9a:	98 01       	movw	r18, r16
     e9c:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     ea0:	6f 8f       	std	Y+31, r22	; 0x1f
     ea2:	78 a3       	lds	r23, 0x58
     ea4:	89 a3       	lds	r24, 0x59
     ea6:	9a a3       	lds	r25, 0x5a
   float x = wp->x;
   float y = wp->y;
   float z = wp->z;

   x1 = 2*BOOM_LEN*BOOM_LEN + 2*ARM_LEN*ARM_LEN - 2*z*z;
   x2 = pow(BOOM_LEN, 4) + pow(ARM_LEN,4) - 2*pow(BOOM_LEN*ARM_LEN, 2) - 2*pow(BOOM_LEN*z, 2) - 2*ARM_LEN*ARM_LEN*z*z + pow(z,4);
     ea8:	3a 2d       	mov	r19, r10
     eaa:	88 2d       	mov	r24, r8
     eac:	9b 2d       	mov	r25, r11
     eae:	aa 2d       	mov	r26, r10
     eb0:	b9 2d       	mov	r27, r9
     eb2:	bc 01       	movw	r22, r24
     eb4:	cd 01       	movw	r24, r26
     eb6:	08 2d       	mov	r16, r8
     eb8:	1b 2d       	mov	r17, r11
     eba:	23 2f       	mov	r18, r19
     ebc:	3b 2f       	mov	r19, r27
     ebe:	a9 01       	movw	r20, r18
     ec0:	98 01       	movw	r18, r16
     ec2:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
     ec6:	9b 01       	movw	r18, r22
     ec8:	ac 01       	movw	r20, r24
     eca:	60 e6       	ldi	r22, 0x60	; 96
     ecc:	7c e8       	ldi	r23, 0x8C	; 140
     ece:	80 e5       	ldi	r24, 0x50	; 80
     ed0:	9f e3       	ldi	r25, 0x3F	; 63
     ed2:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     ed6:	4b 01       	movw	r8, r22
     ed8:	5c 01       	movw	r10, r24
     eda:	c7 01       	movw	r24, r14
     edc:	b6 01       	movw	r22, r12
     ede:	29 e4       	ldi	r18, 0x49	; 73
     ee0:	3d e9       	ldi	r19, 0x9D	; 157
     ee2:	44 ee       	ldi	r20, 0xE4	; 228
     ee4:	5f e3       	ldi	r21, 0x3F	; 63
     ee6:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     eea:	a7 01       	movw	r20, r14
     eec:	96 01       	movw	r18, r12
     eee:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     ef2:	9b 01       	movw	r18, r22
     ef4:	ac 01       	movw	r20, r24
     ef6:	c5 01       	movw	r24, r10
     ef8:	b4 01       	movw	r22, r8
     efa:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     efe:	f1 01       	movw	r30, r2
     f00:	5b a1       	lds	r21, 0x4b
     f02:	4c a1       	lds	r20, 0x4c
     f04:	0f 2f       	mov	r16, r31
     f06:	1e 2f       	mov	r17, r30
     f08:	25 2f       	mov	r18, r21
     f0a:	34 2f       	mov	r19, r20
     f0c:	a9 01       	movw	r20, r18
     f0e:	98 01       	movw	r18, r16
     f10:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>

   u1 = (-x1 + sqrt(x1*x1 - 4*x2))/(-2);
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e8       	ldi	r20, 0x80	; 128
     f1a:	50 e4       	ldi	r21, 0x40	; 64
     f1c:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     f20:	9b 01       	movw	r18, r22
     f22:	ac 01       	movw	r20, r24
     f24:	6f 8d       	ldd	r22, Y+31	; 0x1f
     f26:	78 a1       	lds	r23, 0x48
     f28:	89 a1       	lds	r24, 0x49
     f2a:	9a a1       	lds	r25, 0x4a
     f2c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     f30:	0e 94 ce 19 	call	0x339c	; 0x339c <sqrt>
     f34:	4b 01       	movw	r8, r22
     f36:	5c 01       	movw	r10, r24
     f38:	04 2d       	mov	r16, r4
     f3a:	17 2d       	mov	r17, r7
     f3c:	26 2d       	mov	r18, r6
     f3e:	35 2d       	mov	r19, r5
     f40:	a9 01       	movw	r20, r18
     f42:	98 01       	movw	r18, r16
     f44:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e0       	ldi	r20, 0x00	; 0
     f4e:	5f eb       	ldi	r21, 0xBF	; 191
     f50:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     f54:	c6 2e       	mov	r12, r22
     f56:	f7 2e       	mov	r15, r23
     f58:	e8 2e       	mov	r14, r24
     f5a:	d9 2e       	mov	r13, r25
   u2 = (-x1 - sqrt(x1*x1 - 4*x2))/(-2);
     f5c:	6b 89       	ldd	r22, Y+19	; 0x13
     f5e:	7c 89       	ldd	r23, Y+20	; 0x14
     f60:	8d 89       	ldd	r24, Y+21	; 0x15
     f62:	9e 89       	ldd	r25, Y+22	; 0x16
     f64:	90 58       	subi	r25, 0x80	; 128
     f66:	a5 01       	movw	r20, r10
     f68:	94 01       	movw	r18, r8
     f6a:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	5f eb       	ldi	r21, 0xBF	; 191
     f76:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
     f7a:	86 2e       	mov	r8, r22
     f7c:	b7 2e       	mov	r11, r23
     f7e:	a8 2e       	mov	r10, r24
     f80:	99 2e       	mov	r9, r25
#include "kinematics.h"
#include "waypoint.h"

float max(float x, float y)
{
   return (x > y ? x : y);
     f82:	8c 2d       	mov	r24, r12
     f84:	9f 2d       	mov	r25, r15
     f86:	ae 2d       	mov	r26, r14
     f88:	bd 2d       	mov	r27, r13
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	08 2d       	mov	r16, r8
     f90:	1b 2d       	mov	r17, r11
     f92:	2a 2d       	mov	r18, r10
     f94:	39 2d       	mov	r19, r9
     f96:	a9 01       	movw	r20, r18
     f98:	98 01       	movw	r18, r16
     f9a:	0e 94 0a 19 	call	0x3214	; 0x3214 <__gesf2>
     f9e:	18 16       	cp	r1, r24
     fa0:	1c f0       	brlt	.+6      	; 0xfa8 <checkWaypoint+0x208>
     fa2:	c8 2c       	mov	r12, r8
     fa4:	75 01       	movw	r14, r10
     fa6:	d9 2c       	mov	r13, r9
   x2 = pow(BOOM_LEN, 4) + pow(ARM_LEN,4) - 2*pow(BOOM_LEN*ARM_LEN, 2) - 2*pow(BOOM_LEN*z, 2) - 2*ARM_LEN*ARM_LEN*z*z + pow(z,4);

   u1 = (-x1 + sqrt(x1*x1 - 4*x2))/(-2);
   u2 = (-x1 - sqrt(x1*x1 - 4*x2))/(-2);

   limit = sqrt(max(u1,u2));
     fa8:	8c 2d       	mov	r24, r12
     faa:	9f 2d       	mov	r25, r15
     fac:	ae 2d       	mov	r26, r14
     fae:	bd 2d       	mov	r27, r13
     fb0:	bc 01       	movw	r22, r24
     fb2:	cd 01       	movw	r24, r26
     fb4:	0e 94 ce 19 	call	0x339c	; 0x339c <sqrt>
     fb8:	6b 8b       	std	Y+19, r22	; 0x13
     fba:	7c 8b       	std	Y+20, r23	; 0x14
     fbc:	8d 8b       	std	Y+21, r24	; 0x15
     fbe:	9e 8b       	std	Y+22, r25	; 0x16
   calculateJointAngles(wp, &th1, &th2, &th3, &th4);
     fc0:	89 89       	ldd	r24, Y+17	; 0x11
     fc2:	9a 89       	ldd	r25, Y+18	; 0x12
     fc4:	be 01       	movw	r22, r28
     fc6:	63 5f       	subi	r22, 0xF3	; 243
     fc8:	7f 4f       	sbci	r23, 0xFF	; 255
     fca:	ae 01       	movw	r20, r28
     fcc:	47 5f       	subi	r20, 0xF7	; 247
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
     fd0:	9e 01       	movw	r18, r28
     fd2:	2b 5f       	subi	r18, 0xFB	; 251
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	8e 01       	movw	r16, r28
     fd8:	0f 5f       	subi	r16, 0xFF	; 255
     fda:	1f 4f       	sbci	r17, 0xFF	; 255
     fdc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <calculateJointAngles>
   d = cos(th1)*x + sin(th1)*y - SLEW_JOINT_LEN;
     fe0:	cd 84       	ldd	r12, Y+13	; 0x0d
     fe2:	de 84       	ldd	r13, Y+14	; 0x0e
     fe4:	ef 84       	ldd	r14, Y+15	; 0x0f
     fe6:	f8 88       	ldd	r15, Y+16	; 0x10
     fe8:	c7 01       	movw	r24, r14
     fea:	b6 01       	movw	r22, r12
     fec:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <cos>
     ff0:	4b 01       	movw	r8, r22
     ff2:	5c 01       	movw	r10, r24
     ff4:	c7 01       	movw	r24, r14
     ff6:	b6 01       	movw	r22, r12
     ff8:	0e 94 c4 19 	call	0x3388	; 0x3388 <sin>
     ffc:	2b 01       	movw	r4, r22
     ffe:	3c 01       	movw	r6, r24
    1000:	c5 01       	movw	r24, r10
    1002:	b4 01       	movw	r22, r8
    1004:	2f 89       	ldd	r18, Y+23	; 0x17
    1006:	38 8d       	ldd	r19, Y+24	; 0x18
    1008:	49 8d       	ldd	r20, Y+25	; 0x19
    100a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    100c:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
    1010:	4b 01       	movw	r8, r22
    1012:	5c 01       	movw	r10, r24
    1014:	c3 01       	movw	r24, r6
    1016:	b2 01       	movw	r22, r4
    1018:	2b 8d       	ldd	r18, Y+27	; 0x1b
    101a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    101c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    101e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1020:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
    1024:	9b 01       	movw	r18, r22
    1026:	ac 01       	movw	r20, r24
    1028:	c5 01       	movw	r24, r10
    102a:	b4 01       	movw	r22, r8
    102c:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
    1030:	2c ee       	ldi	r18, 0xEC	; 236
    1032:	31 e5       	ldi	r19, 0x51	; 81
    1034:	48 e3       	ldi	r20, 0x38	; 56
    1036:	5e e3       	ldi	r21, 0x3E	; 62
    1038:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
   if (!(fabs(d) < limit)) {return 0;}
    103c:	9f 77       	andi	r25, 0x7F	; 127
    103e:	2b 89       	ldd	r18, Y+19	; 0x13
    1040:	3c 89       	ldd	r19, Y+20	; 0x14
    1042:	4d 89       	ldd	r20, Y+21	; 0x15
    1044:	5e 89       	ldd	r21, Y+22	; 0x16
    1046:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__cmpsf2>
    104a:	87 ff       	sbrs	r24, 7
    104c:	62 c0       	rjmp	.+196    	; 0x1112 <__stack+0x13>

   //printf("Th1: %f, Th2: %f, Th3: %f, Th4: %f\n", th1, th2, th3, th4);
   //printf("TH1MAX: %f, TH1_MIN: %f, TH2MAX: %f, TH2_MIN: %f, TH3MAX: %f, TH3_MIN: %f, TH4MAX: %f, TH4_MIN: %f\n", TH1_MAX, TH1_MIN, TH2_MAX, TH2_MIN, TH3_MAX, TH3_MIN, TH4_MAX, TH4_MIN);

   if(th1 > TH1_MAX || th1 < TH1_MIN) {return 0;}
    104e:	c7 01       	movw	r24, r14
    1050:	b6 01       	movw	r22, r12
    1052:	28 e5       	ldi	r18, 0x58	; 88
    1054:	35 ee       	ldi	r19, 0xE5	; 229
    1056:	4a e1       	ldi	r20, 0x1A	; 26
    1058:	50 e4       	ldi	r21, 0x40	; 64
    105a:	0e 94 0a 19 	call	0x3214	; 0x3214 <__gesf2>
    105e:	18 16       	cp	r1, r24
    1060:	0c f4       	brge	.+2      	; 0x1064 <checkWaypoint+0x2c4>
    1062:	57 c0       	rjmp	.+174    	; 0x1112 <__stack+0x13>
    1064:	c7 01       	movw	r24, r14
    1066:	b6 01       	movw	r22, r12
    1068:	28 e5       	ldi	r18, 0x58	; 88
    106a:	3a e8       	ldi	r19, 0x8A	; 138
    106c:	44 e6       	ldi	r20, 0x64	; 100
    106e:	5f e3       	ldi	r21, 0x3F	; 63
    1070:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__cmpsf2>
    1074:	87 fd       	sbrc	r24, 7
    1076:	4d c0       	rjmp	.+154    	; 0x1112 <__stack+0x13>
   if(th2 > TH2_MAX || th2 < TH2_MIN) {return 0;}
    1078:	c9 84       	ldd	r12, Y+9	; 0x09
    107a:	da 84       	ldd	r13, Y+10	; 0x0a
    107c:	eb 84       	ldd	r14, Y+11	; 0x0b
    107e:	fc 84       	ldd	r15, Y+12	; 0x0c
    1080:	c7 01       	movw	r24, r14
    1082:	b6 01       	movw	r22, r12
    1084:	2f ee       	ldi	r18, 0xEF	; 239
    1086:	3d ea       	ldi	r19, 0xAD	; 173
    1088:	45 e9       	ldi	r20, 0x95	; 149
    108a:	5f e3       	ldi	r21, 0x3F	; 63
    108c:	0e 94 0a 19 	call	0x3214	; 0x3214 <__gesf2>
    1090:	18 16       	cp	r1, r24
    1092:	0c f4       	brge	.+2      	; 0x1096 <checkWaypoint+0x2f6>
    1094:	3e c0       	rjmp	.+124    	; 0x1112 <__stack+0x13>
    1096:	c7 01       	movw	r24, r14
    1098:	b6 01       	movw	r22, r12
    109a:	23 ed       	ldi	r18, 0xD3	; 211
    109c:	32 e0       	ldi	r19, 0x02	; 2
    109e:	47 eb       	ldi	r20, 0xB7	; 183
    10a0:	5c e3       	ldi	r21, 0x3C	; 60
    10a2:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__cmpsf2>
    10a6:	87 fd       	sbrc	r24, 7
    10a8:	34 c0       	rjmp	.+104    	; 0x1112 <__stack+0x13>
   if(th3 > TH3_MAX || th3 < TH3_MIN) {return 0;}
    10aa:	cd 80       	ldd	r12, Y+5	; 0x05
    10ac:	de 80       	ldd	r13, Y+6	; 0x06
    10ae:	ef 80       	ldd	r14, Y+7	; 0x07
    10b0:	f8 84       	ldd	r15, Y+8	; 0x08
    10b2:	c7 01       	movw	r24, r14
    10b4:	b6 01       	movw	r22, r12
    10b6:	26 e6       	ldi	r18, 0x66	; 102
    10b8:	35 e4       	ldi	r19, 0x45	; 69
    10ba:	43 e0       	ldi	r20, 0x03	; 3
    10bc:	5f eb       	ldi	r21, 0xBF	; 191
    10be:	0e 94 0a 19 	call	0x3214	; 0x3214 <__gesf2>
    10c2:	18 16       	cp	r1, r24
    10c4:	34 f1       	brlt	.+76     	; 0x1112 <__stack+0x13>
    10c6:	c7 01       	movw	r24, r14
    10c8:	b6 01       	movw	r22, r12
    10ca:	2a e9       	ldi	r18, 0x9A	; 154
    10cc:	35 e6       	ldi	r19, 0x65	; 101
    10ce:	41 e2       	ldi	r20, 0x21	; 33
    10d0:	50 ec       	ldi	r21, 0xC0	; 192
    10d2:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__cmpsf2>
    10d6:	87 fd       	sbrc	r24, 7
    10d8:	1c c0       	rjmp	.+56     	; 0x1112 <__stack+0x13>
   if(th4 > TH4_MAX || th4 < TH4_MIN) {return 0;}
    10da:	c9 80       	ldd	r12, Y+1	; 0x01
    10dc:	da 80       	ldd	r13, Y+2	; 0x02
    10de:	eb 80       	ldd	r14, Y+3	; 0x03
    10e0:	fc 80       	ldd	r15, Y+4	; 0x04
    10e2:	c7 01       	movw	r24, r14
    10e4:	b6 01       	movw	r22, r12
    10e6:	2e e2       	ldi	r18, 0x2E	; 46
    10e8:	3a e6       	ldi	r19, 0x6A	; 106
    10ea:	4e e6       	ldi	r20, 0x6E	; 110
    10ec:	5f e3       	ldi	r21, 0x3F	; 63
    10ee:	0e 94 0a 19 	call	0x3214	; 0x3214 <__gesf2>
    10f2:	18 16       	cp	r1, r24
    10f4:	74 f0       	brlt	.+28     	; 0x1112 <__stack+0x13>
    10f6:	c7 01       	movw	r24, r14
    10f8:	b6 01       	movw	r22, r12
    10fa:	2c ec       	ldi	r18, 0xCC	; 204
    10fc:	38 ef       	ldi	r19, 0xF8	; 248
    10fe:	42 e2       	ldi	r20, 0x22	; 34
    1100:	50 ec       	ldi	r21, 0xC0	; 192
    1102:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__cmpsf2>
    1106:	88 1f       	adc	r24, r24
    1108:	88 27       	eor	r24, r24
    110a:	88 1f       	adc	r24, r24
float max(float x, float y)
{
   return (x > y ? x : y);
}

uint8_t checkWaypoint(const Waypoint* const wp)
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	89 27       	eor	r24, r25
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <__stack+0x15>
   //printf("TH1MAX: %f, TH1_MIN: %f, TH2MAX: %f, TH2_MIN: %f, TH3MAX: %f, TH3_MIN: %f, TH4MAX: %f, TH4_MIN: %f\n", TH1_MAX, TH1_MIN, TH2_MAX, TH2_MIN, TH3_MAX, TH3_MIN, TH4_MAX, TH4_MIN);

   if(th1 > TH1_MAX || th1 < TH1_MIN) {return 0;}
   if(th2 > TH2_MAX || th2 < TH2_MIN) {return 0;}
   if(th3 > TH3_MAX || th3 < TH3_MIN) {return 0;}
   if(th4 > TH4_MAX || th4 < TH4_MIN) {return 0;}
    1112:	80 e0       	ldi	r24, 0x00	; 0

   return 1;
}
    1114:	a4 96       	adiw	r28, 0x24	; 36
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	ef 90       	pop	r14
    112c:	df 90       	pop	r13
    112e:	cf 90       	pop	r12
    1130:	bf 90       	pop	r11
    1132:	af 90       	pop	r10
    1134:	9f 90       	pop	r9
    1136:	8f 90       	pop	r8
    1138:	7f 90       	pop	r7
    113a:	6f 90       	pop	r6
    113c:	5f 90       	pop	r5
    113e:	4f 90       	pop	r4
    1140:	3f 90       	pop	r3
    1142:	2f 90       	pop	r2
    1144:	08 95       	ret

00001146 <updateWaypointArray>:


uint8_t updateWaypointArray(Waypoint* const wp_arr, Waypoint const* const wp)
{
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	cf 93       	push	r28
    1150:	df 93       	push	r29
    1152:	18 2f       	mov	r17, r24
    1154:	09 2f       	mov	r16, r25
    1156:	f6 2e       	mov	r15, r22
    1158:	e7 2e       	mov	r14, r23
   if(checkWaypoint(wp))
    115a:	86 2f       	mov	r24, r22
    115c:	97 2f       	mov	r25, r23
    115e:	0e 94 d0 06 	call	0xda0	; 0xda0 <checkWaypoint>
    1162:	88 23       	and	r24, r24
    1164:	f9 f0       	breq	.+62     	; 0x11a4 <updateWaypointArray+0x5e>
    1166:	c1 2f       	mov	r28, r17
    1168:	d0 2f       	mov	r29, r16
    116a:	00 e0       	ldi	r16, 0x00	; 0
    116c:	11 e0       	ldi	r17, 0x01	; 1
   {
      Waypoint tmp_wp;
      for (int16_t i=0; i<WAYPOINT_ARR_SIZE; i++)
      {
         tmp_wp = wp_arr[i];
         if(tmp_wp.x == -1)
    116e:	68 81       	ld	r22, Y
    1170:	79 81       	ldd	r23, Y+1	; 0x01
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e8       	ldi	r20, 0x80	; 128
    117c:	5f eb       	ldi	r21, 0xBF	; 191
    117e:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <__cmpsf2>
    1182:	88 23       	and	r24, r24
    1184:	49 f4       	brne	.+18     	; 0x1198 <updateWaypointArray+0x52>
         {
            wp_arr[i] = *wp;
    1186:	ef 2d       	mov	r30, r15
    1188:	fe 2d       	mov	r31, r14
    118a:	80 e1       	ldi	r24, 0x10	; 16
    118c:	01 90       	ld	r0, Z+
    118e:	09 92       	st	Y+, r0
    1190:	81 50       	subi	r24, 0x01	; 1
    1192:	e1 f7       	brne	.-8      	; 0x118c <updateWaypointArray+0x46>
            return 1;
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	07 c0       	rjmp	.+14     	; 0x11a6 <updateWaypointArray+0x60>
    1198:	01 50       	subi	r16, 0x01	; 1
    119a:	10 40       	sbci	r17, 0x00	; 0
    119c:	60 96       	adiw	r28, 0x10	; 16
uint8_t updateWaypointArray(Waypoint* const wp_arr, Waypoint const* const wp)
{
   if(checkWaypoint(wp))
   {
      Waypoint tmp_wp;
      for (int16_t i=0; i<WAYPOINT_ARR_SIZE; i++)
    119e:	01 15       	cp	r16, r1
    11a0:	11 05       	cpc	r17, r1
    11a2:	29 f7       	brne	.-54     	; 0x116e <updateWaypointArray+0x28>
            return 1;
         }
      }
   }

   return 0;
    11a4:	80 e0       	ldi	r24, 0x00	; 0
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	08 95       	ret

000011b4 <parseCoordinate>:

Waypoint parseCoordinate(char* coordinateStr)
{
    11b4:	2f 92       	push	r2
    11b6:	3f 92       	push	r3
    11b8:	4f 92       	push	r4
    11ba:	5f 92       	push	r5
    11bc:	6f 92       	push	r6
    11be:	7f 92       	push	r7
    11c0:	8f 92       	push	r8
    11c2:	9f 92       	push	r9
    11c4:	af 92       	push	r10
    11c6:	bf 92       	push	r11
    11c8:	cf 92       	push	r12
    11ca:	df 92       	push	r13
    11cc:	ef 92       	push	r14
    11ce:	ff 92       	push	r15
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    11dc:	68 97       	sbiw	r28, 0x18	; 24
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	9c 8b       	std	Y+20, r25	; 0x14
    11ea:	8b 8b       	std	Y+19, r24	; 0x13
    11ec:	3b 01       	movw	r6, r22

    // Messages: EII = Error In Input
    char error_message[3];

	Waypoint newWaypoint;
    uint32_t str_length = strlen(coordinateStr);
    11ee:	fb 01       	movw	r30, r22
    11f0:	01 90       	ld	r0, Z+
    11f2:	00 20       	and	r0, r0
    11f4:	e9 f7       	brne	.-6      	; 0x11f0 <parseCoordinate+0x3c>
    11f6:	31 97       	sbiw	r30, 0x01	; 1
    11f8:	e6 1b       	sub	r30, r22
    11fa:	f7 0b       	sbc	r31, r23
    11fc:	9f 01       	movw	r18, r30
    11fe:	40 e0       	ldi	r20, 0x00	; 0
    1200:	50 e0       	ldi	r21, 0x00	; 0
    1202:	2d 8b       	std	Y+21, r18	; 0x15
    1204:	3e 8b       	std	Y+22, r19	; 0x16
    1206:	4f 8b       	std	Y+23, r20	; 0x17
    1208:	58 8f       	std	Y+24, r21	; 0x18
    uint32_t i = 0;
    uint8_t state = 0;

    float x = 1;
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	a0 e8       	ldi	r26, 0x80	; 128
    1210:	bf e3       	ldi	r27, 0x3F	; 63
    1212:	8d 87       	std	Y+13, r24	; 0x0d
    1214:	9e 87       	std	Y+14, r25	; 0x0e
    1216:	af 87       	std	Y+15, r26	; 0x0f
    1218:	b8 8b       	std	Y+16, r27	; 0x10
    float y = 1;
    121a:	89 87       	std	Y+9, r24	; 0x09
    121c:	9a 87       	std	Y+10, r25	; 0x0a
    121e:	ab 87       	std	Y+11, r26	; 0x0b
    1220:	bc 87       	std	Y+12, r27	; 0x0c
    float z = 1;
    1222:	8d 83       	std	Y+5, r24	; 0x05
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	af 83       	std	Y+7, r26	; 0x07
    1228:	b8 87       	std	Y+8, r27	; 0x08
    float a = 1;
    122a:	89 83       	std	Y+1, r24	; 0x01
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	ab 83       	std	Y+3, r26	; 0x03
    1230:	bc 83       	std	Y+4, r27	; 0x04
    char error_message[3];

	Waypoint newWaypoint;
    uint32_t str_length = strlen(coordinateStr);
    uint32_t i = 0;
    uint8_t state = 0;
    1232:	80 e0       	ldi	r24, 0x00	; 0
    // Messages: EII = Error In Input
    char error_message[3];

	Waypoint newWaypoint;
    uint32_t str_length = strlen(coordinateStr);
    uint32_t i = 0;
    1234:	cc 24       	eor	r12, r12
    1236:	dd 24       	eor	r13, r13
    1238:	76 01       	movw	r14, r12

    float* var;

    // Ignore characters after x.xx until , or >

    while (i < str_length)
    123a:	40 c1       	rjmp	.+640    	; 0x14bc <parseCoordinate+0x308>
    {
        switch (state)
    123c:	82 30       	cpi	r24, 0x02	; 2
    123e:	c9 f1       	breq	.+114    	; 0x12b2 <parseCoordinate+0xfe>
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	30 f4       	brcc	.+12     	; 0x1250 <parseCoordinate+0x9c>
    1244:	88 23       	and	r24, r24
    1246:	51 f0       	breq	.+20     	; 0x125c <parseCoordinate+0xa8>
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	09 f0       	breq	.+2      	; 0x124e <parseCoordinate+0x9a>
    124c:	32 c1       	rjmp	.+612    	; 0x14b2 <parseCoordinate+0x2fe>
    124e:	0e c0       	rjmp	.+28     	; 0x126c <parseCoordinate+0xb8>
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	c1 f1       	breq	.+112    	; 0x12c4 <parseCoordinate+0x110>
    1254:	84 30       	cpi	r24, 0x04	; 4
    1256:	09 f0       	breq	.+2      	; 0x125a <parseCoordinate+0xa6>
    1258:	2c c1       	rjmp	.+600    	; 0x14b2 <parseCoordinate+0x2fe>
    125a:	19 c1       	rjmp	.+562    	; 0x148e <parseCoordinate+0x2da>
        {
            case -1:
                break;
            case 0:
                if (coordinateStr[i] == '<')
    125c:	f3 01       	movw	r30, r6
    125e:	ec 0d       	add	r30, r12
    1260:	fd 1d       	adc	r31, r13
    1262:	90 81       	ld	r25, Z
    1264:	9c 33       	cpi	r25, 0x3C	; 60
    1266:	09 f0       	breq	.+2      	; 0x126a <parseCoordinate+0xb6>
    1268:	24 c1       	rjmp	.+584    	; 0x14b2 <parseCoordinate+0x2fe>
    126a:	17 c1       	rjmp	.+558    	; 0x149a <parseCoordinate+0x2e6>
                    state = 1;
                break;
            case 1:
                switch (coordinateStr[i])
    126c:	f3 01       	movw	r30, r6
    126e:	ec 0d       	add	r30, r12
    1270:	fd 1d       	adc	r31, r13
    1272:	80 81       	ld	r24, Z
    1274:	88 37       	cpi	r24, 0x78	; 120
    1276:	69 f0       	breq	.+26     	; 0x1292 <parseCoordinate+0xde>
    1278:	89 37       	cpi	r24, 0x79	; 121
    127a:	20 f4       	brcc	.+8      	; 0x1284 <parseCoordinate+0xd0>
    127c:	81 36       	cpi	r24, 0x61	; 97
    127e:	09 f0       	breq	.+2      	; 0x1282 <parseCoordinate+0xce>
    1280:	17 c1       	rjmp	.+558    	; 0x14b0 <parseCoordinate+0x2fc>
    1282:	12 c0       	rjmp	.+36     	; 0x12a8 <parseCoordinate+0xf4>
    1284:	89 37       	cpi	r24, 0x79	; 121
    1286:	09 f4       	brne	.+2      	; 0x128a <parseCoordinate+0xd6>
    1288:	0a c1       	rjmp	.+532    	; 0x149e <parseCoordinate+0x2ea>
    128a:	8a 37       	cpi	r24, 0x7A	; 122
    128c:	09 f0       	breq	.+2      	; 0x1290 <parseCoordinate+0xdc>
    128e:	10 c1       	rjmp	.+544    	; 0x14b0 <parseCoordinate+0x2fc>
    1290:	06 c0       	rjmp	.+12     	; 0x129e <parseCoordinate+0xea>
                {
                    case ('x'):
                        var = &x;
    1292:	ae 01       	movw	r20, r28
    1294:	43 5f       	subi	r20, 0xF3	; 243
    1296:	5f 4f       	sbci	r21, 0xFF	; 255
    1298:	5a 8b       	std	Y+18, r21	; 0x12
    129a:	49 8b       	std	Y+17, r20	; 0x11
    129c:	05 c1       	rjmp	.+522    	; 0x14a8 <parseCoordinate+0x2f4>
                    case ('y'):
                        var = &y;
                        state = 2;
                        break;
                    case ('z'):
                        var = &z;
    129e:	ce 01       	movw	r24, r28
    12a0:	05 96       	adiw	r24, 0x05	; 5
    12a2:	9a 8b       	std	Y+18, r25	; 0x12
    12a4:	89 8b       	std	Y+17, r24	; 0x11
    12a6:	00 c1       	rjmp	.+512    	; 0x14a8 <parseCoordinate+0x2f4>
                        state = 2;
                        break;
                    case ('a'):
                        var = &a;
    12a8:	de 01       	movw	r26, r28
    12aa:	11 96       	adiw	r26, 0x01	; 1
    12ac:	ba 8b       	std	Y+18, r27	; 0x12
    12ae:	a9 8b       	std	Y+17, r26	; 0x11
    12b0:	fb c0       	rjmp	.+502    	; 0x14a8 <parseCoordinate+0x2f4>
                        break;
                }
                break;
                // x,y,z or a seen last, : expected.
            case 2:
                if (coordinateStr[i] == ':')
    12b2:	f3 01       	movw	r30, r6
    12b4:	ec 0d       	add	r30, r12
    12b6:	fd 1d       	adc	r31, r13
    12b8:	80 81       	ld	r24, Z
    12ba:	8a 33       	cpi	r24, 0x3A	; 58
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <parseCoordinate+0x10c>
    12be:	f8 c0       	rjmp	.+496    	; 0x14b0 <parseCoordinate+0x2fc>
                    state = 3;
    12c0:	83 e0       	ldi	r24, 0x03	; 3
    12c2:	f7 c0       	rjmp	.+494    	; 0x14b2 <parseCoordinate+0x2fe>
                else
                    state = -1;
                break;
                // : seen last, number from 0-9 expected.
            case 3:
                if (coordinateStr[i] - '0' > 9 || coordinateStr[i] - '0' < 0)
    12c4:	f3 01       	movw	r30, r6
    12c6:	ec 0d       	add	r30, r12
    12c8:	fd 1d       	adc	r31, r13
    12ca:	60 81       	ld	r22, Z
    12cc:	86 2f       	mov	r24, r22
    12ce:	80 53       	subi	r24, 0x30	; 48
    12d0:	8a 30       	cpi	r24, 0x0A	; 10
    12d2:	08 f0       	brcs	.+2      	; 0x12d6 <parseCoordinate+0x122>
    12d4:	ed c0       	rjmp	.+474    	; 0x14b0 <parseCoordinate+0x2fc>
                {
                    state = -1;
                    break;
                }

                *var = (float)(coordinateStr[i++] - '0'); // What if coordinateStr[i] = 0?
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 53       	subi	r22, 0x30	; 48
    12da:	70 40       	sbci	r23, 0x00	; 0
    12dc:	88 27       	eor	r24, r24
    12de:	77 fd       	sbrc	r23, 7
    12e0:	80 95       	com	r24
    12e2:	98 2f       	mov	r25, r24
    12e4:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__floatsisf>
    12e8:	1e c0       	rjmp	.+60     	; 0x1326 <parseCoordinate+0x172>
                while (coordinateStr[i] - '0' < 10 && coordinateStr[i] - '0' >= 0)
                {
                    *var *= 10; // Shift to left
    12ea:	a9 89       	ldd	r26, Y+17	; 0x11
    12ec:	ba 89       	ldd	r27, Y+18	; 0x12
    12ee:	6d 91       	ld	r22, X+
    12f0:	7d 91       	ld	r23, X+
    12f2:	8d 91       	ld	r24, X+
    12f4:	9c 91       	ld	r25, X
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e2       	ldi	r20, 0x20	; 32
    12fc:	51 e4       	ldi	r21, 0x41	; 65
    12fe:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
    1302:	4b 01       	movw	r8, r22
    1304:	5c 01       	movw	r10, r24
                    *var += coordinateStr[i++] - '0';
    1306:	61 2f       	mov	r22, r17
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	60 53       	subi	r22, 0x30	; 48
    130c:	70 40       	sbci	r23, 0x00	; 0
    130e:	88 27       	eor	r24, r24
    1310:	77 fd       	sbrc	r23, 7
    1312:	80 95       	com	r24
    1314:	98 2f       	mov	r25, r24
    1316:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__floatsisf>
    131a:	9b 01       	movw	r18, r22
    131c:	ac 01       	movw	r20, r24
    131e:	c5 01       	movw	r24, r10
    1320:	b4 01       	movw	r22, r8
    1322:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	e9 89       	ldd	r30, Y+17	; 0x11
    132c:	fa 89       	ldd	r31, Y+18	; 0x12
    132e:	80 83       	st	Z, r24
    1330:	91 83       	std	Z+1, r25	; 0x01
    1332:	a2 83       	std	Z+2, r26	; 0x02
    1334:	b3 83       	std	Z+3, r27	; 0x03
    1336:	08 94       	sec
    1338:	c1 1c       	adc	r12, r1
    133a:	d1 1c       	adc	r13, r1
    133c:	e1 1c       	adc	r14, r1
    133e:	f1 1c       	adc	r15, r1
   }

   return 0;
}

Waypoint parseCoordinate(char* coordinateStr)
    1340:	f3 01       	movw	r30, r6
    1342:	ec 0d       	add	r30, r12
    1344:	fd 1d       	adc	r31, r13
                    state = -1;
                    break;
                }

                *var = (float)(coordinateStr[i++] - '0'); // What if coordinateStr[i] = 0?
                while (coordinateStr[i] - '0' < 10 && coordinateStr[i] - '0' >= 0)
    1346:	10 81       	ld	r17, Z
    1348:	81 2f       	mov	r24, r17
    134a:	80 53       	subi	r24, 0x30	; 48
    134c:	8a 30       	cpi	r24, 0x0A	; 10
    134e:	68 f2       	brcs	.-102    	; 0x12ea <parseCoordinate+0x136>
    1350:	16 01       	movw	r2, r12
    1352:	27 01       	movw	r4, r14
                {
                    *var *= 10; // Shift to left
                    *var += coordinateStr[i++] - '0';
                }

                if (coordinateStr[i] == '.')
    1354:	1e 32       	cpi	r17, 0x2E	; 46
    1356:	09 f0       	breq	.+2      	; 0x135a <parseCoordinate+0x1a6>
    1358:	a9 c0       	rjmp	.+338    	; 0x14ac <parseCoordinate+0x2f8>
                {
                    i++;
    135a:	08 94       	sec
    135c:	c1 1c       	adc	r12, r1
    135e:	d1 1c       	adc	r13, r1
    1360:	e1 1c       	adc	r14, r1
    1362:	f1 1c       	adc	r15, r1
                    if (coordinateStr[i] - '0' > 9 || coordinateStr[i] - '0' < 0)
    1364:	f3 01       	movw	r30, r6
    1366:	ec 0d       	add	r30, r12
    1368:	fd 1d       	adc	r31, r13
    136a:	60 81       	ld	r22, Z
    136c:	86 2f       	mov	r24, r22
    136e:	80 53       	subi	r24, 0x30	; 48
    1370:	8a 30       	cpi	r24, 0x0A	; 10
    1372:	08 f0       	brcs	.+2      	; 0x1376 <parseCoordinate+0x1c2>
    1374:	9d c0       	rjmp	.+314    	; 0x14b0 <parseCoordinate+0x2fc>
                    {
                        state = -1;
                        break;
                    }

                    float decimal = (float)(coordinateStr[i++]-'0')/10.0; // Shift to right
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	60 53       	subi	r22, 0x30	; 48
    137a:	70 40       	sbci	r23, 0x00	; 0
    137c:	88 27       	eor	r24, r24
    137e:	77 fd       	sbrc	r23, 7
    1380:	80 95       	com	r24
    1382:	98 2f       	mov	r25, r24
    1384:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__floatsisf>
    1388:	20 e0       	ldi	r18, 0x00	; 0
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	40 e2       	ldi	r20, 0x20	; 32
    138e:	51 e4       	ldi	r21, 0x41	; 65
    1390:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__divsf3>
    1394:	16 2f       	mov	r17, r22
    1396:	07 2f       	mov	r16, r23
    1398:	b8 2e       	mov	r11, r24
    139a:	a9 2e       	mov	r10, r25
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	c8 2e       	mov	r12, r24
    13a0:	d1 2c       	mov	r13, r1
    13a2:	e1 2c       	mov	r14, r1
    13a4:	f1 2c       	mov	r15, r1
    13a6:	c2 0c       	add	r12, r2
    13a8:	d3 1c       	adc	r13, r3
    13aa:	e4 1c       	adc	r14, r4
    13ac:	f5 1c       	adc	r15, r5
                    float temp;
                    int decimal_places = 1;
    13ae:	91 e0       	ldi	r25, 0x01	; 1
    13b0:	29 2e       	mov	r2, r25
    13b2:	31 2c       	mov	r3, r1
                    while (coordinateStr[i] - '0' < 10 && coordinateStr[i] - '0' >= 0)
    13b4:	45 c0       	rjmp	.+138    	; 0x1440 <parseCoordinate+0x28c>
                    {
                        temp = (float)(coordinateStr[i++]-'0');
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	60 53       	subi	r22, 0x30	; 48
    13ba:	70 40       	sbci	r23, 0x00	; 0
    13bc:	88 27       	eor	r24, r24
    13be:	77 fd       	sbrc	r23, 7
    13c0:	80 95       	com	r24
    13c2:	98 2f       	mov	r25, r24
    13c4:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__floatsisf>
    13c8:	f6 2f       	mov	r31, r22
    13ca:	e7 2f       	mov	r30, r23
    13cc:	38 2f       	mov	r19, r24
    13ce:	29 2f       	mov	r18, r25
    13d0:	08 94       	sec
    13d2:	c1 1c       	adc	r12, r1
    13d4:	d1 1c       	adc	r13, r1
    13d6:	e1 1c       	adc	r14, r1
    13d8:	f1 1c       	adc	r15, r1
                        decimal_places++;
    13da:	08 94       	sec
    13dc:	21 1c       	adc	r2, r1
    13de:	31 1c       	adc	r3, r1
                        int a = 0;
    13e0:	88 24       	eor	r8, r8
    13e2:	99 24       	eor	r9, r9
                        while (a < decimal_places)
                        { temp = temp/10.0; a++; } // Shift to right {decimal_places} times
    13e4:	bf 01       	movw	r22, r30
    13e6:	a9 01       	movw	r20, r18
    13e8:	87 2f       	mov	r24, r23
    13ea:	9e 2f       	mov	r25, r30
    13ec:	a5 2f       	mov	r26, r21
    13ee:	b2 2f       	mov	r27, r18
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	40 e2       	ldi	r20, 0x20	; 32
    13fa:	51 e4       	ldi	r21, 0x41	; 65
    13fc:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__divsf3>
    1400:	f6 2f       	mov	r31, r22
    1402:	e7 2f       	mov	r30, r23
    1404:	38 2f       	mov	r19, r24
    1406:	29 2f       	mov	r18, r25
    1408:	08 94       	sec
    140a:	81 1c       	adc	r8, r1
    140c:	91 1c       	adc	r9, r1
                    while (coordinateStr[i] - '0' < 10 && coordinateStr[i] - '0' >= 0)
                    {
                        temp = (float)(coordinateStr[i++]-'0');
                        decimal_places++;
                        int a = 0;
                        while (a < decimal_places)
    140e:	82 14       	cp	r8, r2
    1410:	93 04       	cpc	r9, r3
    1412:	44 f3       	brlt	.-48     	; 0x13e4 <parseCoordinate+0x230>
                        { temp = temp/10.0; a++; } // Shift to right {decimal_places} times
                        decimal += temp;
    1414:	d8 01       	movw	r26, r16
    1416:	c5 01       	movw	r24, r10
    1418:	4b 2f       	mov	r20, r27
    141a:	50 2f       	mov	r21, r16
    141c:	69 2f       	mov	r22, r25
    141e:	7a 2d       	mov	r23, r10
    1420:	cb 01       	movw	r24, r22
    1422:	ba 01       	movw	r22, r20
    1424:	4f 2f       	mov	r20, r31
    1426:	5e 2f       	mov	r21, r30
    1428:	a3 2f       	mov	r26, r19
    142a:	b2 2f       	mov	r27, r18
    142c:	8a 01       	movw	r16, r20
    142e:	9d 01       	movw	r18, r26
    1430:	a9 01       	movw	r20, r18
    1432:	98 01       	movw	r18, r16
    1434:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
    1438:	16 2f       	mov	r17, r22
    143a:	07 2f       	mov	r16, r23
    143c:	b8 2e       	mov	r11, r24
    143e:	a9 2e       	mov	r10, r25
   }

   return 0;
}

Waypoint parseCoordinate(char* coordinateStr)
    1440:	f3 01       	movw	r30, r6
    1442:	ec 0d       	add	r30, r12
    1444:	fd 1d       	adc	r31, r13
                    }

                    float decimal = (float)(coordinateStr[i++]-'0')/10.0; // Shift to right
                    float temp;
                    int decimal_places = 1;
                    while (coordinateStr[i] - '0' < 10 && coordinateStr[i] - '0' >= 0)
    1446:	60 81       	ld	r22, Z
    1448:	86 2f       	mov	r24, r22
    144a:	80 53       	subi	r24, 0x30	; 48
    144c:	8a 30       	cpi	r24, 0x0A	; 10
    144e:	08 f4       	brcc	.+2      	; 0x1452 <parseCoordinate+0x29e>
    1450:	b2 cf       	rjmp	.-156    	; 0x13b6 <parseCoordinate+0x202>
                        int a = 0;
                        while (a < decimal_places)
                        { temp = temp/10.0; a++; } // Shift to right {decimal_places} times
                        decimal += temp;
                    }
                    i--;
    1452:	08 94       	sec
    1454:	c1 08       	sbc	r12, r1
    1456:	d1 08       	sbc	r13, r1
    1458:	e1 08       	sbc	r14, r1
    145a:	f1 08       	sbc	r15, r1
                    *var += decimal;
    145c:	a9 89       	ldd	r26, Y+17	; 0x11
    145e:	ba 89       	ldd	r27, Y+18	; 0x12
    1460:	6d 91       	ld	r22, X+
    1462:	7d 91       	ld	r23, X+
    1464:	8d 91       	ld	r24, X+
    1466:	9c 91       	ld	r25, X
    1468:	f8 01       	movw	r30, r16
    146a:	a5 01       	movw	r20, r10
    146c:	0f 2f       	mov	r16, r31
    146e:	1e 2f       	mov	r17, r30
    1470:	25 2f       	mov	r18, r21
    1472:	3a 2d       	mov	r19, r10
    1474:	a9 01       	movw	r20, r18
    1476:	98 01       	movw	r18, r16
    1478:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
    147c:	dc 01       	movw	r26, r24
    147e:	cb 01       	movw	r24, r22
    1480:	e9 89       	ldd	r30, Y+17	; 0x11
    1482:	fa 89       	ldd	r31, Y+18	; 0x12
    1484:	80 83       	st	Z, r24
    1486:	91 83       	std	Z+1, r25	; 0x01
    1488:	a2 83       	std	Z+2, r26	; 0x02
    148a:	b3 83       	std	Z+3, r27	; 0x03
    148c:	0f c0       	rjmp	.+30     	; 0x14ac <parseCoordinate+0x2f8>

                state = 4;
                break;
            // Finished parsing number , or > expected
            case 4:
                if (coordinateStr[i]==',')
    148e:	f3 01       	movw	r30, r6
    1490:	ec 0d       	add	r30, r12
    1492:	fd 1d       	adc	r31, r13
    1494:	80 81       	ld	r24, Z
    1496:	8c 32       	cpi	r24, 0x2C	; 44
    1498:	59 f4       	brne	.+22     	; 0x14b0 <parseCoordinate+0x2fc>
        {
            case -1:
                break;
            case 0:
                if (coordinateStr[i] == '<')
                    state = 1;
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	0a c0       	rjmp	.+20     	; 0x14b2 <parseCoordinate+0x2fe>
                    case ('x'):
                        var = &x;
                        state = 2;
                        break;
                    case ('y'):
                        var = &y;
    149e:	9e 01       	movw	r18, r28
    14a0:	27 5f       	subi	r18, 0xF7	; 247
    14a2:	3f 4f       	sbci	r19, 0xFF	; 255
    14a4:	3a 8b       	std	Y+18, r19	; 0x12
    14a6:	29 8b       	std	Y+17, r18	; 0x11
                        state = 2;
    14a8:	82 e0       	ldi	r24, 0x02	; 2
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <parseCoordinate+0x2fe>
                    }
                    i--;
                    *var += decimal;
                }

                state = 4;
    14ac:	84 e0       	ldi	r24, 0x04	; 4
    14ae:	01 c0       	rjmp	.+2      	; 0x14b2 <parseCoordinate+0x2fe>
                if (coordinateStr[i]==',')
                {
                    state = 1;
                }
                else
                    state = -1;
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
                break;

        }

        i++;
    14b2:	08 94       	sec
    14b4:	c1 1c       	adc	r12, r1
    14b6:	d1 1c       	adc	r13, r1
    14b8:	e1 1c       	adc	r14, r1
    14ba:	f1 1c       	adc	r15, r1

    float* var;

    // Ignore characters after x.xx until , or >

    while (i < str_length)
    14bc:	2d 89       	ldd	r18, Y+21	; 0x15
    14be:	3e 89       	ldd	r19, Y+22	; 0x16
    14c0:	4f 89       	ldd	r20, Y+23	; 0x17
    14c2:	58 8d       	ldd	r21, Y+24	; 0x18
    14c4:	c2 16       	cp	r12, r18
    14c6:	d3 06       	cpc	r13, r19
    14c8:	e4 06       	cpc	r14, r20
    14ca:	f5 06       	cpc	r15, r21
    14cc:	08 f4       	brcc	.+2      	; 0x14d0 <parseCoordinate+0x31c>
    14ce:	b6 ce       	rjmp	.-660    	; 0x123c <parseCoordinate+0x88>

        i++;
    }

	newWaypoint.x = x;
	newWaypoint.y = y;
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	ab 85       	ldd	r26, Y+11	; 0x0b
    14d6:	bc 85       	ldd	r27, Y+12	; 0x0c
	newWaypoint.z = z;
    14d8:	0d 81       	ldd	r16, Y+5	; 0x05
    14da:	1e 81       	ldd	r17, Y+6	; 0x06
    14dc:	2f 81       	ldd	r18, Y+7	; 0x07
    14de:	38 85       	ldd	r19, Y+8	; 0x08
	newWaypoint.thdg = a;
    14e0:	c9 80       	ldd	r12, Y+1	; 0x01
    14e2:	da 80       	ldd	r13, Y+2	; 0x02
    14e4:	eb 80       	ldd	r14, Y+3	; 0x03
    14e6:	fc 80       	ldd	r15, Y+4	; 0x04

    return newWaypoint;
    14e8:	4d 85       	ldd	r20, Y+13	; 0x0d
    14ea:	5e 85       	ldd	r21, Y+14	; 0x0e
    14ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    14ee:	78 89       	ldd	r23, Y+16	; 0x10
    14f0:	eb 89       	ldd	r30, Y+19	; 0x13
    14f2:	fc 89       	ldd	r31, Y+20	; 0x14
    14f4:	40 83       	st	Z, r20
    14f6:	51 83       	std	Z+1, r21	; 0x01
    14f8:	62 83       	std	Z+2, r22	; 0x02
    14fa:	73 83       	std	Z+3, r23	; 0x03
    14fc:	84 83       	std	Z+4, r24	; 0x04
    14fe:	95 83       	std	Z+5, r25	; 0x05
    1500:	a6 83       	std	Z+6, r26	; 0x06
    1502:	b7 83       	std	Z+7, r27	; 0x07
    1504:	00 87       	std	Z+8, r16	; 0x08
    1506:	11 87       	std	Z+9, r17	; 0x09
    1508:	22 87       	std	Z+10, r18	; 0x0a
    150a:	33 87       	std	Z+11, r19	; 0x0b
    150c:	c4 86       	std	Z+12, r12	; 0x0c
    150e:	d5 86       	std	Z+13, r13	; 0x0d
    1510:	e6 86       	std	Z+14, r14	; 0x0e
    1512:	f7 86       	std	Z+15, r15	; 0x0f
}
    1514:	cf 01       	movw	r24, r30
    1516:	68 96       	adiw	r28, 0x18	; 24
    1518:	0f b6       	in	r0, 0x3f	; 63
    151a:	f8 94       	cli
    151c:	de bf       	out	0x3e, r29	; 62
    151e:	0f be       	out	0x3f, r0	; 63
    1520:	cd bf       	out	0x3d, r28	; 61
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	df 90       	pop	r13
    1530:	cf 90       	pop	r12
    1532:	bf 90       	pop	r11
    1534:	af 90       	pop	r10
    1536:	9f 90       	pop	r9
    1538:	8f 90       	pop	r8
    153a:	7f 90       	pop	r7
    153c:	6f 90       	pop	r6
    153e:	5f 90       	pop	r5
    1540:	4f 90       	pop	r4
    1542:	3f 90       	pop	r3
    1544:	2f 90       	pop	r2
    1546:	08 95       	ret

00001548 <__vector_21>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    1548:	1f 92       	push	r1
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	0f 92       	push	r0
    1550:	0b b6       	in	r0, 0x3b	; 59
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	2f 93       	push	r18
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	ef 93       	push	r30
    155e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    1560:	90 91 c0 00 	lds	r25, 0x00C0
    data = UART0_DATA;
    1564:	80 91 c6 00 	lds	r24, 0x00C6
#elif defined( AT90USB_USART )
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    1568:	e0 91 d5 01 	lds	r30, 0x01D5
    156c:	ef 5f       	subi	r30, 0xFF	; 255
    156e:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART_RxTail ) {
    1570:	20 91 d4 01 	lds	r18, 0x01D4
    1574:	e2 17       	cp	r30, r18
    1576:	41 f0       	breq	.+16     	; 0x1588 <__vector_21+0x40>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    1578:	98 71       	andi	r25, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    157a:	e0 93 d5 01 	sts	0x01D5, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	e8 52       	subi	r30, 0x28	; 40
    1582:	fe 4f       	sbci	r31, 0xFE	; 254
    1584:	80 83       	st	Z, r24
    1586:	01 c0       	rjmp	.+2      	; 0x158a <__vector_21+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1588:	92 e0       	ldi	r25, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
    158a:	80 91 d3 01 	lds	r24, 0x01D3
    158e:	89 2b       	or	r24, r25
    1590:	80 93 d3 01 	sts	0x01D3, r24
}
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	9f 91       	pop	r25
    159a:	8f 91       	pop	r24
    159c:	2f 91       	pop	r18
    159e:	0f 90       	pop	r0
    15a0:	0b be       	out	0x3b, r0	; 59
    15a2:	0f 90       	pop	r0
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	0f 90       	pop	r0
    15a8:	1f 90       	pop	r1
    15aa:	18 95       	reti

000015ac <__vector_22>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    15ac:	1f 92       	push	r1
    15ae:	0f 92       	push	r0
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	0f 92       	push	r0
    15b4:	0b b6       	in	r0, 0x3b	; 59
    15b6:	0f 92       	push	r0
    15b8:	11 24       	eor	r1, r1
    15ba:	8f 93       	push	r24
    15bc:	9f 93       	push	r25
    15be:	ef 93       	push	r30
    15c0:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    15c2:	90 91 d7 01 	lds	r25, 0x01D7
    15c6:	80 91 d6 01 	lds	r24, 0x01D6
    15ca:	98 17       	cp	r25, r24
    15cc:	69 f0       	breq	.+26     	; 0x15e8 <__vector_22+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    15ce:	e0 91 d6 01 	lds	r30, 0x01D6
    15d2:	ef 5f       	subi	r30, 0xFF	; 255
    15d4:	ef 73       	andi	r30, 0x3F	; 63
        UART_TxTail = tmptail;
    15d6:	e0 93 d6 01 	sts	0x01D6, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	e8 5e       	subi	r30, 0xE8	; 232
    15de:	fd 4f       	sbci	r31, 0xFD	; 253
    15e0:	80 81       	ld	r24, Z
    15e2:	80 93 c6 00 	sts	0x00C6, r24
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__vector_22+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    15e8:	80 91 c1 00 	lds	r24, 0x00C1
    15ec:	8f 7d       	andi	r24, 0xDF	; 223
    15ee:	80 93 c1 00 	sts	0x00C1, r24
    }
}
    15f2:	ff 91       	pop	r31
    15f4:	ef 91       	pop	r30
    15f6:	9f 91       	pop	r25
    15f8:	8f 91       	pop	r24
    15fa:	0f 90       	pop	r0
    15fc:	0b be       	out	0x3b, r0	; 59
    15fe:	0f 90       	pop	r0
    1600:	0f be       	out	0x3f, r0	; 63
    1602:	0f 90       	pop	r0
    1604:	1f 90       	pop	r1
    1606:	18 95       	reti

00001608 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
    1608:	10 92 d7 01 	sts	0x01D7, r1
    UART_TxTail = 0;
    160c:	10 92 d6 01 	sts	0x01D6, r1
    UART_RxHead = 0;
    1610:	10 92 d5 01 	sts	0x01D5, r1
    UART_RxTail = 0;
    1614:	10 92 d4 01 	sts	0x01D4, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    1618:	97 ff       	sbrs	r25, 7
    161a:	04 c0       	rjmp	.+8      	; 0x1624 <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    161c:	22 e0       	ldi	r18, 0x02	; 2
    161e:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
    1622:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    1624:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
    1628:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    162c:	88 e9       	ldi	r24, 0x98	; 152
    162e:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    1632:	86 e0       	ldi	r24, 0x06	; 6
    1634:	80 93 c2 00 	sts	0x00C2, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    UCSR1C = (1<<UCSZ11)|(1<<UCSZ10);
#endif

}/* uart_init */
    1638:	08 95       	ret

0000163a <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    163a:	90 91 d5 01 	lds	r25, 0x01D5
    163e:	80 91 d4 01 	lds	r24, 0x01D4
    1642:	98 17       	cp	r25, r24
    1644:	81 f0       	breq	.+32     	; 0x1666 <uart_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1646:	e0 91 d4 01 	lds	r30, 0x01D4
    164a:	ef 5f       	subi	r30, 0xFF	; 255
    164c:	ef 73       	andi	r30, 0x3F	; 63
    UART_RxTail = tmptail; 
    164e:	e0 93 d4 01 	sts	0x01D4, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	e8 52       	subi	r30, 0x28	; 40
    1656:	fe 4f       	sbci	r31, 0xFE	; 254
    1658:	80 81       	ld	r24, Z
    
    data = (UART_LastRxError << 8) + data;
    165a:	90 91 d3 01 	lds	r25, 0x01D3
    UART_LastRxError = 0;
    165e:	10 92 d3 01 	sts	0x01D3, r1
    return data;
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART_LastRxError << 8) + data;
    UART_LastRxError = 0;
    return data;

}/* uart_getc */
    166a:	08 95       	ret

0000166c <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    166c:	90 91 d7 01 	lds	r25, 0x01D7
    1670:	9f 5f       	subi	r25, 0xFF	; 255
    1672:	9f 73       	andi	r25, 0x3F	; 63
    
    while ( tmphead == UART_TxTail ){
    1674:	20 91 d6 01 	lds	r18, 0x01D6
    1678:	92 17       	cp	r25, r18
    167a:	e1 f3       	breq	.-8      	; 0x1674 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    167c:	e9 2f       	mov	r30, r25
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	e8 5e       	subi	r30, 0xE8	; 232
    1682:	fd 4f       	sbci	r31, 0xFD	; 253
    1684:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    1686:	90 93 d7 01 	sts	0x01D7, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    168a:	80 91 c1 00 	lds	r24, 0x00C1
    168e:	80 62       	ori	r24, 0x20	; 32
    1690:	80 93 c1 00 	sts	0x00C1, r24

}/* uart_putc */
    1694:	08 95       	ret

00001696 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	ec 01       	movw	r28, r24
    while (*s) 
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <uart_puts+0xc>
      uart_putc(*s++);
    169e:	0e 94 36 0b 	call	0x166c	; 0x166c <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    16a2:	89 91       	ld	r24, Y+
    16a4:	88 23       	and	r24, r24
    16a6:	d9 f7       	brne	.-10     	; 0x169e <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <uart_puts_p+0xc>
      uart_putc(c);
    16b6:	0e 94 36 0b 	call	0x166c	; 0x166c <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    16ba:	fe 01       	movw	r30, r28
    16bc:	21 96       	adiw	r28, 0x01	; 1
    16be:	84 91       	lpm	r24, Z
    16c0:	88 23       	and	r24, r24
    16c2:	c9 f7       	brne	.-14     	; 0x16b6 <uart_puts_p+0x8>
      uart_putc(c);

}/* uart_puts_p */
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	08 95       	ret

000016ca <__vector_32>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
    16ca:	1f 92       	push	r1
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	0f 92       	push	r0
    16d2:	0b b6       	in	r0, 0x3b	; 59
    16d4:	0f 92       	push	r0
    16d6:	11 24       	eor	r1, r1
    16d8:	2f 93       	push	r18
    16da:	8f 93       	push	r24
    16dc:	9f 93       	push	r25
    16de:	ef 93       	push	r30
    16e0:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    16e2:	90 91 c8 00 	lds	r25, 0x00C8
    data = UART1_DATA;
    16e6:	80 91 ce 00 	lds	r24, 0x00CE
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
        
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    16ea:	e0 91 50 01 	lds	r30, 0x0150
    16ee:	ef 5f       	subi	r30, 0xFF	; 255
    16f0:	ef 73       	andi	r30, 0x3F	; 63
    
    if ( tmphead == UART1_RxTail ) {
    16f2:	20 91 4f 01 	lds	r18, 0x014F
    16f6:	e2 17       	cp	r30, r18
    16f8:	41 f0       	breq	.+16     	; 0x170a <__vector_32+0x40>
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
    data = UART1_DATA;
    
    /* */
    lastRxError = (usr & (_BV(FE1)|_BV(DOR1)) );
    16fa:	98 71       	andi	r25, 0x18	; 24
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
    16fc:	e0 93 50 01 	sts	0x0150, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	ed 5a       	subi	r30, 0xAD	; 173
    1704:	fe 4f       	sbci	r31, 0xFE	; 254
    1706:	80 83       	st	Z, r24
    1708:	01 c0       	rjmp	.+2      	; 0x170c <__vector_32+0x42>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    170a:	92 e0       	ldi	r25, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
    170c:	80 91 4e 01 	lds	r24, 0x014E
    1710:	89 2b       	or	r24, r25
    1712:	80 93 4e 01 	sts	0x014E, r24
}
    1716:	ff 91       	pop	r31
    1718:	ef 91       	pop	r30
    171a:	9f 91       	pop	r25
    171c:	8f 91       	pop	r24
    171e:	2f 91       	pop	r18
    1720:	0f 90       	pop	r0
    1722:	0b be       	out	0x3b, r0	; 59
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	0f 90       	pop	r0
    172a:	1f 90       	pop	r1
    172c:	18 95       	reti

0000172e <__vector_33>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
    172e:	1f 92       	push	r1
    1730:	0f 92       	push	r0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	0f 92       	push	r0
    1736:	0b b6       	in	r0, 0x3b	; 59
    1738:	0f 92       	push	r0
    173a:	11 24       	eor	r1, r1
    173c:	8f 93       	push	r24
    173e:	9f 93       	push	r25
    1740:	ef 93       	push	r30
    1742:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
    1744:	90 91 52 01 	lds	r25, 0x0152
    1748:	80 91 51 01 	lds	r24, 0x0151
    174c:	98 17       	cp	r25, r24
    174e:	69 f0       	breq	.+26     	; 0x176a <__vector_33+0x3c>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
    1750:	e0 91 51 01 	lds	r30, 0x0151
    1754:	ef 5f       	subi	r30, 0xFF	; 255
    1756:	ef 73       	andi	r30, 0x3F	; 63
        UART1_TxTail = tmptail;
    1758:	e0 93 51 01 	sts	0x0151, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	ed 56       	subi	r30, 0x6D	; 109
    1760:	fe 4f       	sbci	r31, 0xFE	; 254
    1762:	80 81       	ld	r24, Z
    1764:	80 93 ce 00 	sts	0x00CE, r24
    1768:	05 c0       	rjmp	.+10     	; 0x1774 <__vector_33+0x46>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
    176a:	80 91 c9 00 	lds	r24, 0x00C9
    176e:	8f 7d       	andi	r24, 0xDF	; 223
    1770:	80 93 c9 00 	sts	0x00C9, r24
    }
}
    1774:	ff 91       	pop	r31
    1776:	ef 91       	pop	r30
    1778:	9f 91       	pop	r25
    177a:	8f 91       	pop	r24
    177c:	0f 90       	pop	r0
    177e:	0b be       	out	0x3b, r0	; 59
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
    178a:	10 92 52 01 	sts	0x0152, r1
    UART1_TxTail = 0;
    178e:	10 92 51 01 	sts	0x0151, r1
    UART1_RxHead = 0;
    1792:	10 92 50 01 	sts	0x0150, r1
    UART1_RxTail = 0;
    1796:	10 92 4f 01 	sts	0x014F, r1
    

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    179a:	97 ff       	sbrs	r25, 7
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <uart1_init+0x1c>
    {
    	UART1_STATUS = (1<<U2X1);  //Enable 2x speed 
    179e:	22 e0       	ldi	r18, 0x02	; 2
    17a0:	20 93 c8 00 	sts	0x00C8, r18
      baudrate &= ~0x8000;
    17a4:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRR1H = (unsigned char)(baudrate>>8);
    17a6:	90 93 cd 00 	sts	0x00CD, r25
    UBRR1L = (unsigned char) baudrate;
    17aa:	80 93 cc 00 	sts	0x00CC, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(RXCIE1)|(1<<RXEN1)|(1<<TXEN1);
    17ae:	88 e9       	ldi	r24, 0x98	; 152
    17b0:	80 93 c9 00 	sts	0x00C9, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef URSEL1
    UCSR1C = (1<<URSEL1)|(3<<UCSZ10);
    #else
    UCSR1C = (3<<UCSZ10);
    17b4:	86 e0       	ldi	r24, 0x06	; 6
    17b6:	80 93 ca 00 	sts	0x00CA, r24
    #endif 
}/* uart_init */
    17ba:	08 95       	ret

000017bc <uart1_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
    17bc:	90 91 50 01 	lds	r25, 0x0150
    17c0:	80 91 4f 01 	lds	r24, 0x014F
    17c4:	98 17       	cp	r25, r24
    17c6:	81 f0       	breq	.+32     	; 0x17e8 <uart1_getc+0x2c>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART1_RxTail + 1) & UART_RX_BUFFER_MASK;
    17c8:	e0 91 4f 01 	lds	r30, 0x014F
    17cc:	ef 5f       	subi	r30, 0xFF	; 255
    17ce:	ef 73       	andi	r30, 0x3F	; 63
    UART1_RxTail = tmptail; 
    17d0:	e0 93 4f 01 	sts	0x014F, r30
    
    /* get data from receive buffer */
    data = UART1_RxBuf[tmptail];
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	ed 5a       	subi	r30, 0xAD	; 173
    17d8:	fe 4f       	sbci	r31, 0xFE	; 254
    17da:	80 81       	ld	r24, Z
    
    data = (UART1_LastRxError << 8) + data;
    17dc:	90 91 4e 01 	lds	r25, 0x014E
    UART1_LastRxError = 0;
    17e0:	10 92 4e 01 	sts	0x014E, r1
    return data;
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART1_RxHead == UART1_RxTail ) {
        return UART_NO_DATA;   /* no data available */
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    
    data = (UART1_LastRxError << 8) + data;
    UART1_LastRxError = 0;
    return data;

}/* uart1_getc */
    17ec:	08 95       	ret

000017ee <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
    17ee:	90 91 52 01 	lds	r25, 0x0152
    17f2:	9f 5f       	subi	r25, 0xFF	; 255
    17f4:	9f 73       	andi	r25, 0x3F	; 63
    
    while ( tmphead == UART1_TxTail ){
    17f6:	20 91 51 01 	lds	r18, 0x0151
    17fa:	92 17       	cp	r25, r18
    17fc:	e1 f3       	breq	.-8      	; 0x17f6 <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
    17fe:	e9 2f       	mov	r30, r25
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	ed 56       	subi	r30, 0x6D	; 109
    1804:	fe 4f       	sbci	r31, 0xFE	; 254
    1806:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
    1808:	90 93 52 01 	sts	0x0152, r25

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
    180c:	80 91 c9 00 	lds	r24, 0x00C9
    1810:	80 62       	ori	r24, 0x20	; 32
    1812:	80 93 c9 00 	sts	0x00C9, r24

}/* uart1_putc */
    1816:	08 95       	ret

00001818 <uart1_puts>:
Purpose:  transmit string to UART1
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    1818:	cf 93       	push	r28
    181a:	df 93       	push	r29
    181c:	ec 01       	movw	r28, r24
    while (*s) 
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <uart1_puts+0xc>
      uart1_putc(*s++);
    1820:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <uart1_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart1_puts(const char *s )
{
    while (*s) 
    1824:	89 91       	ld	r24, Y+
    1826:	88 23       	and	r24, r24
    1828:	d9 f7       	brne	.-10     	; 0x1820 <uart1_puts+0x8>
      uart1_putc(*s++);

}/* uart1_puts */
    182a:	df 91       	pop	r29
    182c:	cf 91       	pop	r28
    182e:	08 95       	ret

00001830 <uart1_puts_p>:
Purpose:  transmit string from program memory to UART1
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    1830:	cf 93       	push	r28
    1832:	df 93       	push	r29
    1834:	ec 01       	movw	r28, r24
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1836:	02 c0       	rjmp	.+4      	; 0x183c <uart1_puts_p+0xc>
      uart1_putc(c);
    1838:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <uart1_putc>
**************************************************************************/
void uart1_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    183c:	fe 01       	movw	r30, r28
    183e:	21 96       	adiw	r28, 0x01	; 1
    1840:	84 91       	lpm	r24, Z
    1842:	88 23       	and	r24, r24
    1844:	c9 f7       	brne	.-14     	; 0x1838 <uart1_puts_p+0x8>
      uart1_putc(c);

}/* uart1_puts_p */
    1846:	df 91       	pop	r29
    1848:	cf 91       	pop	r28
    184a:	08 95       	ret

0000184c <sendResolverNMTMessage>:
#include "resolvers.h"
#include "kinematics.h"
#include "uart.h"

void sendResolverNMTMessage(void)
{
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	2e 97       	sbiw	r28, 0x0e	; 14
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
	can_t NMTMsg;
    NMTMsg.id = 0x00; 
    1860:	19 82       	std	Y+1, r1	; 0x01
    1862:	1a 82       	std	Y+2, r1	; 0x02
    1864:	1b 82       	std	Y+3, r1	; 0x03
    1866:	1c 82       	std	Y+4, r1	; 0x04
    NMTMsg.flags.rtr = 0;	// The sent message is NOT a remote-transmit-request frame
    1868:	8d 81       	ldd	r24, Y+5	; 0x05
    NMTMsg.flags.extended = 0;	// Sends the message with standard ID
    186a:	8c 7f       	andi	r24, 0xFC	; 252
    186c:	8d 83       	std	Y+5, r24	; 0x05
    NMTMsg.length = 2;	// Message length is 8 bytes
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	8e 83       	std	Y+6, r24	; 0x06
   
	NMTMsg.data[0] = 0x01;
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	8f 83       	std	Y+7, r24	; 0x07
	NMTMsg.data[1] = 0x00;	//0x00 for all resolvers
    1876:	18 86       	std	Y+8, r1	; 0x08

	can_send_message(&NMTMsg);
    1878:	ce 01       	movw	r24, r28
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <can_send_message>
}
    1880:	2e 96       	adiw	r28, 0x0e	; 14
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	08 95       	ret

00001892 <getResolverReading>:

// This function is mainly for debugging purposes
uint16_t getResolverReading(can_t* resolverMsg)
{
    1892:	fc 01       	movw	r30, r24
	uint32_t resolverId = resolverMsg->id;
	uint16_t angle = 0;
	float tmp;
   	angle += resolverMsg->data[1];
	angle <<= 8;
    1894:	37 81       	ldd	r19, Z+7	; 0x07
    1896:	20 e0       	ldi	r18, 0x00	; 0
	angle += resolverMsg->data[0];
    1898:	86 81       	ldd	r24, Z+6	; 0x06
    189a:	a9 01       	movw	r20, r18
    189c:	48 0f       	add	r20, r24
    189e:	51 1d       	adc	r21, r1
    18a0:	ca 01       	movw	r24, r20

	return angle;
}
    18a2:	08 95       	ret

000018a4 <calculateBucketAngle>:

	return angle/100;
}

int16_t calculateBucketAngle(uint16_t resolverReading)
{
    18a4:	8f 92       	push	r8
    18a6:	9f 92       	push	r9
    18a8:	af 92       	push	r10
    18aa:	bf 92       	push	r11
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
	float resolverReadingFloat, tmp;
	int16_t bucketAngle = 0;

	resolverReadingFloat = resolverReading/100.0;
    18b8:	bc 01       	movw	r22, r24
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__floatunsisf>
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	48 ec       	ldi	r20, 0xC8	; 200
    18c8:	52 e4       	ldi	r21, 0x42	; 66
    18ca:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__divsf3>
	tmp = (resolverReadingFloat - 260.22)/40.886;
    18ce:	29 e2       	ldi	r18, 0x29	; 41
    18d0:	3c e1       	ldi	r19, 0x1C	; 28
    18d2:	42 e8       	ldi	r20, 0x82	; 130
    18d4:	53 e4       	ldi	r21, 0x43	; 67
    18d6:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
    18da:	24 e4       	ldi	r18, 0x44	; 68
    18dc:	3b e8       	ldi	r19, 0x8B	; 139
    18de:	43 e2       	ldi	r20, 0x23	; 35
    18e0:	52 e4       	ldi	r21, 0x42	; 66
    18e2:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__divsf3>
    18e6:	d6 2f       	mov	r29, r22
    18e8:	c7 2f       	mov	r28, r23
    18ea:	f8 2e       	mov	r15, r24
    18ec:	e9 2e       	mov	r14, r25
	bucketAngle = -12.37*pow(tmp,2) + 66.704*tmp - 22.757;
    18ee:	ae 01       	movw	r20, r28
    18f0:	97 01       	movw	r18, r14
    18f2:	85 2f       	mov	r24, r21
    18f4:	94 2f       	mov	r25, r20
    18f6:	a3 2f       	mov	r26, r19
    18f8:	b2 2f       	mov	r27, r18
    18fa:	bc 01       	movw	r22, r24
    18fc:	cd 01       	movw	r24, r26
    18fe:	fe 01       	movw	r30, r28
    1900:	a7 01       	movw	r20, r14
    1902:	0f 2f       	mov	r16, r31
    1904:	1e 2f       	mov	r17, r30
    1906:	25 2f       	mov	r18, r21
    1908:	34 2f       	mov	r19, r20
    190a:	a9 01       	movw	r20, r18
    190c:	98 01       	movw	r18, r16
    190e:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
    1912:	46 2f       	mov	r20, r22
    1914:	57 2f       	mov	r21, r23
    1916:	68 2f       	mov	r22, r24
    1918:	79 2f       	mov	r23, r25
    191a:	cb 01       	movw	r24, r22
    191c:	ba 01       	movw	r22, r20
    191e:	25 e8       	ldi	r18, 0x85	; 133
    1920:	3b ee       	ldi	r19, 0xEB	; 235
    1922:	45 e4       	ldi	r20, 0x45	; 69
    1924:	51 ec       	ldi	r21, 0xC1	; 193
    1926:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
    192a:	4b 01       	movw	r8, r22
    192c:	5c 01       	movw	r10, r24
    192e:	ae 01       	movw	r20, r28
    1930:	97 01       	movw	r18, r14
    1932:	85 2f       	mov	r24, r21
    1934:	94 2f       	mov	r25, r20
    1936:	a3 2f       	mov	r26, r19
    1938:	b2 2f       	mov	r27, r18
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	23 e7       	ldi	r18, 0x73	; 115
    1940:	38 e6       	ldi	r19, 0x68	; 104
    1942:	45 e8       	ldi	r20, 0x85	; 133
    1944:	52 e4       	ldi	r21, 0x42	; 66
    1946:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
    194a:	9b 01       	movw	r18, r22
    194c:	ac 01       	movw	r20, r24
    194e:	c5 01       	movw	r24, r10
    1950:	b4 01       	movw	r22, r8
    1952:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
    1956:	26 e5       	ldi	r18, 0x56	; 86
    1958:	3e e0       	ldi	r19, 0x0E	; 14
    195a:	46 eb       	ldi	r20, 0xB6	; 182
    195c:	51 e4       	ldi	r21, 0x41	; 65
    195e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
    1962:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__fixsfsi>
	// Multiply by 100 to compensate for division by 100 in getResolverAngle
	bucketAngle = bucketAngle*100; 
    1966:	24 e6       	ldi	r18, 0x64	; 100
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	62 9f       	mul	r22, r18
    196c:	c0 01       	movw	r24, r0
    196e:	63 9f       	mul	r22, r19
    1970:	90 0d       	add	r25, r0
    1972:	72 9f       	mul	r23, r18
    1974:	90 0d       	add	r25, r0
    1976:	11 24       	eor	r1, r1

	return bucketAngle;
}
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	1f 91       	pop	r17
    197e:	0f 91       	pop	r16
    1980:	ff 90       	pop	r15
    1982:	ef 90       	pop	r14
    1984:	bf 90       	pop	r11
    1986:	af 90       	pop	r10
    1988:	9f 90       	pop	r9
    198a:	8f 90       	pop	r8
    198c:	08 95       	ret

0000198e <getResolverAngle>:
	return angle;
}


int16_t getResolverAngle(can_t* resolverMsg)
{
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	fc 01       	movw	r30, r24
	uint32_t resolverId = resolverMsg->id;
	uint16_t resolverReading = 0;
	int16_t angle;

   	resolverReading += resolverMsg->data[1];
	resolverReading = resolverReading << 8;
    1994:	97 81       	ldd	r25, Z+7	; 0x07
    1996:	80 e0       	ldi	r24, 0x00	; 0
	resolverReading += resolverMsg->data[0];
    1998:	26 81       	ldd	r18, Z+6	; 0x06
    199a:	82 0f       	add	r24, r18
    199c:	91 1d       	adc	r25, r1

	switch(resolverId)
    199e:	00 81       	ld	r16, Z
    19a0:	11 81       	ldd	r17, Z+1	; 0x01
    19a2:	22 81       	ldd	r18, Z+2	; 0x02
    19a4:	33 81       	ldd	r19, Z+3	; 0x03
    19a6:	01 3a       	cpi	r16, 0xA1	; 161
    19a8:	41 e0       	ldi	r20, 0x01	; 1
    19aa:	14 07       	cpc	r17, r20
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	24 07       	cpc	r18, r20
    19b0:	40 e0       	ldi	r20, 0x00	; 0
    19b2:	34 07       	cpc	r19, r20
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <getResolverAngle+0x2a>
    19b6:	3f c0       	rjmp	.+126    	; 0x1a36 <getResolverAngle+0xa8>
    19b8:	02 3a       	cpi	r16, 0xA2	; 162
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	14 07       	cpc	r17, r20
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	24 07       	cpc	r18, r20
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	34 07       	cpc	r19, r20
    19c6:	50 f4       	brcc	.+20     	; 0x19dc <getResolverAngle+0x4e>
    19c8:	0a 38       	cpi	r16, 0x8A	; 138
    19ca:	41 e0       	ldi	r20, 0x01	; 1
    19cc:	14 07       	cpc	r17, r20
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	24 07       	cpc	r18, r20
    19d2:	40 e0       	ldi	r20, 0x00	; 0
    19d4:	34 07       	cpc	r19, r20
    19d6:	09 f0       	breq	.+2      	; 0x19da <getResolverAngle+0x4c>
    19d8:	40 c0       	rjmp	.+128    	; 0x1a5a <getResolverAngle+0xcc>
    19da:	11 c0       	rjmp	.+34     	; 0x19fe <getResolverAngle+0x70>
    19dc:	02 3a       	cpi	r16, 0xA2	; 162
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	14 07       	cpc	r17, r20
    19e2:	40 e0       	ldi	r20, 0x00	; 0
    19e4:	24 07       	cpc	r18, r20
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	34 07       	cpc	r19, r20
    19ea:	a9 f0       	breq	.+42     	; 0x1a16 <getResolverAngle+0x88>
    19ec:	03 3a       	cpi	r16, 0xA3	; 163
    19ee:	41 e0       	ldi	r20, 0x01	; 1
    19f0:	14 07       	cpc	r17, r20
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	24 07       	cpc	r18, r20
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	34 07       	cpc	r19, r20
    19fa:	79 f5       	brne	.+94     	; 0x1a5a <getResolverAngle+0xcc>
    19fc:	2b c0       	rjmp	.+86     	; 0x1a54 <getResolverAngle+0xc6>
	{
		case SLEW_JOINT_RESOLVER_ID:
			angle = (resolverReading - SLEW_JOINT_RESOLVER_MIN) + TH1_MIN_DEG*100;
    19fe:	84 51       	subi	r24, 0x14	; 20
    1a00:	9e 44       	sbci	r25, 0x4E	; 78
    1a02:	bc 01       	movw	r22, r24
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__floatunsisf>
    1a0c:	2f ef       	ldi	r18, 0xFF	; 255
    1a0e:	3f ee       	ldi	r19, 0xEF	; 239
    1a10:	4b e5       	ldi	r20, 0x5B	; 91
    1a12:	55 e4       	ldi	r21, 0x45	; 69
    1a14:	0b c0       	rjmp	.+22     	; 0x1a2c <getResolverAngle+0x9e>
			break;
		case BOOM_JOINT_RESOLVER_ID:
			angle = (resolverReading - BOOM_JOINT_RESOLVER_MIN) + TH2_MIN_DEG*100;
    1a16:	88 5b       	subi	r24, 0xB8	; 184
    1a18:	90 44       	sbci	r25, 0x40	; 64
    1a1a:	bc 01       	movw	r22, r24
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__floatunsisf>
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e0       	ldi	r20, 0x00	; 0
    1a2a:	53 e4       	ldi	r21, 0x43	; 67
    1a2c:	0e 94 94 16 	call	0x2d28	; 0x2d28 <__addsf3>
    1a30:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__fixsfsi>
			break;
    1a34:	12 c0       	rjmp	.+36     	; 0x1a5a <getResolverAngle+0xcc>
		case ARM_JOINT_RESOLVER_ID:
			angle = (ARM_JOINT_RESOLVER_MIN - resolverReading) + TH3_MIN_DEG*100;
    1a36:	6b ed       	ldi	r22, 0xDB	; 219
    1a38:	7e e6       	ldi	r23, 0x6E	; 110
    1a3a:	68 1b       	sub	r22, r24
    1a3c:	79 0b       	sbc	r23, r25
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__floatunsisf>
    1a46:	21 e0       	ldi	r18, 0x01	; 1
    1a48:	34 ec       	ldi	r19, 0xC4	; 196
    1a4a:	41 e6       	ldi	r20, 0x61	; 97
    1a4c:	56 e4       	ldi	r21, 0x46	; 70
    1a4e:	0e 94 93 16 	call	0x2d26	; 0x2d26 <__subsf3>
    1a52:	ee cf       	rjmp	.-36     	; 0x1a30 <getResolverAngle+0xa2>
			break;
		case BUCKET_JOINT_RESOLVER_ID:
			angle = calculateBucketAngle(resolverReading);
    1a54:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <calculateBucketAngle>
    1a58:	bc 01       	movw	r22, r24
			break;			
	}

	return angle/100;
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	64 e6       	ldi	r22, 0x64	; 100
    1a5e:	70 e0       	ldi	r23, 0x00	; 0
    1a60:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__divmodhi4>
    1a64:	cb 01       	movw	r24, r22
}
    1a66:	1f 91       	pop	r17
    1a68:	0f 91       	pop	r16
    1a6a:	08 95       	ret

00001a6c <printResolverReadingUART>:

	return bucketAngle;
}

void printResolverReadingUART(char* str, uint16_t angle)
{
    1a6c:	0f 93       	push	r16
    1a6e:	1f 93       	push	r17
    1a70:	cf 93       	push	r28
    1a72:	df 93       	push	r29
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	27 97       	sbiw	r28, 0x07	; 7
    1a7a:	0f b6       	in	r0, 0x3f	; 63
    1a7c:	f8 94       	cli
    1a7e:	de bf       	out	0x3e, r29	; 62
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	cd bf       	out	0x3d, r28	; 61
    1a84:	8b 01       	movw	r16, r22
	char buffer[7];
	uart1_puts(str);
    1a86:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	itoa(angle, buffer, 10); // the parameter 10 signifies base 10        
    1a8a:	c8 01       	movw	r24, r16
    1a8c:	be 01       	movw	r22, r28
    1a8e:	6f 5f       	subi	r22, 0xFF	; 255
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255
    1a92:	4a e0       	ldi	r20, 0x0A	; 10
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
    uart1_puts(buffer);
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	01 96       	adiw	r24, 0x01	; 1
    1a9e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("\n");
    1aa2:	85 e3       	ldi	r24, 0x35	; 53
    1aa4:	91 e0       	ldi	r25, 0x01	; 1
    1aa6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
}
    1aaa:	27 96       	adiw	r28, 0x07	; 7
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	08 95       	ret

00001ac0 <printResolverAngleUART>:

void printResolverAngleUART(char* str, int16_t angle)
{
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	27 97       	sbiw	r28, 0x07	; 7
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	8b 01       	movw	r16, r22
	char buffer[7];
	uart1_puts(str);
    1ada:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	itoa(angle, buffer, 10); // the parameter 10 signifies base 10        
    1ade:	c8 01       	movw	r24, r16
    1ae0:	be 01       	movw	r22, r28
    1ae2:	6f 5f       	subi	r22, 0xFF	; 255
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	4a e0       	ldi	r20, 0x0A	; 10
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
    uart1_puts(buffer);
    1aee:	ce 01       	movw	r24, r28
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("\n");
    1af6:	85 e3       	ldi	r24, 0x35	; 53
    1af8:	91 e0       	ldi	r25, 0x01	; 1
    1afa:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
}
    1afe:	27 96       	adiw	r28, 0x07	; 7
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	08 95       	ret

00001b14 <printResolverReferenceAngleUART>:

void printResolverReferenceAngleUART(char* str, float referenceAngle)
{
    1b14:	ef 92       	push	r14
    1b16:	ff 92       	push	r15
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	2f 97       	sbiw	r28, 0x0f	; 15
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	7c 01       	movw	r14, r24
	char buffer[15];
	referenceAngle = (referenceAngle * 180.0 / M_PI);
    1b32:	cb 01       	movw	r24, r22
    1b34:	ba 01       	movw	r22, r20
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	44 e3       	ldi	r20, 0x34	; 52
    1b3c:	53 e4       	ldi	r21, 0x43	; 67
    1b3e:	0e 94 15 19 	call	0x322a	; 0x322a <__mulsf3>
    1b42:	46 2f       	mov	r20, r22
    1b44:	57 2f       	mov	r21, r23
    1b46:	68 2f       	mov	r22, r24
    1b48:	79 2f       	mov	r23, r25
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	ba 01       	movw	r22, r20
    1b4e:	2b ed       	ldi	r18, 0xDB	; 219
    1b50:	3f e0       	ldi	r19, 0x0F	; 15
    1b52:	49 e4       	ldi	r20, 0x49	; 73
    1b54:	50 e4       	ldi	r21, 0x40	; 64
    1b56:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <__divsf3>
	dtostrf(referenceAngle,5,2,buffer);
    1b5a:	45 e0       	ldi	r20, 0x05	; 5
    1b5c:	50 e0       	ldi	r21, 0x00	; 0
    1b5e:	22 e0       	ldi	r18, 0x02	; 2
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	8e 01       	movw	r16, r28
    1b64:	0f 5f       	subi	r16, 0xFF	; 255
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	0e 94 14 1b 	call	0x3628	; 0x3628 <dtostrf>
	uart1_puts(str);
    1b6c:	c7 01       	movw	r24, r14
    1b6e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
    uart1_puts(buffer);
    1b72:	c8 01       	movw	r24, r16
    1b74:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("\n");
    1b78:	85 e3       	ldi	r24, 0x35	; 53
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
    1b7c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
}
    1b80:	2f 96       	adiw	r28, 0x0f	; 15
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	1f 91       	pop	r17
    1b92:	0f 91       	pop	r16
    1b94:	ff 90       	pop	r15
    1b96:	ef 90       	pop	r14
    1b98:	08 95       	ret

00001b9a <printCurrentCoordinatesUART>:

void printCurrentCoordinatesUART(char* str, float x, float y, float z)
{
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	2f 97       	sbiw	r28, 0x0f	; 15
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	6a 01       	movw	r12, r20
    1bbc:	7b 01       	movw	r14, r22
	char buffer[15];
	uart1_puts(str);
    1bbe:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	dtostrf(x,5,2,buffer);
    1bc2:	c7 01       	movw	r24, r14
    1bc4:	b6 01       	movw	r22, r12
    1bc6:	45 e0       	ldi	r20, 0x05	; 5
    1bc8:	50 e0       	ldi	r21, 0x00	; 0
    1bca:	22 e0       	ldi	r18, 0x02	; 2
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	8e 01       	movw	r16, r28
    1bd0:	0f 5f       	subi	r16, 0xFF	; 255
    1bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd4:	0e 94 14 1b 	call	0x3628	; 0x3628 <dtostrf>
    uart1_puts(buffer);
    1bd8:	c8 01       	movw	r24, r16
    1bda:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("\n");
    1bde:	85 e3       	ldi	r24, 0x35	; 53
    1be0:	91 e0       	ldi	r25, 0x01	; 1
    1be2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
}
    1be6:	2f 96       	adiw	r28, 0x0f	; 15
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	df 90       	pop	r13
    1c00:	cf 90       	pop	r12
    1c02:	08 95       	ret

00001c04 <setValveMsg>:
	else { return 0;}

}

void setValveMsg(can_t* const valveMsg, const uint8_t flow, const uint8_t spoolState, const uint32_t valveID)
{   
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	fc 01       	movw	r30, r24
   valveMsg->id = valveID;
    1c0a:	00 83       	st	Z, r16
    1c0c:	11 83       	std	Z+1, r17	; 0x01
    1c0e:	22 83       	std	Z+2, r18	; 0x02
    1c10:	33 83       	std	Z+3, r19	; 0x03
   valveMsg->flags.rtr = 0;	// The sent message is NOT a remote-transmit-request frame
    1c12:	84 81       	ldd	r24, Z+4	; 0x04
    1c14:	8e 7f       	andi	r24, 0xFE	; 254
   valveMsg->flags.extended = 1;	// Sends the message with extended ID
    1c16:	82 60       	ori	r24, 0x02	; 2
    1c18:	84 83       	std	Z+4, r24	; 0x04
   valveMsg->length = 8;	// Message length is 8 bytes
    1c1a:	88 e0       	ldi	r24, 0x08	; 8
    1c1c:	85 83       	std	Z+5, r24	; 0x05

   for (uint8_t k = 0; k < 8; k++)
   {
		valveMsg->data[k] = 0;
    1c1e:	17 82       	std	Z+7, r1	; 0x07
    1c20:	11 86       	std	Z+9, r1	; 0x09
    1c22:	12 86       	std	Z+10, r1	; 0x0a
    1c24:	13 86       	std	Z+11, r1	; 0x0b
    1c26:	14 86       	std	Z+12, r1	; 0x0c
    1c28:	15 86       	std	Z+13, r1	; 0x0d
   }

   valveMsg->data[0] = flow;
    1c2a:	66 83       	std	Z+6, r22	; 0x06
   valveMsg->data[2] = spoolState;
    1c2c:	40 87       	std	Z+8, r20	; 0x08

}
    1c2e:	1f 91       	pop	r17
    1c30:	0f 91       	pop	r16
    1c32:	08 95       	ret

00001c34 <controlBucketJointValve>:
	else { return 0;}

}

uint8_t controlBucketJointValve(int16_t* const referenceAngle, int16_t* const currentAngle)
{
    1c34:	8f 92       	push	r8
    1c36:	9f 92       	push	r9
    1c38:	af 92       	push	r10
    1c3a:	bf 92       	push	r11
    1c3c:	cf 92       	push	r12
    1c3e:	df 92       	push	r13
    1c40:	ef 92       	push	r14
    1c42:	ff 92       	push	r15
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	2f 97       	sbiw	r28, 0x0f	; 15
    1c52:	0f b6       	in	r0, 0x3f	; 63
    1c54:	f8 94       	cli
    1c56:	de bf       	out	0x3e, r29	; 62
    1c58:	0f be       	out	0x3f, r0	; 63
    1c5a:	cd bf       	out	0x3d, r28	; 61
	uint8_t pid = 0;
	uint8_t switchDirection = 1;
	uint8_t direction = FLOATING;
    1c5c:	23 e0       	ldi	r18, 0x03	; 3
    1c5e:	29 83       	std	Y+1, r18	; 0x01
	float Kp = 1.2;
	float Ki = 0.1;
	pid = pid_controller(referenceAngle, currentAngle, &direction, &bucketJointErrorIntegral, switchDirection, Kp, Ki);
    1c60:	ae 01       	movw	r20, r28
    1c62:	4f 5f       	subi	r20, 0xFF	; 255
    1c64:	5f 4f       	sbci	r21, 0xFF	; 255
    1c66:	26 e6       	ldi	r18, 0x66	; 102
    1c68:	32 e0       	ldi	r19, 0x02	; 2
    1c6a:	01 e0       	ldi	r16, 0x01	; 1
    1c6c:	0f 2e       	mov	r0, r31
    1c6e:	fa e9       	ldi	r31, 0x9A	; 154
    1c70:	cf 2e       	mov	r12, r31
    1c72:	f9 e9       	ldi	r31, 0x99	; 153
    1c74:	df 2e       	mov	r13, r31
    1c76:	f9 e9       	ldi	r31, 0x99	; 153
    1c78:	ef 2e       	mov	r14, r31
    1c7a:	ff e3       	ldi	r31, 0x3F	; 63
    1c7c:	ff 2e       	mov	r15, r31
    1c7e:	f0 2d       	mov	r31, r0
    1c80:	0f 2e       	mov	r0, r31
    1c82:	fd ec       	ldi	r31, 0xCD	; 205
    1c84:	8f 2e       	mov	r8, r31
    1c86:	fc ec       	ldi	r31, 0xCC	; 204
    1c88:	9f 2e       	mov	r9, r31
    1c8a:	fc ec       	ldi	r31, 0xCC	; 204
    1c8c:	af 2e       	mov	r10, r31
    1c8e:	fd e3       	ldi	r31, 0x3D	; 61
    1c90:	bf 2e       	mov	r11, r31
    1c92:	f0 2d       	mov	r31, r0
    1c94:	0e 94 90 05 	call	0xb20	; 0xb20 <pid_controller>
    1c98:	f8 2e       	mov	r15, r24
	
	can_t valveCtrlMsg;
	
	uart1_puts("PID value: ");
    1c9a:	87 e3       	ldi	r24, 0x37	; 55
    1c9c:	91 e0       	ldi	r25, 0x01	; 1
    1c9e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	itoa(pid, buffer, 10);
    1ca2:	8f 2d       	mov	r24, r15
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	69 e5       	ldi	r22, 0x59	; 89
    1ca8:	72 e0       	ldi	r23, 0x02	; 2
    1caa:	4a e0       	ldi	r20, 0x0A	; 10
    1cac:	50 e0       	ldi	r21, 0x00	; 0
    1cae:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
	uart1_puts(buffer);
    1cb2:	89 e5       	ldi	r24, 0x59	; 89
    1cb4:	92 e0       	ldi	r25, 0x02	; 2
    1cb6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("\n");
    1cba:	83 e4       	ldi	r24, 0x43	; 67
    1cbc:	91 e0       	ldi	r25, 0x01	; 1
    1cbe:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>

	setValveMsg(&valveCtrlMsg, 50, 1, BUCKET_JOINT_VALVE_CTRLMSG_ID);
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	02 96       	adiw	r24, 0x02	; 2
    1cc6:	62 e3       	ldi	r22, 0x32	; 50
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	06 e0       	ldi	r16, 0x06	; 6
    1ccc:	14 e3       	ldi	r17, 0x34	; 52
    1cce:	2e ef       	ldi	r18, 0xFE	; 254
    1cd0:	3c e0       	ldi	r19, 0x0C	; 12
    1cd2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <setValveMsg>

	can_send_message(&valveCtrlMsg);
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	02 96       	adiw	r24, 0x02	; 2
    1cda:	0e 94 71 13 	call	0x26e2	; 0x26e2 <can_send_message>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cde:	8f ef       	ldi	r24, 0xFF	; 255
    1ce0:	90 e7       	ldi	r25, 0x70	; 112
    1ce2:	a2 e0       	ldi	r26, 0x02	; 2
    1ce4:	81 50       	subi	r24, 0x01	; 1
    1ce6:	90 40       	sbci	r25, 0x00	; 0
    1ce8:	a0 40       	sbci	r26, 0x00	; 0
    1cea:	e1 f7       	brne	.-8      	; 0x1ce4 <controlBucketJointValve+0xb0>
    1cec:	00 c0       	rjmp	.+0      	; 0x1cee <controlBucketJointValve+0xba>
    1cee:	00 00       	nop
	_delay_ms(50);

	if(pid == 0) 
    1cf0:	ff 20       	and	r15, r15
    1cf2:	31 f4       	brne	.+12     	; 0x1d00 <controlBucketJointValve+0xcc>
	{
		bucketJointErrorIntegral = 0;
    1cf4:	10 92 67 02 	sts	0x0267, r1
    1cf8:	10 92 66 02 	sts	0x0266, r1
		return 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	01 c0       	rjmp	.+2      	; 0x1d02 <controlBucketJointValve+0xce>
	}
	else { return 0;}
    1d00:	80 e0       	ldi	r24, 0x00	; 0

}
    1d02:	2f 96       	adiw	r28, 0x0f	; 15
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	1f 91       	pop	r17
    1d14:	0f 91       	pop	r16
    1d16:	ff 90       	pop	r15
    1d18:	ef 90       	pop	r14
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	bf 90       	pop	r11
    1d20:	af 90       	pop	r10
    1d22:	9f 90       	pop	r9
    1d24:	8f 90       	pop	r8
    1d26:	08 95       	ret

00001d28 <controlArmJointValve>:
	else { return 0;}

}

uint8_t controlArmJointValve(int16_t* const referenceAngle, int16_t* const currentAngle)
{
    1d28:	8f 92       	push	r8
    1d2a:	9f 92       	push	r9
    1d2c:	af 92       	push	r10
    1d2e:	bf 92       	push	r11
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	0f 93       	push	r16
    1d3a:	1f 93       	push	r17
    1d3c:	cf 93       	push	r28
    1d3e:	df 93       	push	r29
    1d40:	cd b7       	in	r28, 0x3d	; 61
    1d42:	de b7       	in	r29, 0x3e	; 62
    1d44:	2f 97       	sbiw	r28, 0x0f	; 15
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
	uint8_t pid = 0;
	uint8_t switchDirection = 0;
	uint8_t direction = FLOATING;
    1d50:	23 e0       	ldi	r18, 0x03	; 3
    1d52:	29 83       	std	Y+1, r18	; 0x01
	float Kp = 1.3;
	float Ki = 0.1;
	pid = pid_controller(referenceAngle, currentAngle, &direction, &armJointErrorIntegral, switchDirection, Kp, Ki);
    1d54:	ae 01       	movw	r20, r28
    1d56:	4f 5f       	subi	r20, 0xFF	; 255
    1d58:	5f 4f       	sbci	r21, 0xFF	; 255
    1d5a:	20 e6       	ldi	r18, 0x60	; 96
    1d5c:	32 e0       	ldi	r19, 0x02	; 2
    1d5e:	00 e0       	ldi	r16, 0x00	; 0
    1d60:	0f 2e       	mov	r0, r31
    1d62:	f6 e6       	ldi	r31, 0x66	; 102
    1d64:	cf 2e       	mov	r12, r31
    1d66:	f6 e6       	ldi	r31, 0x66	; 102
    1d68:	df 2e       	mov	r13, r31
    1d6a:	f6 ea       	ldi	r31, 0xA6	; 166
    1d6c:	ef 2e       	mov	r14, r31
    1d6e:	ff e3       	ldi	r31, 0x3F	; 63
    1d70:	ff 2e       	mov	r15, r31
    1d72:	f0 2d       	mov	r31, r0
    1d74:	0f 2e       	mov	r0, r31
    1d76:	fd ec       	ldi	r31, 0xCD	; 205
    1d78:	8f 2e       	mov	r8, r31
    1d7a:	fc ec       	ldi	r31, 0xCC	; 204
    1d7c:	9f 2e       	mov	r9, r31
    1d7e:	fc ec       	ldi	r31, 0xCC	; 204
    1d80:	af 2e       	mov	r10, r31
    1d82:	fd e3       	ldi	r31, 0x3D	; 61
    1d84:	bf 2e       	mov	r11, r31
    1d86:	f0 2d       	mov	r31, r0
    1d88:	0e 94 90 05 	call	0xb20	; 0xb20 <pid_controller>
    1d8c:	f8 2e       	mov	r15, r24
	
	can_t valveCtrlMsg;
	
	uart1_puts("PID value: ");
    1d8e:	87 e3       	ldi	r24, 0x37	; 55
    1d90:	91 e0       	ldi	r25, 0x01	; 1
    1d92:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	itoa(pid, buffer, 10);
    1d96:	8f 2d       	mov	r24, r15
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	69 e5       	ldi	r22, 0x59	; 89
    1d9c:	72 e0       	ldi	r23, 0x02	; 2
    1d9e:	4a e0       	ldi	r20, 0x0A	; 10
    1da0:	50 e0       	ldi	r21, 0x00	; 0
    1da2:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
	uart1_puts(buffer);
    1da6:	89 e5       	ldi	r24, 0x59	; 89
    1da8:	92 e0       	ldi	r25, 0x02	; 2
    1daa:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("\n");
    1dae:	83 e4       	ldi	r24, 0x43	; 67
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>

	setValveMsg(&valveCtrlMsg, 50, 2, ARM_JOINT_VALVE_CTRLMSG_ID);
    1db6:	ce 01       	movw	r24, r28
    1db8:	02 96       	adiw	r24, 0x02	; 2
    1dba:	62 e3       	ldi	r22, 0x32	; 50
    1dbc:	42 e0       	ldi	r20, 0x02	; 2
    1dbe:	06 e0       	ldi	r16, 0x06	; 6
    1dc0:	15 e3       	ldi	r17, 0x35	; 53
    1dc2:	2e ef       	ldi	r18, 0xFE	; 254
    1dc4:	3c e0       	ldi	r19, 0x0C	; 12
    1dc6:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <setValveMsg>

	can_send_message(&valveCtrlMsg);
    1dca:	ce 01       	movw	r24, r28
    1dcc:	02 96       	adiw	r24, 0x02	; 2
    1dce:	0e 94 71 13 	call	0x26e2	; 0x26e2 <can_send_message>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	90 e7       	ldi	r25, 0x70	; 112
    1dd6:	a2 e0       	ldi	r26, 0x02	; 2
    1dd8:	81 50       	subi	r24, 0x01	; 1
    1dda:	90 40       	sbci	r25, 0x00	; 0
    1ddc:	a0 40       	sbci	r26, 0x00	; 0
    1dde:	e1 f7       	brne	.-8      	; 0x1dd8 <controlArmJointValve+0xb0>
    1de0:	00 c0       	rjmp	.+0      	; 0x1de2 <controlArmJointValve+0xba>
    1de2:	00 00       	nop
	_delay_ms(50);

	if(pid == 0) 
    1de4:	ff 20       	and	r15, r15
    1de6:	31 f4       	brne	.+12     	; 0x1df4 <controlArmJointValve+0xcc>
	{
		armJointErrorIntegral = 0;
    1de8:	10 92 61 02 	sts	0x0261, r1
    1dec:	10 92 60 02 	sts	0x0260, r1
		return 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	01 c0       	rjmp	.+2      	; 0x1df6 <controlArmJointValve+0xce>
	}
	else { return 0;}
    1df4:	80 e0       	ldi	r24, 0x00	; 0

}
    1df6:	2f 96       	adiw	r28, 0x0f	; 15
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	f8 94       	cli
    1dfc:	de bf       	out	0x3e, r29	; 62
    1dfe:	0f be       	out	0x3f, r0	; 63
    1e00:	cd bf       	out	0x3d, r28	; 61
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	1f 91       	pop	r17
    1e08:	0f 91       	pop	r16
    1e0a:	ff 90       	pop	r15
    1e0c:	ef 90       	pop	r14
    1e0e:	df 90       	pop	r13
    1e10:	cf 90       	pop	r12
    1e12:	bf 90       	pop	r11
    1e14:	af 90       	pop	r10
    1e16:	9f 90       	pop	r9
    1e18:	8f 90       	pop	r8
    1e1a:	08 95       	ret

00001e1c <controlBoomJointValve>:
	else { return 0;}

}

uint8_t controlBoomJointValve(int16_t* const referenceAngle, int16_t* const currentAngle)
{
    1e1c:	8f 92       	push	r8
    1e1e:	9f 92       	push	r9
    1e20:	af 92       	push	r10
    1e22:	bf 92       	push	r11
    1e24:	cf 92       	push	r12
    1e26:	df 92       	push	r13
    1e28:	ef 92       	push	r14
    1e2a:	ff 92       	push	r15
    1e2c:	0f 93       	push	r16
    1e2e:	1f 93       	push	r17
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	2f 97       	sbiw	r28, 0x0f	; 15
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	de bf       	out	0x3e, r29	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	cd bf       	out	0x3d, r28	; 61
	uint8_t pid = 0;
	uint8_t switchDirection = 0;
	uint8_t direction = FLOATING;
    1e44:	23 e0       	ldi	r18, 0x03	; 3
    1e46:	29 83       	std	Y+1, r18	; 0x01
	float Kp = 1.3;
	float Ki = 0;
	pid = pid_controller(referenceAngle, currentAngle, &direction, &boomJointErrorIntegral, switchDirection, Kp, Ki);
    1e48:	ae 01       	movw	r20, r28
    1e4a:	4f 5f       	subi	r20, 0xFF	; 255
    1e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e4e:	22 e6       	ldi	r18, 0x62	; 98
    1e50:	32 e0       	ldi	r19, 0x02	; 2
    1e52:	00 e0       	ldi	r16, 0x00	; 0
    1e54:	0f 2e       	mov	r0, r31
    1e56:	f6 e6       	ldi	r31, 0x66	; 102
    1e58:	cf 2e       	mov	r12, r31
    1e5a:	f6 e6       	ldi	r31, 0x66	; 102
    1e5c:	df 2e       	mov	r13, r31
    1e5e:	f6 ea       	ldi	r31, 0xA6	; 166
    1e60:	ef 2e       	mov	r14, r31
    1e62:	ff e3       	ldi	r31, 0x3F	; 63
    1e64:	ff 2e       	mov	r15, r31
    1e66:	f0 2d       	mov	r31, r0
    1e68:	0f 2e       	mov	r0, r31
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	8f 2e       	mov	r8, r31
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	9f 2e       	mov	r9, r31
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	af 2e       	mov	r10, r31
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	bf 2e       	mov	r11, r31
    1e7a:	f0 2d       	mov	r31, r0
    1e7c:	0e 94 90 05 	call	0xb20	; 0xb20 <pid_controller>
    1e80:	f8 2e       	mov	r15, r24
	
	uart1_puts("PID value: ");
    1e82:	87 e3       	ldi	r24, 0x37	; 55
    1e84:	91 e0       	ldi	r25, 0x01	; 1
    1e86:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	itoa(pid, buffer, 10);
    1e8a:	8f 2d       	mov	r24, r15
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	69 e5       	ldi	r22, 0x59	; 89
    1e90:	72 e0       	ldi	r23, 0x02	; 2
    1e92:	4a e0       	ldi	r20, 0x0A	; 10
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
	uart1_puts(buffer);
    1e9a:	89 e5       	ldi	r24, 0x59	; 89
    1e9c:	92 e0       	ldi	r25, 0x02	; 2
    1e9e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("\n");
    1ea2:	83 e4       	ldi	r24, 0x43	; 67
    1ea4:	91 e0       	ldi	r25, 0x01	; 1
    1ea6:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	
	can_t valveCtrlMsg;
	setValveMsg(&valveCtrlMsg, 50, 2, BOOM_JOINT_VALVE_CTRLMSG_ID);
    1eaa:	ce 01       	movw	r24, r28
    1eac:	02 96       	adiw	r24, 0x02	; 2
    1eae:	62 e3       	ldi	r22, 0x32	; 50
    1eb0:	42 e0       	ldi	r20, 0x02	; 2
    1eb2:	06 e0       	ldi	r16, 0x06	; 6
    1eb4:	13 e3       	ldi	r17, 0x33	; 51
    1eb6:	2e ef       	ldi	r18, 0xFE	; 254
    1eb8:	3c e0       	ldi	r19, 0x0C	; 12
    1eba:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <setValveMsg>
	can_send_message(&valveCtrlMsg);
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	02 96       	adiw	r24, 0x02	; 2
    1ec2:	0e 94 71 13 	call	0x26e2	; 0x26e2 <can_send_message>
    1ec6:	8f ef       	ldi	r24, 0xFF	; 255
    1ec8:	90 e7       	ldi	r25, 0x70	; 112
    1eca:	a2 e0       	ldi	r26, 0x02	; 2
    1ecc:	81 50       	subi	r24, 0x01	; 1
    1ece:	90 40       	sbci	r25, 0x00	; 0
    1ed0:	a0 40       	sbci	r26, 0x00	; 0
    1ed2:	e1 f7       	brne	.-8      	; 0x1ecc <controlBoomJointValve+0xb0>
    1ed4:	00 c0       	rjmp	.+0      	; 0x1ed6 <controlBoomJointValve+0xba>
    1ed6:	00 00       	nop
	_delay_ms(50);

	if(pid == 0) 
    1ed8:	ff 20       	and	r15, r15
    1eda:	31 f4       	brne	.+12     	; 0x1ee8 <controlBoomJointValve+0xcc>
	{
		boomJointErrorIntegral = 0;
    1edc:	10 92 63 02 	sts	0x0263, r1
    1ee0:	10 92 62 02 	sts	0x0262, r1
		return 1;
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	01 c0       	rjmp	.+2      	; 0x1eea <controlBoomJointValve+0xce>
	}
	else { return 0;}
    1ee8:	80 e0       	ldi	r24, 0x00	; 0

}
    1eea:	2f 96       	adiw	r28, 0x0f	; 15
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	cf 90       	pop	r12
    1f06:	bf 90       	pop	r11
    1f08:	af 90       	pop	r10
    1f0a:	9f 90       	pop	r9
    1f0c:	8f 90       	pop	r8
    1f0e:	08 95       	ret

00001f10 <controlSlewJointValve>:
int16_t bucketJointErrorIntegral;

char buffer[7];

uint8_t controlSlewJointValve(int16_t* const referenceAngle, int16_t* const currentAngle)
{
    1f10:	8f 92       	push	r8
    1f12:	9f 92       	push	r9
    1f14:	af 92       	push	r10
    1f16:	bf 92       	push	r11
    1f18:	cf 92       	push	r12
    1f1a:	df 92       	push	r13
    1f1c:	ef 92       	push	r14
    1f1e:	ff 92       	push	r15
    1f20:	0f 93       	push	r16
    1f22:	1f 93       	push	r17
    1f24:	cf 93       	push	r28
    1f26:	df 93       	push	r29
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
    1f2c:	2f 97       	sbiw	r28, 0x0f	; 15
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	de bf       	out	0x3e, r29	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	cd bf       	out	0x3d, r28	; 61
	uint8_t pid = 0;
	uint8_t switchDirection = 1;
	uint8_t direction = FLOATING;
    1f38:	23 e0       	ldi	r18, 0x03	; 3
    1f3a:	29 83       	std	Y+1, r18	; 0x01
	float Kp = 0.8;
	float Ki = 0.1;
	pid = pid_controller(referenceAngle, currentAngle, &direction, &slewJointErrorIntegral, switchDirection, Kp, Ki);
    1f3c:	ae 01       	movw	r20, r28
    1f3e:	4f 5f       	subi	r20, 0xFF	; 255
    1f40:	5f 4f       	sbci	r21, 0xFF	; 255
    1f42:	24 e6       	ldi	r18, 0x64	; 100
    1f44:	32 e0       	ldi	r19, 0x02	; 2
    1f46:	01 e0       	ldi	r16, 0x01	; 1
    1f48:	0f 2e       	mov	r0, r31
    1f4a:	fd ec       	ldi	r31, 0xCD	; 205
    1f4c:	cf 2e       	mov	r12, r31
    1f4e:	fc ec       	ldi	r31, 0xCC	; 204
    1f50:	df 2e       	mov	r13, r31
    1f52:	fc e4       	ldi	r31, 0x4C	; 76
    1f54:	ef 2e       	mov	r14, r31
    1f56:	ff e3       	ldi	r31, 0x3F	; 63
    1f58:	ff 2e       	mov	r15, r31
    1f5a:	f0 2d       	mov	r31, r0
    1f5c:	0f 2e       	mov	r0, r31
    1f5e:	fd ec       	ldi	r31, 0xCD	; 205
    1f60:	8f 2e       	mov	r8, r31
    1f62:	fc ec       	ldi	r31, 0xCC	; 204
    1f64:	9f 2e       	mov	r9, r31
    1f66:	fc ec       	ldi	r31, 0xCC	; 204
    1f68:	af 2e       	mov	r10, r31
    1f6a:	fd e3       	ldi	r31, 0x3D	; 61
    1f6c:	bf 2e       	mov	r11, r31
    1f6e:	f0 2d       	mov	r31, r0
    1f70:	0e 94 90 05 	call	0xb20	; 0xb20 <pid_controller>
    1f74:	f8 2e       	mov	r15, r24
	
	uart1_puts("PID value: ");
    1f76:	87 e3       	ldi	r24, 0x37	; 55
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	itoa(pid, buffer, 10);
    1f7e:	8f 2d       	mov	r24, r15
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	69 e5       	ldi	r22, 0x59	; 89
    1f84:	72 e0       	ldi	r23, 0x02	; 2
    1f86:	4a e0       	ldi	r20, 0x0A	; 10
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
	uart1_puts(buffer);
    1f8e:	89 e5       	ldi	r24, 0x59	; 89
    1f90:	92 e0       	ldi	r25, 0x02	; 2
    1f92:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("\n");
    1f96:	83 e4       	ldi	r24, 0x43	; 67
    1f98:	91 e0       	ldi	r25, 0x01	; 1
    1f9a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>

	can_t valveCtrlMsg;
	setValveMsg(&valveCtrlMsg, 50, 1, SLEW_JOINT_VALVE_CTRLMSG_ID);
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	02 96       	adiw	r24, 0x02	; 2
    1fa2:	62 e3       	ldi	r22, 0x32	; 50
    1fa4:	41 e0       	ldi	r20, 0x01	; 1
    1fa6:	06 e0       	ldi	r16, 0x06	; 6
    1fa8:	11 e3       	ldi	r17, 0x31	; 49
    1faa:	2e ef       	ldi	r18, 0xFE	; 254
    1fac:	3c e0       	ldi	r19, 0x0C	; 12
    1fae:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <setValveMsg>
	can_send_message(&valveCtrlMsg);
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	02 96       	adiw	r24, 0x02	; 2
    1fb6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <can_send_message>
    1fba:	8f ef       	ldi	r24, 0xFF	; 255
    1fbc:	90 e7       	ldi	r25, 0x70	; 112
    1fbe:	a2 e0       	ldi	r26, 0x02	; 2
    1fc0:	81 50       	subi	r24, 0x01	; 1
    1fc2:	90 40       	sbci	r25, 0x00	; 0
    1fc4:	a0 40       	sbci	r26, 0x00	; 0
    1fc6:	e1 f7       	brne	.-8      	; 0x1fc0 <controlSlewJointValve+0xb0>
    1fc8:	00 c0       	rjmp	.+0      	; 0x1fca <controlSlewJointValve+0xba>
    1fca:	00 00       	nop
	_delay_ms(50);

	if(pid == 0) 
    1fcc:	ff 20       	and	r15, r15
    1fce:	31 f4       	brne	.+12     	; 0x1fdc <controlSlewJointValve+0xcc>
	{
		slewJointErrorIntegral = 0;
    1fd0:	10 92 65 02 	sts	0x0265, r1
    1fd4:	10 92 64 02 	sts	0x0264, r1
		return 1;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	01 c0       	rjmp	.+2      	; 0x1fde <controlSlewJointValve+0xce>
	}
	else { return 0;}
    1fdc:	80 e0       	ldi	r24, 0x00	; 0

}
    1fde:	2f 96       	adiw	r28, 0x0f	; 15
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	de bf       	out	0x3e, r29	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	cd bf       	out	0x3d, r28	; 61
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	1f 91       	pop	r17
    1ff0:	0f 91       	pop	r16
    1ff2:	ff 90       	pop	r15
    1ff4:	ef 90       	pop	r14
    1ff6:	df 90       	pop	r13
    1ff8:	cf 90       	pop	r12
    1ffa:	bf 90       	pop	r11
    1ffc:	af 90       	pop	r10
    1ffe:	9f 90       	pop	r9
    2000:	8f 90       	pop	r8
    2002:	08 95       	ret

00002004 <getValveState>:
   valveMsg->data[2] = spoolState;

}

ValveState getValveState(can_t* valveMsg)
{
    2004:	fc 01       	movw	r30, r24
    * information. As they both cannot be larger than 0 at the same time,
    * the bigger of the two is chosen. */
   currentFlow = (extendFlow > retractFlow ? extendFlow : retractFlow);

   valve.flowPercent = currentFlow;
   valve.spoolState = valveMsg->data[3];
    2006:	91 85       	ldd	r25, Z+9	; 0x09
ValveState getValveState(can_t* valveMsg)
{
   ValveState valve;
   // Flow percent 0% == 125 and 100% == 225
   uint8_t extendFlow = valveMsg->data[0] - 125;
   uint8_t retractFlow = valveMsg->data[1] - 125;
    2008:	87 81       	ldd	r24, Z+7	; 0x07

ValveState getValveState(can_t* valveMsg)
{
   ValveState valve;
   // Flow percent 0% == 125 and 100% == 225
   uint8_t extendFlow = valveMsg->data[0] - 125;
    200a:	26 81       	ldd	r18, Z+6	; 0x06
    200c:	2d 57       	subi	r18, 0x7D	; 125
   uint8_t currentFlow = 0;

   /* CAN message from valve contains both extend and retract flow
    * information. As they both cannot be larger than 0 at the same time,
    * the bigger of the two is chosen. */
   currentFlow = (extendFlow > retractFlow ? extendFlow : retractFlow);
    200e:	8d 57       	subi	r24, 0x7D	; 125
    2010:	82 17       	cp	r24, r18
    2012:	08 f4       	brcc	.+2      	; 0x2016 <getValveState+0x12>
    2014:	82 2f       	mov	r24, r18
   valve.flowPercent = currentFlow;
   valve.spoolState = valveMsg->data[3];

   return valve;

}
    2016:	08 95       	ret

00002018 <printValveStateUART>:

void printValveStateUART(char* flowStr, char* spoolStr, ValveState* valve)
{
    2018:	ef 92       	push	r14
    201a:	ff 92       	push	r15
    201c:	0f 93       	push	r16
    201e:	1f 93       	push	r17
    2020:	cf 93       	push	r28
    2022:	df 93       	push	r29
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	27 97       	sbiw	r28, 0x07	; 7
    202a:	0f b6       	in	r0, 0x3f	; 63
    202c:	f8 94       	cli
    202e:	de bf       	out	0x3e, r29	; 62
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	cd bf       	out	0x3d, r28	; 61
    2034:	7b 01       	movw	r14, r22
    2036:	8a 01       	movw	r16, r20
	char buffer[7];
	uint8_t flowPercent = 0;
	uint8_t spoolState = 0;
	
	uart1_puts(flowStr);
    2038:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	
	flowPercent = valve->flowPercent;
	itoa(flowPercent, buffer, 10); // the parameter 10 signifies base 10        
    203c:	f8 01       	movw	r30, r16
    203e:	80 81       	ld	r24, Z
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	be 01       	movw	r22, r28
    2044:	6f 5f       	subi	r22, 0xFF	; 255
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	4a e0       	ldi	r20, 0x0A	; 10
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
    uart1_puts(buffer);
    2050:	ce 01       	movw	r24, r28
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("% \n");
    2058:	85 e4       	ldi	r24, 0x45	; 69
    205a:	91 e0       	ldi	r25, 0x01	; 1
    205c:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	
	uart1_puts(spoolStr);
    2060:	c7 01       	movw	r24, r14
    2062:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	spoolState = valve->spoolState;
	itoa(spoolState, buffer, 10); // the parameter 10 signifies base 10        
    2066:	f8 01       	movw	r30, r16
    2068:	81 81       	ldd	r24, Z+1	; 0x01
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	be 01       	movw	r22, r28
    206e:	6f 5f       	subi	r22, 0xFF	; 255
    2070:	7f 4f       	sbci	r23, 0xFF	; 255
    2072:	4a e0       	ldi	r20, 0x0A	; 10
    2074:	50 e0       	ldi	r21, 0x00	; 0
    2076:	0e 94 39 1b 	call	0x3672	; 0x3672 <itoa>
    uart1_puts(buffer);
    207a:	ce 01       	movw	r24, r28
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	uart1_puts("\n");
    2082:	83 e4       	ldi	r24, 0x43	; 67
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
}
    208a:	27 96       	adiw	r28, 0x07	; 7
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	ff 90       	pop	r15
    20a0:	ef 90       	pop	r14
    20a2:	08 95       	ret

000020a4 <_find_free_mob>:
{
	#if CAN_TX_BUFFER_SIZE == 0
	if (_free_buffer == 0)
		return 0xff;
	#elif CAN_FORCE_TX_ORDER
	if (_transmission_in_progress)
    20a4:	80 91 58 02 	lds	r24, 0x0258
    20a8:	88 23       	and	r24, r24
    20aa:	71 f4       	brne	.+28     	; 0x20c8 <_find_free_mob+0x24>
	
	uint8_t i;
	for (i = 0;i < 15;i++)
	{
		// load MOb page
		CANPAGE = i << 4;
    20ac:	98 2f       	mov	r25, r24
    20ae:	92 95       	swap	r25
    20b0:	90 7f       	andi	r25, 0xF0	; 240
    20b2:	90 93 ed 00 	sts	0x00ED, r25
		
		// check if MOb is in use
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
    20b6:	90 91 ef 00 	lds	r25, 0x00EF
    20ba:	90 7c       	andi	r25, 0xC0	; 192
    20bc:	31 f0       	breq	.+12     	; 0x20ca <_find_free_mob+0x26>
	if (_transmission_in_progress)
		return 0xff;
	#endif
	
	uint8_t i;
	for (i = 0;i < 15;i++)
    20be:	8f 5f       	subi	r24, 0xFF	; 255
    20c0:	8f 30       	cpi	r24, 0x0F	; 15
    20c2:	a1 f7       	brne	.-24     	; 0x20ac <_find_free_mob+0x8>
		// check if MOb is in use
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
			return i;
	}
	
	return 0xff;
    20c4:	8f ef       	ldi	r24, 0xFF	; 255
    20c6:	08 95       	ret
	#if CAN_TX_BUFFER_SIZE == 0
	if (_free_buffer == 0)
		return 0xff;
	#elif CAN_FORCE_TX_ORDER
	if (_transmission_in_progress)
		return 0xff;
    20c8:	8f ef       	ldi	r24, 0xFF	; 255
		if ((CANCDMOB & ((1 << CONMOB1) | (1 << CONMOB0))) == 0)
			return i;
	}
	
	return 0xff;
}
    20ca:	08 95       	ret

000020cc <_disable_mob_interrupt>:
// ----------------------------------------------------------------------------
// disable interrupt of corresponding MOb

void _disable_mob_interrupt(uint8_t mob)
{
	if (mob < 8)
    20cc:	88 30       	cpi	r24, 0x08	; 8
    20ce:	70 f4       	brcc	.+28     	; 0x20ec <_disable_mob_interrupt+0x20>
		CANIE2 &= ~(1 << mob);
    20d0:	90 91 de 00 	lds	r25, 0x00DE
    20d4:	21 e0       	ldi	r18, 0x01	; 1
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <_disable_mob_interrupt+0x12>
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	8a 95       	dec	r24
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <_disable_mob_interrupt+0xe>
    20e2:	20 95       	com	r18
    20e4:	29 23       	and	r18, r25
    20e6:	20 93 de 00 	sts	0x00DE, r18
    20ea:	08 95       	ret
	else
		CANIE1 &= ~(1 << (mob - 8));
    20ec:	40 91 df 00 	lds	r20, 0x00DF
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	08 97       	sbiw	r24, 0x08	; 8
    20f4:	21 e0       	ldi	r18, 0x01	; 1
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <_disable_mob_interrupt+0x32>
    20fa:	22 0f       	add	r18, r18
    20fc:	33 1f       	adc	r19, r19
    20fe:	8a 95       	dec	r24
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <_disable_mob_interrupt+0x2e>
    2102:	20 95       	com	r18
    2104:	24 23       	and	r18, r20
    2106:	20 93 df 00 	sts	0x00DF, r18
    210a:	08 95       	ret

0000210c <_enable_mob_interrupt>:
// ----------------------------------------------------------------------------
// enable interrupt of corresponding MOb

void _enable_mob_interrupt(uint8_t mob)
{
	if (mob < 8)
    210c:	88 30       	cpi	r24, 0x08	; 8
    210e:	68 f4       	brcc	.+26     	; 0x212a <_enable_mob_interrupt+0x1e>
		CANIE2 |= (1 << mob);
    2110:	90 91 de 00 	lds	r25, 0x00DE
    2114:	21 e0       	ldi	r18, 0x01	; 1
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	02 c0       	rjmp	.+4      	; 0x211e <_enable_mob_interrupt+0x12>
    211a:	22 0f       	add	r18, r18
    211c:	33 1f       	adc	r19, r19
    211e:	8a 95       	dec	r24
    2120:	e2 f7       	brpl	.-8      	; 0x211a <_enable_mob_interrupt+0xe>
    2122:	92 2b       	or	r25, r18
    2124:	90 93 de 00 	sts	0x00DE, r25
    2128:	08 95       	ret
	else
		CANIE1 |= (1 << (mob - 8));
    212a:	40 91 df 00 	lds	r20, 0x00DF
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	08 97       	sbiw	r24, 0x08	; 8
    2132:	21 e0       	ldi	r18, 0x01	; 1
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	02 c0       	rjmp	.+4      	; 0x213c <_enable_mob_interrupt+0x30>
    2138:	22 0f       	add	r18, r18
    213a:	33 1f       	adc	r19, r19
    213c:	8a 95       	dec	r24
    213e:	e2 f7       	brpl	.-8      	; 0x2138 <_enable_mob_interrupt+0x2c>
    2140:	42 2b       	or	r20, r18
    2142:	40 93 df 00 	sts	0x00DF, r20
    2146:	08 95       	ret

00002148 <can_init>:

// ----------------------------------------------------------------------------

bool at90can_init(uint8_t bitrate)
{
	if (bitrate >= 8)
    2148:	88 30       	cpi	r24, 0x08	; 8
    214a:	08 f0       	brcs	.+2      	; 0x214e <can_init+0x6>
    214c:	3b c0       	rjmp	.+118    	; 0x21c4 <can_init+0x7c>
		return false;
	
	// switch CAN controller to reset mode
	CANGCON |= (1 << SWRES);
    214e:	90 91 d8 00 	lds	r25, 0x00D8
    2152:	91 60       	ori	r25, 0x01	; 1
    2154:	90 93 d8 00 	sts	0x00D8, r25
	
	// set CAN Bit Timing
	// (see datasheet page 260)
	CANBT1 = pgm_read_byte(&_at90can_cnf[bitrate][0]);
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9c 01       	movw	r18, r24
    215c:	22 0f       	add	r18, r18
    215e:	33 1f       	adc	r19, r19
    2160:	28 0f       	add	r18, r24
    2162:	39 1f       	adc	r19, r25
    2164:	f9 01       	movw	r30, r18
    2166:	ef 59       	subi	r30, 0x9F	; 159
    2168:	fe 4f       	sbci	r31, 0xFE	; 254
    216a:	e4 91       	lpm	r30, Z
    216c:	e0 93 e2 00 	sts	0x00E2, r30
	CANBT2 = pgm_read_byte(&_at90can_cnf[bitrate][1]);
    2170:	f9 01       	movw	r30, r18
    2172:	ee 59       	subi	r30, 0x9E	; 158
    2174:	fe 4f       	sbci	r31, 0xFE	; 254
    2176:	e4 91       	lpm	r30, Z
    2178:	e0 93 e3 00 	sts	0x00E3, r30
	CANBT3 = pgm_read_byte(&_at90can_cnf[bitrate][2]);
    217c:	2d 59       	subi	r18, 0x9D	; 157
    217e:	3e 4f       	sbci	r19, 0xFE	; 254
    2180:	f9 01       	movw	r30, r18
    2182:	24 91       	lpm	r18, Z
    2184:	20 93 e4 00 	sts	0x00E4, r18
	
	// activate CAN transmit- and receive-interrupt
	CANGIT = 0;
    2188:	10 92 da 00 	sts	0x00DA, r1
	CANGIE = (1 << ENIT) | (1 << ENRX) | (1 << ENTX);
    218c:	80 eb       	ldi	r24, 0xB0	; 176
    218e:	80 93 db 00 	sts	0x00DB, r24
	
	// set timer prescaler to 199 which results in a timer
	// frequency of 10 kHz (at 16 MHz)
	CANTCON = 199;
    2192:	87 ec       	ldi	r24, 0xC7	; 199
    2194:	80 93 e5 00 	sts	0x00E5, r24
	
	// disable all filters
	at90can_disable_filter( 0xff );
    2198:	8f ef       	ldi	r24, 0xFF	; 255
    219a:	0e 94 74 11 	call	0x22e8	; 0x22e8 <can_disable_filter>
	
	#if CAN_RX_BUFFER_SIZE > 0
	can_buffer_init( &can_rx_buffer, CAN_RX_BUFFER_SIZE, can_rx_list );
    219e:	8e eb       	ldi	r24, 0xBE	; 190
    21a0:	93 e0       	ldi	r25, 0x03	; 3
    21a2:	60 e1       	ldi	r22, 0x10	; 16
    21a4:	4e ed       	ldi	r20, 0xDE	; 222
    21a6:	52 e0       	ldi	r21, 0x02	; 2
    21a8:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <can_buffer_init>
	#endif
	
	#if CAN_TX_BUFFER_SIZE > 0
	can_buffer_init( &can_tx_buffer, CAN_TX_BUFFER_SIZE, can_tx_list );
    21ac:	88 ed       	ldi	r24, 0xD8	; 216
    21ae:	92 e0       	ldi	r25, 0x02	; 2
    21b0:	68 e0       	ldi	r22, 0x08	; 8
    21b2:	48 e6       	ldi	r20, 0x68	; 104
    21b4:	52 e0       	ldi	r21, 0x02	; 2
    21b6:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <can_buffer_init>
	#endif
	
	// activate CAN controller
	CANGCON = (1 << ENASTB);
    21ba:	82 e0       	ldi	r24, 0x02	; 2
    21bc:	80 93 d8 00 	sts	0x00D8, r24
	
	return true;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	08 95       	ret
// ----------------------------------------------------------------------------

bool at90can_init(uint8_t bitrate)
{
	if (bitrate >= 8)
		return false;
    21c4:	80 e0       	ldi	r24, 0x00	; 0
	
	// activate CAN controller
	CANGCON = (1 << ENASTB);
	
	return true;
}
    21c6:	08 95       	ret

000021c8 <__vector_18>:
// ----------------------------------------------------------------------------
// The CANPAGE register have to be restored after usage, otherwise it
// could cause trouble in the application programm.

ISR(CANIT_vect)
{
    21c8:	1f 92       	push	r1
    21ca:	0f 92       	push	r0
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	0f 92       	push	r0
    21d0:	0b b6       	in	r0, 0x3b	; 59
    21d2:	0f 92       	push	r0
    21d4:	11 24       	eor	r1, r1
    21d6:	2f 93       	push	r18
    21d8:	3f 93       	push	r19
    21da:	4f 93       	push	r20
    21dc:	5f 93       	push	r21
    21de:	6f 93       	push	r22
    21e0:	7f 93       	push	r23
    21e2:	8f 93       	push	r24
    21e4:	9f 93       	push	r25
    21e6:	af 93       	push	r26
    21e8:	bf 93       	push	r27
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	ef 93       	push	r30
    21f0:	ff 93       	push	r31
	uint8_t canpage;
	uint8_t mob;
	
	if ((CANHPMOB & 0xF0) != 0xF0)
    21f2:	80 91 ec 00 	lds	r24, 0x00EC
    21f6:	80 7f       	andi	r24, 0xF0	; 240
    21f8:	80 3f       	cpi	r24, 0xF0	; 240
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__vector_18+0x36>
    21fc:	44 c0       	rjmp	.+136    	; 0x2286 <__vector_18+0xbe>
	{
		// save MOb page register
		canpage = CANPAGE;
    21fe:	c0 91 ed 00 	lds	r28, 0x00ED
		
		// select MOb page with the highest priority
		CANPAGE = CANHPMOB & 0xF0;
    2202:	80 91 ec 00 	lds	r24, 0x00EC
    2206:	80 7f       	andi	r24, 0xF0	; 240
    2208:	80 93 ed 00 	sts	0x00ED, r24
		mob = (CANHPMOB >> 4);
    220c:	d0 91 ec 00 	lds	r29, 0x00EC
		
		// a interrupt is only generated if a message was transmitted or received
		if (CANSTMOB & (1 << TXOK))
    2210:	80 91 ee 00 	lds	r24, 0x00EE
    2214:	86 ff       	sbrs	r24, 6
    2216:	1e c0       	rjmp	.+60     	; 0x2254 <__vector_18+0x8c>
		{
			// clear MOb
			CANSTMOB &= 0;
    2218:	80 91 ee 00 	lds	r24, 0x00EE
    221c:	10 92 ee 00 	sts	0x00EE, r1
			CANCDMOB = 0;
    2220:	10 92 ef 00 	sts	0x00EF, r1
			
			#if CAN_TX_BUFFER_SIZE > 0
			can_t *buf = can_buffer_get_dequeue_ptr(&can_tx_buffer);
    2224:	88 ed       	ldi	r24, 0xD8	; 216
    2226:	92 e0       	ldi	r25, 0x02	; 2
    2228:	0e 94 65 15 	call	0x2aca	; 0x2aca <can_buffer_get_dequeue_ptr>
			
			// check if there are any another messages waiting 
			if (buf != NULL)
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	51 f0       	breq	.+20     	; 0x2244 <__vector_18+0x7c>
			{
				at90can_copy_message_to_mob( buf );
    2230:	0e 94 a4 13 	call	0x2748	; 0x2748 <at90can_copy_message_to_mob>
				can_buffer_dequeue(&can_tx_buffer);
    2234:	88 ed       	ldi	r24, 0xD8	; 216
    2236:	92 e0       	ldi	r25, 0x02	; 2
    2238:	0e 94 82 15 	call	0x2b04	; 0x2b04 <can_buffer_dequeue>
				
				// enable transmission
				CANCDMOB |= (1<<CONMOB0);
    223c:	80 91 ef 00 	lds	r24, 0x00EF
    2240:	80 64       	ori	r24, 0x40	; 64
    2242:	1c c0       	rjmp	.+56     	; 0x227c <__vector_18+0xb4>
			}
			else {
				// buffer underflow => no more messages to send
				_disable_mob_interrupt(mob);
    2244:	8d 2f       	mov	r24, r29
    2246:	82 95       	swap	r24
    2248:	8f 70       	andi	r24, 0x0F	; 15
    224a:	0e 94 66 10 	call	0x20cc	; 0x20cc <_disable_mob_interrupt>
				_transmission_in_progress = 0;
    224e:	10 92 58 02 	sts	0x0258, r1
    2252:	16 c0       	rjmp	.+44     	; 0x2280 <__vector_18+0xb8>
			CAN_INDICATE_TX_TRAFFIC_FUNCTION;
		}
		else {
			// a message was received successfully
			#if CAN_RX_BUFFER_SIZE > 0
			can_t *buf = can_buffer_get_enqueue_ptr(&can_rx_buffer);
    2254:	8e eb       	ldi	r24, 0xBE	; 190
    2256:	93 e0       	ldi	r25, 0x03	; 3
    2258:	0e 94 39 15 	call	0x2a72	; 0x2a72 <can_buffer_get_enqueue_ptr>
			
			if (buf != NULL)
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	31 f0       	breq	.+12     	; 0x226c <__vector_18+0xa4>
			{
				// read message
				at90can_copy_mob_to_message( buf );
    2260:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <at90can_copy_mob_to_message>
				
				// push it to the list
				can_buffer_enqueue(&can_rx_buffer);
    2264:	8e eb       	ldi	r24, 0xBE	; 190
    2266:	93 e0       	ldi	r25, 0x03	; 3
    2268:	0e 94 56 15 	call	0x2aac	; 0x2aac <can_buffer_enqueue>
				// buffer overflow => reject message
				// FIXME inform the user
			}
			
			// clear flags
			CANSTMOB &= 0;
    226c:	80 91 ee 00 	lds	r24, 0x00EE
    2270:	10 92 ee 00 	sts	0x00EE, r1
			CANCDMOB = (1 << CONMOB1) | (CANCDMOB & (1 << IDE));
    2274:	80 91 ef 00 	lds	r24, 0x00EF
    2278:	80 71       	andi	r24, 0x10	; 16
    227a:	80 68       	ori	r24, 0x80	; 128
    227c:	80 93 ef 00 	sts	0x00EF, r24
			
			CAN_INDICATE_RX_TRAFFIC_FUNCTION;
		}
		
		// restore MOb page register
		CANPAGE = canpage;
    2280:	c0 93 ed 00 	sts	0x00ED, r28
    2284:	04 c0       	rjmp	.+8      	; 0x228e <__vector_18+0xc6>
	}
	else
	{
		// no MOb matches with the interrupt => general interrupt
		CANGIT |= 0;
    2286:	80 91 da 00 	lds	r24, 0x00DA
    228a:	80 93 da 00 	sts	0x00DA, r24
	}
}
    228e:	ff 91       	pop	r31
    2290:	ef 91       	pop	r30
    2292:	df 91       	pop	r29
    2294:	cf 91       	pop	r28
    2296:	bf 91       	pop	r27
    2298:	af 91       	pop	r26
    229a:	9f 91       	pop	r25
    229c:	8f 91       	pop	r24
    229e:	7f 91       	pop	r23
    22a0:	6f 91       	pop	r22
    22a2:	5f 91       	pop	r21
    22a4:	4f 91       	pop	r20
    22a6:	3f 91       	pop	r19
    22a8:	2f 91       	pop	r18
    22aa:	0f 90       	pop	r0
    22ac:	0b be       	out	0x3b, r0	; 59
    22ae:	0f 90       	pop	r0
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	0f 90       	pop	r0
    22b4:	1f 90       	pop	r1
    22b6:	18 95       	reti

000022b8 <__vector_19>:

// ----------------------------------------------------------------------------
// Overflow of CAN timer
ISR(OVRIT_vect) {}
    22b8:	1f 92       	push	r1
    22ba:	0f 92       	push	r0
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	0f 92       	push	r0
    22c0:	11 24       	eor	r1, r1
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	0f 90       	pop	r0
    22c8:	1f 90       	pop	r1
    22ca:	18 95       	reti

000022cc <can_check_message>:
	if (_messages_waiting > 0)
		return true;
	else
		return false;
	#else
	return !can_buffer_empty( &can_rx_buffer );
    22cc:	8e eb       	ldi	r24, 0xBE	; 190
    22ce:	93 e0       	ldi	r25, 0x03	; 3
    22d0:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <can_buffer_empty>
	#endif
}
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	89 27       	eor	r24, r25
    22d8:	08 95       	ret

000022da <can_check_free_buffer>:
	if (_free_buffer > 0)
		return true;
	else
		return false;
	#else
	return !can_buffer_full( &can_tx_buffer );
    22da:	88 ed       	ldi	r24, 0xD8	; 216
    22dc:	92 e0       	ldi	r25, 0x02	; 2
    22de:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <can_buffer_full>
	#endif
}
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	89 27       	eor	r24, r25
    22e6:	08 95       	ret

000022e8 <can_disable_filter>:
// ----------------------------------------------------------------------------
// disable mob

bool at90can_disable_filter(uint8_t number)
{
	if (number > 14)
    22e8:	8f 30       	cpi	r24, 0x0F	; 15
    22ea:	c8 f0       	brcs	.+50     	; 0x231e <can_disable_filter+0x36>
	{
		if (number == CAN_ALL_FILTER)
    22ec:	8f 3f       	cpi	r24, 0xFF	; 255
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <can_disable_filter+0xa>
    22f0:	4a c0       	rjmp	.+148    	; 0x2386 <can_disable_filter+0x9e>
		{
			// disable interrupts
			CANIE1 = 0;
    22f2:	10 92 df 00 	sts	0x00DF, r1
			CANIE2 = 0;
    22f6:	10 92 de 00 	sts	0x00DE, r1
			
			// disable all MObs
			for (uint8_t i = 0;i < 15;i++) {
    22fa:	80 e0       	ldi	r24, 0x00	; 0
				CANPAGE = (i << 4);
    22fc:	98 2f       	mov	r25, r24
    22fe:	92 95       	swap	r25
    2300:	90 7f       	andi	r25, 0xF0	; 240
    2302:	90 93 ed 00 	sts	0x00ED, r25
				
				// disable MOb (read-write required)
				CANCDMOB &= 0;
    2306:	90 91 ef 00 	lds	r25, 0x00EF
    230a:	10 92 ef 00 	sts	0x00EF, r1
				CANSTMOB &= 0;
    230e:	90 91 ee 00 	lds	r25, 0x00EE
    2312:	10 92 ee 00 	sts	0x00EE, r1
			// disable interrupts
			CANIE1 = 0;
			CANIE2 = 0;
			
			// disable all MObs
			for (uint8_t i = 0;i < 15;i++) {
    2316:	8f 5f       	subi	r24, 0xFF	; 255
    2318:	8f 30       	cpi	r24, 0x0F	; 15
    231a:	81 f7       	brne	.-32     	; 0x22fc <can_disable_filter+0x14>
    231c:	32 c0       	rjmp	.+100    	; 0x2382 <can_disable_filter+0x9a>
// enter standby mode => messages are not transmitted nor received

extern __attribute__ ((gnu_inline)) inline void _enter_standby_mode(void)
{
	// request abort
	CANGCON = (1 << ABRQ);
    231e:	90 e8       	ldi	r25, 0x80	; 128
    2320:	90 93 d8 00 	sts	0x00D8, r25
	
	// wait until receiver is not busy
	while (CANGSTA & (1 << RXBSY))
    2324:	90 91 d9 00 	lds	r25, 0x00D9
    2328:	93 fd       	sbrc	r25, 3
    232a:	fc cf       	rjmp	.-8      	; 0x2324 <can_disable_filter+0x3c>
		;
	
	// request standby mode
	CANGCON = 0;
    232c:	10 92 d8 00 	sts	0x00D8, r1
	
	// wait until the CAN Controller has entered standby mode
	while (CANGSTA & (1 << ENFG))
    2330:	90 91 d9 00 	lds	r25, 0x00D9
    2334:	92 fd       	sbrc	r25, 2
    2336:	fc cf       	rjmp	.-8      	; 0x2330 <can_disable_filter+0x48>
	}
	
	// set CAN Controller to standby mode
	_enter_standby_mode();
	
	CANPAGE = number << 4;
    2338:	98 2f       	mov	r25, r24
    233a:	92 95       	swap	r25
    233c:	90 7f       	andi	r25, 0xF0	; 240
    233e:	90 93 ed 00 	sts	0x00ED, r25
	
	// reset flags
	CANSTMOB &= 0;
    2342:	90 91 ee 00 	lds	r25, 0x00EE
    2346:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0;
    234a:	10 92 ef 00 	sts	0x00EF, r1
	
	_disable_mob_interrupt(number);
    234e:	0e 94 66 10 	call	0x20cc	; 0x20cc <_disable_mob_interrupt>
// leave standby mode => CAN Controller is connected to CAN Bus

extern __attribute__ ((gnu_inline)) inline void _leave_standby_mode(void)
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
    2352:	90 91 ed 00 	lds	r25, 0x00ED
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
    2356:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = i << 4;
    2358:	28 2f       	mov	r18, r24
    235a:	22 95       	swap	r18
    235c:	20 7f       	andi	r18, 0xF0	; 240
    235e:	20 93 ed 00 	sts	0x00ED, r18
		CANCDMOB = CANCDMOB;
    2362:	20 91 ef 00 	lds	r18, 0x00EF
    2366:	20 93 ef 00 	sts	0x00EF, r18
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
    236a:	8f 5f       	subi	r24, 0xFF	; 255
    236c:	8f 30       	cpi	r24, 0x0F	; 15
    236e:	a1 f7       	brne	.-24     	; 0x2358 <can_disable_filter+0x70>
		CANPAGE = i << 4;
		CANCDMOB = CANCDMOB;
	}
	
	// restore CANPAGE
	CANPAGE = canpage;
    2370:	90 93 ed 00 	sts	0x00ED, r25
	
	// request normal mode
	CANGCON = (1 << ENASTB);
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	80 93 d8 00 	sts	0x00D8, r24
	
	// wait until the CAN Controller has left standby mode
	while ((CANGSTA & (1 << ENFG)) == 0)
    237a:	80 91 d9 00 	lds	r24, 0x00D9
    237e:	82 ff       	sbrs	r24, 2
    2380:	fc cf       	rjmp	.-8      	; 0x237a <can_disable_filter+0x92>
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	08 95       	ret
			
			return true;
		}
		
		// it is only possible to serve a maximum of 15 filters
		return false;
    2386:	80 e0       	ldi	r24, 0x00	; 0
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
}
    2388:	08 95       	ret

0000238a <can_read_error_register>:
// ----------------------------------------------------------------------------
can_error_register_t at90can_read_error_register(void)
{
	can_error_register_t error;
	
	error.tx = CANTEC;
    238a:	90 91 ea 00 	lds	r25, 0x00EA
	error.rx = CANREC;
    238e:	80 91 eb 00 	lds	r24, 0x00EB
	
	return error;
}
    2392:	08 95       	ret

00002394 <can_get_message>:

#if defined(SUPPORT_FOR_AT90CAN__) && CAN_RX_BUFFER_SIZE > 0

// ----------------------------------------------------------------------------
uint8_t at90can_get_buffered_message(can_t *msg)
{
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	d8 2f       	mov	r29, r24
    239a:	c9 2f       	mov	r28, r25
	// get pointer to the first buffered message
	can_t *buf = can_buffer_get_dequeue_ptr(&can_rx_buffer);
    239c:	8e eb       	ldi	r24, 0xBE	; 190
    239e:	93 e0       	ldi	r25, 0x03	; 3
    23a0:	0e 94 65 15 	call	0x2aca	; 0x2aca <can_buffer_get_dequeue_ptr>
    23a4:	dc 01       	movw	r26, r24
	
	if (buf == NULL)
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	69 f0       	breq	.+26     	; 0x23c4 <can_get_message+0x30>
		return 0;
	
	// copy the message
	memcpy( msg, buf, sizeof(can_t) );
    23aa:	ed 2f       	mov	r30, r29
    23ac:	fc 2f       	mov	r31, r28
    23ae:	8e e0       	ldi	r24, 0x0E	; 14
    23b0:	0d 90       	ld	r0, X+
    23b2:	01 92       	st	Z+, r0
    23b4:	81 50       	subi	r24, 0x01	; 1
    23b6:	e1 f7       	brne	.-8      	; 0x23b0 <can_get_message+0x1c>
	
	// delete message from the queue
	can_buffer_dequeue(&can_rx_buffer);
    23b8:	8e eb       	ldi	r24, 0xBE	; 190
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	0e 94 82 15 	call	0x2b04	; 0x2b04 <can_buffer_dequeue>
	
	return 0xff;
    23c0:	8f ef       	ldi	r24, 0xFF	; 255
    23c2:	01 c0       	rjmp	.+2      	; 0x23c6 <can_get_message+0x32>
{
	// get pointer to the first buffered message
	can_t *buf = can_buffer_get_dequeue_ptr(&can_rx_buffer);
	
	if (buf == NULL)
		return 0;
    23c4:	80 e0       	ldi	r24, 0x00	; 0
	
	// delete message from the queue
	can_buffer_dequeue(&can_rx_buffer);
	
	return 0xff;
}
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	08 95       	ret

000023cc <can_get_filter>:
#ifdef	SUPPORT_FOR_AT90CAN__

// ----------------------------------------------------------------------------

uint8_t at90can_get_filter(uint8_t number, can_filter_t *filter)
{
    23cc:	cf 92       	push	r12
    23ce:	df 92       	push	r13
    23d0:	ef 92       	push	r14
    23d2:	ff 92       	push	r15
    23d4:	0f 93       	push	r16
    23d6:	1f 93       	push	r17
    23d8:	cf 93       	push	r28
    23da:	fb 01       	movw	r30, r22
	if (number > 14) {
    23dc:	8f 30       	cpi	r24, 0x0F	; 15
    23de:	08 f0       	brcs	.+2      	; 0x23e2 <can_get_filter+0x16>
    23e0:	de c0       	rjmp	.+444    	; 0x259e <can_get_filter+0x1d2>
		// it is only possible to serve a maximum of 15 filters
		return 0;
	}
	
	// load corresponding MOb page
	CANPAGE = number << 4;
    23e2:	82 95       	swap	r24
    23e4:	80 7f       	andi	r24, 0xF0	; 240
    23e6:	80 93 ed 00 	sts	0x00ED, r24
	
	if ((CANCDMOB & 0xc0) == 0) {
    23ea:	80 91 ef 00 	lds	r24, 0x00EF
    23ee:	80 7c       	andi	r24, 0xC0	; 192
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <can_get_filter+0x28>
    23f2:	d7 c0       	rjmp	.+430    	; 0x25a2 <can_get_filter+0x1d6>
		// MOb is currently not used.
		return 2;
	}
	else if ((CANCDMOB & 0xc0) == (1 << CONMOB1))
    23f4:	80 91 ef 00 	lds	r24, 0x00EF
    23f8:	80 7c       	andi	r24, 0xC0	; 192
    23fa:	80 38       	cpi	r24, 0x80	; 128
    23fc:	09 f0       	breq	.+2      	; 0x2400 <can_get_filter+0x34>
    23fe:	d3 c0       	rjmp	.+422    	; 0x25a6 <can_get_filter+0x1da>
	{
		// MOb is configured to receive message => read filter.
		if (CANIDM4 & (1 << RTRMSK))
    2400:	80 91 f4 00 	lds	r24, 0x00F4
    2404:	82 ff       	sbrs	r24, 2
    2406:	0a c0       	rjmp	.+20     	; 0x241c <can_get_filter+0x50>
		{
			if (CANIDT4 & (1 << RTRMSK))
    2408:	90 91 f0 00 	lds	r25, 0x00F0
    240c:	80 85       	ldd	r24, Z+8	; 0x08
    240e:	92 ff       	sbrs	r25, 2
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <can_get_filter+0x4a>
			{
				// receive only messages with RTR-bit set
				filter->flags.rtr = 0x3;
    2412:	83 60       	ori	r24, 0x03	; 3
    2414:	05 c0       	rjmp	.+10     	; 0x2420 <can_get_filter+0x54>
			}
			else {
				filter->flags.rtr = 0x2;
    2416:	8c 7f       	andi	r24, 0xFC	; 252
    2418:	82 60       	ori	r24, 0x02	; 2
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <can_get_filter+0x54>
			}
		}
		else {
			// receive all message, independent from RTR-bit
			filter->flags.rtr = 0;
    241c:	80 85       	ldd	r24, Z+8	; 0x08
    241e:	8c 7f       	andi	r24, 0xFC	; 252
    2420:	80 87       	std	Z+8, r24	; 0x08
		}
		
		#if SUPPORT_EXTENDED_CANID
		
		if ((CANIDM4 & (1 << IDEMSK)) && (CANCDMOB & (1 << IDE)))
    2422:	80 91 f4 00 	lds	r24, 0x00F4
    2426:	80 ff       	sbrs	r24, 0
    2428:	81 c0       	rjmp	.+258    	; 0x252c <can_get_filter+0x160>
    242a:	80 91 ef 00 	lds	r24, 0x00EF
    242e:	84 ff       	sbrs	r24, 4
    2430:	7d c0       	rjmp	.+250    	; 0x252c <can_get_filter+0x160>
		{
			filter->flags.extended = 0x3;
    2432:	80 85       	ldd	r24, Z+8	; 0x08
    2434:	8c 60       	ori	r24, 0x0C	; 12
    2436:	80 87       	std	Z+8, r24	; 0x08
			
			// extended id
			uint32_t mask;
			mask  = (uint8_t)  CANIDM4 >> 3;
    2438:	c0 90 f4 00 	lds	r12, 0x00F4
    243c:	c6 94       	lsr	r12
    243e:	c6 94       	lsr	r12
    2440:	c6 94       	lsr	r12
    2442:	dd 24       	eor	r13, r13
    2444:	ee 24       	eor	r14, r14
    2446:	ff 24       	eor	r15, r15
			mask |= (uint16_t) CANIDM3 << 5;
    2448:	80 91 f5 00 	lds	r24, 0x00F5
			mask |= (uint32_t) CANIDM2 << 13;
    244c:	00 91 f6 00 	lds	r16, 0x00F6
			mask |= (uint32_t) CANIDM1 << 21;
    2450:	40 91 f7 00 	lds	r20, 0x00F7
			
			// extended id
			uint32_t mask;
			mask  = (uint8_t)  CANIDM4 >> 3;
			mask |= (uint16_t) CANIDM3 << 5;
			mask |= (uint32_t) CANIDM2 << 13;
    2454:	10 e0       	ldi	r17, 0x00	; 0
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	bd e0       	ldi	r27, 0x0D	; 13
    245c:	00 0f       	add	r16, r16
    245e:	11 1f       	adc	r17, r17
    2460:	22 1f       	adc	r18, r18
    2462:	33 1f       	adc	r19, r19
    2464:	ba 95       	dec	r27
    2466:	d1 f7       	brne	.-12     	; 0x245c <can_get_filter+0x90>
			filter->flags.extended = 0x3;
			
			// extended id
			uint32_t mask;
			mask  = (uint8_t)  CANIDM4 >> 3;
			mask |= (uint16_t) CANIDM3 << 5;
    2468:	0c 29       	or	r16, r12
    246a:	1d 29       	or	r17, r13
    246c:	2e 29       	or	r18, r14
    246e:	3f 29       	or	r19, r15
			mask |= (uint32_t) CANIDM2 << 13;
			mask |= (uint32_t) CANIDM1 << 21;
    2470:	50 e0       	ldi	r21, 0x00	; 0
    2472:	60 e0       	ldi	r22, 0x00	; 0
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	c5 e1       	ldi	r28, 0x15	; 21
    2478:	44 0f       	add	r20, r20
    247a:	55 1f       	adc	r21, r21
    247c:	66 1f       	adc	r22, r22
    247e:	77 1f       	adc	r23, r23
    2480:	ca 95       	dec	r28
    2482:	d1 f7       	brne	.-12     	; 0x2478 <can_get_filter+0xac>
			
			// extended id
			uint32_t mask;
			mask  = (uint8_t)  CANIDM4 >> 3;
			mask |= (uint16_t) CANIDM3 << 5;
			mask |= (uint32_t) CANIDM2 << 13;
    2484:	04 2b       	or	r16, r20
    2486:	15 2b       	or	r17, r21
    2488:	26 2b       	or	r18, r22
    248a:	37 2b       	or	r19, r23
			filter->flags.extended = 0x3;
			
			// extended id
			uint32_t mask;
			mask  = (uint8_t)  CANIDM4 >> 3;
			mask |= (uint16_t) CANIDM3 << 5;
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	a5 e0       	ldi	r26, 0x05	; 5
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	aa 95       	dec	r26
    2496:	e1 f7       	brne	.-8      	; 0x2490 <can_get_filter+0xc4>
    2498:	a0 e0       	ldi	r26, 0x00	; 0
    249a:	b0 e0       	ldi	r27, 0x00	; 0
			mask |= (uint32_t) CANIDM2 << 13;
			mask |= (uint32_t) CANIDM1 << 21;
    249c:	08 2b       	or	r16, r24
    249e:	19 2b       	or	r17, r25
    24a0:	2a 2b       	or	r18, r26
    24a2:	3b 2b       	or	r19, r27
			
			filter->mask = mask;
    24a4:	04 83       	std	Z+4, r16	; 0x04
    24a6:	15 83       	std	Z+5, r17	; 0x05
    24a8:	26 83       	std	Z+6, r18	; 0x06
    24aa:	37 83       	std	Z+7, r19	; 0x07
			
			uint32_t id;
			id  = (uint8_t)  CANIDT4 >> 3;
    24ac:	c0 90 f0 00 	lds	r12, 0x00F0
    24b0:	c6 94       	lsr	r12
    24b2:	c6 94       	lsr	r12
    24b4:	c6 94       	lsr	r12
    24b6:	dd 24       	eor	r13, r13
    24b8:	ee 24       	eor	r14, r14
    24ba:	ff 24       	eor	r15, r15
			id |= (uint16_t) CANIDT3 << 5;
    24bc:	c0 91 f1 00 	lds	r28, 0x00F1
			id |= (uint32_t) CANIDT2 << 13;
    24c0:	80 91 f2 00 	lds	r24, 0x00F2
			id |= (uint32_t) CANIDT1 << 21;
    24c4:	40 91 f3 00 	lds	r20, 0x00F3
			filter->mask = mask;
			
			uint32_t id;
			id  = (uint8_t)  CANIDT4 >> 3;
			id |= (uint16_t) CANIDT3 << 5;
			id |= (uint32_t) CANIDT2 << 13;
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e0       	ldi	r26, 0x00	; 0
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	07 2e       	mov	r0, r23
    24d0:	7d e0       	ldi	r23, 0x0D	; 13
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	aa 1f       	adc	r26, r26
    24d8:	bb 1f       	adc	r27, r27
    24da:	7a 95       	dec	r23
    24dc:	d1 f7       	brne	.-12     	; 0x24d2 <can_get_filter+0x106>
    24de:	70 2d       	mov	r23, r0
			
			filter->mask = mask;
			
			uint32_t id;
			id  = (uint8_t)  CANIDT4 >> 3;
			id |= (uint16_t) CANIDT3 << 5;
    24e0:	8c 29       	or	r24, r12
    24e2:	9d 29       	or	r25, r13
    24e4:	ae 29       	or	r26, r14
    24e6:	bf 29       	or	r27, r15
			id |= (uint32_t) CANIDT2 << 13;
			id |= (uint32_t) CANIDT1 << 21;
    24e8:	50 e0       	ldi	r21, 0x00	; 0
    24ea:	60 e0       	ldi	r22, 0x00	; 0
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	03 2e       	mov	r0, r19
    24f0:	35 e1       	ldi	r19, 0x15	; 21
    24f2:	44 0f       	add	r20, r20
    24f4:	55 1f       	adc	r21, r21
    24f6:	66 1f       	adc	r22, r22
    24f8:	77 1f       	adc	r23, r23
    24fa:	3a 95       	dec	r19
    24fc:	d1 f7       	brne	.-12     	; 0x24f2 <can_get_filter+0x126>
    24fe:	30 2d       	mov	r19, r0
			filter->mask = mask;
			
			uint32_t id;
			id  = (uint8_t)  CANIDT4 >> 3;
			id |= (uint16_t) CANIDT3 << 5;
			id |= (uint32_t) CANIDT2 << 13;
    2500:	84 2b       	or	r24, r20
    2502:	95 2b       	or	r25, r21
    2504:	a6 2b       	or	r26, r22
    2506:	b7 2b       	or	r27, r23
			
			filter->mask = mask;
			
			uint32_t id;
			id  = (uint8_t)  CANIDT4 >> 3;
			id |= (uint16_t) CANIDT3 << 5;
    2508:	4c 2f       	mov	r20, r28
    250a:	50 e0       	ldi	r21, 0x00	; 0
    250c:	c5 e0       	ldi	r28, 0x05	; 5
    250e:	44 0f       	add	r20, r20
    2510:	55 1f       	adc	r21, r21
    2512:	ca 95       	dec	r28
    2514:	e1 f7       	brne	.-8      	; 0x250e <can_get_filter+0x142>
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	70 e0       	ldi	r23, 0x00	; 0
			id |= (uint32_t) CANIDT2 << 13;
			id |= (uint32_t) CANIDT1 << 21;
    251a:	84 2b       	or	r24, r20
    251c:	95 2b       	or	r25, r21
    251e:	a6 2b       	or	r26, r22
    2520:	b7 2b       	or	r27, r23
			
			// only the bits set in the mask are vaild for the id
			filter->id = id & mask;
    2522:	80 23       	and	r24, r16
    2524:	91 23       	and	r25, r17
    2526:	a2 23       	and	r26, r18
    2528:	b3 23       	and	r27, r19
    252a:	33 c0       	rjmp	.+102    	; 0x2592 <can_get_filter+0x1c6>
		}
		else {
			if (CANIDM4 & (1 << IDEMSK)) {
    252c:	90 91 f4 00 	lds	r25, 0x00F4
    2530:	80 85       	ldd	r24, Z+8	; 0x08
				filter->flags.extended = 0x2;
    2532:	83 7f       	andi	r24, 0xF3	; 243
			
			// only the bits set in the mask are vaild for the id
			filter->id = id & mask;
		}
		else {
			if (CANIDM4 & (1 << IDEMSK)) {
    2534:	90 fd       	sbrc	r25, 0
				filter->flags.extended = 0x2;
    2536:	88 60       	ori	r24, 0x08	; 8
			} else {
				filter->flags.extended = 0;
    2538:	80 87       	std	Z+8, r24	; 0x08
			}
			
			uint16_t mask;
			mask  = (uint8_t)  CANIDM2 >> 5;
    253a:	20 91 f6 00 	lds	r18, 0x00F6
    253e:	22 95       	swap	r18
    2540:	26 95       	lsr	r18
    2542:	27 70       	andi	r18, 0x07	; 7
    2544:	30 e0       	ldi	r19, 0x00	; 0
			mask |= (uint16_t) CANIDM1 << 3;
    2546:	80 91 f7 00 	lds	r24, 0x00F7
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	43 e0       	ldi	r20, 0x03	; 3
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	4a 95       	dec	r20
    2554:	e1 f7       	brne	.-8      	; 0x254e <can_get_filter+0x182>
    2556:	82 2b       	or	r24, r18
    2558:	93 2b       	or	r25, r19
			
			filter->mask = mask;
    255a:	ac 01       	movw	r20, r24
    255c:	60 e0       	ldi	r22, 0x00	; 0
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	44 83       	std	Z+4, r20	; 0x04
    2562:	55 83       	std	Z+5, r21	; 0x05
    2564:	66 83       	std	Z+6, r22	; 0x06
    2566:	77 83       	std	Z+7, r23	; 0x07
			
			uint16_t id;
			id  = (uint8_t)  CANIDT2 >> 5;
    2568:	40 91 f2 00 	lds	r20, 0x00F2
    256c:	42 95       	swap	r20
    256e:	46 95       	lsr	r20
    2570:	47 70       	andi	r20, 0x07	; 7
    2572:	50 e0       	ldi	r21, 0x00	; 0
			id |= (uint16_t) CANIDT1 << 3;
    2574:	20 91 f3 00 	lds	r18, 0x00F3
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	a3 e0       	ldi	r26, 0x03	; 3
    257c:	22 0f       	add	r18, r18
    257e:	33 1f       	adc	r19, r19
    2580:	aa 95       	dec	r26
    2582:	e1 f7       	brne	.-8      	; 0x257c <can_get_filter+0x1b0>
    2584:	24 2b       	or	r18, r20
    2586:	35 2b       	or	r19, r21
			
			filter->id = id & mask;
    2588:	28 23       	and	r18, r24
    258a:	39 23       	and	r19, r25
    258c:	c9 01       	movw	r24, r18
    258e:	a0 e0       	ldi	r26, 0x00	; 0
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	80 83       	st	Z, r24
    2594:	91 83       	std	Z+1, r25	; 0x01
    2596:	a2 83       	std	Z+2, r26	; 0x02
    2598:	b3 83       	std	Z+3, r27	; 0x03
		
		filter->id = id & mask;
		
		#endif
		
		return 1;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	05 c0       	rjmp	.+10     	; 0x25a8 <can_get_filter+0x1dc>

uint8_t at90can_get_filter(uint8_t number, can_filter_t *filter)
{
	if (number > 14) {
		// it is only possible to serve a maximum of 15 filters
		return 0;
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	03 c0       	rjmp	.+6      	; 0x25a8 <can_get_filter+0x1dc>
	// load corresponding MOb page
	CANPAGE = number << 4;
	
	if ((CANCDMOB & 0xc0) == 0) {
		// MOb is currently not used.
		return 2;
    25a2:	82 e0       	ldi	r24, 0x02	; 2
    25a4:	01 c0       	rjmp	.+2      	; 0x25a8 <can_get_filter+0x1dc>
		
		return 1;
	}
	
	// MOb is currently used to transmit a message.
	return 0xff;
    25a6:	8f ef       	ldi	r24, 0xFF	; 255
}
    25a8:	cf 91       	pop	r28
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	ff 90       	pop	r15
    25b0:	ef 90       	pop	r14
    25b2:	df 90       	pop	r13
    25b4:	cf 90       	pop	r12
    25b6:	08 95       	ret

000025b8 <at90can_copy_mob_to_message>:

#include "at90can_private.h"
#ifdef	SUPPORT_FOR_AT90CAN__

bool at90can_copy_mob_to_message(can_t *msg)
{
    25b8:	cf 93       	push	r28
    25ba:	df 93       	push	r29
    25bc:	00 d0       	rcall	.+0      	; 0x25be <at90can_copy_mob_to_message+0x6>
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <at90can_copy_mob_to_message+0x8>
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	fc 01       	movw	r30, r24
	// read status
	uint8_t cancdmob = CANCDMOB;
    25c6:	80 91 ef 00 	lds	r24, 0x00EF
	
	// read length
	msg->length = cancdmob & 0x0f;
    25ca:	98 2f       	mov	r25, r24
    25cc:	9f 70       	andi	r25, 0x0F	; 15
    25ce:	95 83       	std	Z+5, r25	; 0x05
	
	#if SUPPORT_EXTENDED_CANID
	
	if (cancdmob & (1 << IDE))
    25d0:	84 ff       	sbrs	r24, 4
    25d2:	1e c0       	rjmp	.+60     	; 0x2610 <at90can_copy_mob_to_message+0x58>
	{
		// extended identifier
		uint32_t tmp;
		uint8_t *ptr = (uint8_t *) &tmp;
		
		*ptr       = CANIDT4;
    25d4:	80 91 f0 00 	lds	r24, 0x00F0
    25d8:	89 83       	std	Y+1, r24	; 0x01
		*(ptr + 1) = CANIDT3;
    25da:	80 91 f1 00 	lds	r24, 0x00F1
    25de:	8a 83       	std	Y+2, r24	; 0x02
		*(ptr + 2) = CANIDT2;
    25e0:	80 91 f2 00 	lds	r24, 0x00F2
    25e4:	8b 83       	std	Y+3, r24	; 0x03
		*(ptr + 3) = CANIDT1;
    25e6:	80 91 f3 00 	lds	r24, 0x00F3
    25ea:	8c 83       	std	Y+4, r24	; 0x04
		
		msg->id = tmp >> 3;
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	ab 81       	ldd	r26, Y+3	; 0x03
    25f2:	bc 81       	ldd	r27, Y+4	; 0x04
    25f4:	53 e0       	ldi	r21, 0x03	; 3
    25f6:	b6 95       	lsr	r27
    25f8:	a7 95       	ror	r26
    25fa:	97 95       	ror	r25
    25fc:	87 95       	ror	r24
    25fe:	5a 95       	dec	r21
    2600:	d1 f7       	brne	.-12     	; 0x25f6 <at90can_copy_mob_to_message+0x3e>
    2602:	80 83       	st	Z, r24
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	a2 83       	std	Z+2, r26	; 0x02
    2608:	b3 83       	std	Z+3, r27	; 0x03
		msg->id |= (uint32_t) CANIDT3 << 5;
		msg->id |= (uint32_t) CANIDT2 << 13;
		msg->id |= (uint32_t) CANIDT1 << 21;
		*/
		
		msg->flags.extended = 1;
    260a:	84 81       	ldd	r24, Z+4	; 0x04
    260c:	82 60       	ori	r24, 0x02	; 2
    260e:	18 c0       	rjmp	.+48     	; 0x2640 <at90can_copy_mob_to_message+0x88>
	else
	{
		// standard identifier
		uint16_t id;
		
		id  = (uint8_t)  CANIDT2 >> 5;
    2610:	20 91 f2 00 	lds	r18, 0x00F2
    2614:	22 95       	swap	r18
    2616:	26 95       	lsr	r18
    2618:	27 70       	andi	r18, 0x07	; 7
    261a:	30 e0       	ldi	r19, 0x00	; 0
		id |= (uint16_t) CANIDT1 << 3;
    261c:	80 91 f3 00 	lds	r24, 0x00F3
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	43 e0       	ldi	r20, 0x03	; 3
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	4a 95       	dec	r20
    262a:	e1 f7       	brne	.-8      	; 0x2624 <at90can_copy_mob_to_message+0x6c>
    262c:	82 2b       	or	r24, r18
    262e:	93 2b       	or	r25, r19
		
		msg->id = (uint32_t) id;
    2630:	a0 e0       	ldi	r26, 0x00	; 0
    2632:	b0 e0       	ldi	r27, 0x00	; 0
    2634:	80 83       	st	Z, r24
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	a2 83       	std	Z+2, r26	; 0x02
    263a:	b3 83       	std	Z+3, r27	; 0x03
		msg->flags.extended = 0;
    263c:	84 81       	ldd	r24, Z+4	; 0x04
    263e:	8d 7f       	andi	r24, 0xFD	; 253
    2640:	84 83       	std	Z+4, r24	; 0x04
		msg->id |= (uint16_t) CANIDT1 << 3;
	}
	
	#endif
	
	if (CANIDT4 & (1 << RTRTAG)) {
    2642:	90 91 f0 00 	lds	r25, 0x00F0
    2646:	84 81       	ldd	r24, Z+4	; 0x04
    2648:	92 ff       	sbrs	r25, 2
    264a:	03 c0       	rjmp	.+6      	; 0x2652 <at90can_copy_mob_to_message+0x9a>
		msg->flags.rtr = 1;
    264c:	81 60       	ori	r24, 0x01	; 1
    264e:	84 83       	std	Z+4, r24	; 0x04
    2650:	0e c0       	rjmp	.+28     	; 0x266e <at90can_copy_mob_to_message+0xb6>
	}
	else {
		msg->flags.rtr = 0;
    2652:	8e 7f       	andi	r24, 0xFE	; 254
    2654:	84 83       	std	Z+4, r24	; 0x04
		
		// read data
		uint8_t *p = msg->data;
    2656:	cf 01       	movw	r24, r30
    2658:	06 96       	adiw	r24, 0x06	; 6
    265a:	dc 01       	movw	r26, r24
		for (uint8_t i = 0;i < msg->length;i++) {
    265c:	03 c0       	rjmp	.+6      	; 0x2664 <at90can_copy_mob_to_message+0xac>
			*p++ = CANMSG;
    265e:	20 91 fa 00 	lds	r18, 0x00FA
    2662:	2d 93       	st	X+, r18
// ----------------------------------------------------------------------------

#include "at90can_private.h"
#ifdef	SUPPORT_FOR_AT90CAN__

bool at90can_copy_mob_to_message(can_t *msg)
    2664:	3a 2f       	mov	r19, r26
    2666:	38 1b       	sub	r19, r24
	else {
		msg->flags.rtr = 0;
		
		// read data
		uint8_t *p = msg->data;
		for (uint8_t i = 0;i < msg->length;i++) {
    2668:	25 81       	ldd	r18, Z+5	; 0x05
    266a:	32 17       	cp	r19, r18
    266c:	c0 f3       	brcs	.-16     	; 0x265e <at90can_copy_mob_to_message+0xa6>
	#if SUPPORT_TIMESTAMPS
	msg->timestamp = CANSTM;
	#endif
	
	return true;
}
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	df 91       	pop	r29
    267a:	cf 91       	pop	r28
    267c:	08 95       	ret

0000267e <at90can_get_message>:

// ----------------------------------------------------------------------------

uint8_t at90can_get_message(can_t *msg)
{
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
    2684:	ec 01       	movw	r28, r24
	bool found = false;
	uint8_t mob;

	// check if there is any waiting message
	if (!at90can_check_message())
    2686:	0e 94 66 11 	call	0x22cc	; 0x22cc <can_check_message>
    268a:	88 23       	and	r24, r24
    268c:	29 f1       	breq	.+74     	; 0x26d8 <at90can_get_message+0x5a>
    268e:	10 e0       	ldi	r17, 0x00	; 0
		return 0;
	
	// find the MOb with the received message
	for (mob = 0; mob < 15; mob++)
	{
		CANPAGE = mob << 4;
    2690:	81 2f       	mov	r24, r17
    2692:	82 95       	swap	r24
    2694:	80 7f       	andi	r24, 0xF0	; 240
    2696:	80 93 ed 00 	sts	0x00ED, r24
		
		if (CANSTMOB & (1<<RXOK))
    269a:	80 91 ee 00 	lds	r24, 0x00EE
    269e:	85 ff       	sbrs	r24, 5
    26a0:	14 c0       	rjmp	.+40     	; 0x26ca <at90can_get_message+0x4c>
		{
			found = true;
			
			// clear flags
			CANSTMOB &= 0;
    26a2:	80 91 ee 00 	lds	r24, 0x00EE
    26a6:	10 92 ee 00 	sts	0x00EE, r1

	if (!found) {
		return 0;		// should never happen
	}
	
	found = at90can_copy_mob_to_message( msg );
    26aa:	ce 01       	movw	r24, r28
    26ac:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <at90can_copy_mob_to_message>
    26b0:	c8 2f       	mov	r28, r24
	_messages_waiting--;
	LEAVE_CRITICAL_SECTION;
	#endif
	
	// re-enable interrupts
	_enable_mob_interrupt( mob );
    26b2:	81 2f       	mov	r24, r17
    26b4:	0e 94 86 10 	call	0x210c	; 0x210c <_enable_mob_interrupt>
	
	// clear flags
	CANCDMOB = (1 << CONMOB1) | (CANCDMOB & (1 << IDE));
    26b8:	80 91 ef 00 	lds	r24, 0x00EF
    26bc:	80 71       	andi	r24, 0x10	; 16
    26be:	80 68       	ori	r24, 0x80	; 128
    26c0:	80 93 ef 00 	sts	0x00EF, r24
	
	if (found) {
    26c4:	cc 23       	and	r28, r28
    26c6:	29 f4       	brne	.+10     	; 0x26d2 <at90can_get_message+0x54>
    26c8:	07 c0       	rjmp	.+14     	; 0x26d8 <at90can_get_message+0x5a>
	// check if there is any waiting message
	if (!at90can_check_message())
		return 0;
	
	// find the MOb with the received message
	for (mob = 0; mob < 15; mob++)
    26ca:	1f 5f       	subi	r17, 0xFF	; 255
    26cc:	1f 30       	cpi	r17, 0x0F	; 15
    26ce:	01 f7       	brne	.-64     	; 0x2690 <at90can_get_message+0x12>
    26d0:	03 c0       	rjmp	.+6      	; 0x26d8 <at90can_get_message+0x5a>
	
	// clear flags
	CANCDMOB = (1 << CONMOB1) | (CANCDMOB & (1 << IDE));
	
	if (found) {
		return (mob + 1);
    26d2:	81 2f       	mov	r24, r17
    26d4:	8f 5f       	subi	r24, 0xFF	; 255
    26d6:	01 c0       	rjmp	.+2      	; 0x26da <at90can_get_message+0x5c>
	bool found = false;
	uint8_t mob;

	// check if there is any waiting message
	if (!at90can_check_message())
		return 0;
    26d8:	80 e0       	ldi	r24, 0x00	; 0
	}
	else {
		// only if SUPPORT_EXTENDED_CANID=0 and a extended message was received
		return 0;
	}
}
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	1f 91       	pop	r17
    26e0:	08 95       	ret

000026e2 <can_send_message>:

#include <string.h>

// -----------------------------------------------------------------------------
uint8_t at90can_send_buffered_message(const can_t *msg)
{
    26e2:	1f 93       	push	r17
    26e4:	cf 93       	push	r28
    26e6:	df 93       	push	r29
    26e8:	d8 2f       	mov	r29, r24
    26ea:	c9 2f       	mov	r28, r25
	// check if there is any free buffer left
#if CAN_FORCE_TX_ORDER
	if (_transmission_in_progress)
    26ec:	80 91 58 02 	lds	r24, 0x0258
    26f0:	88 23       	and	r24, r24
    26f2:	f1 f0       	breq	.+60     	; 0x2730 <can_send_message+0x4e>
#else
	if (_find_free_mob() == 0xff)
#endif
	{
		can_t *buf = can_buffer_get_enqueue_ptr(&can_tx_buffer); 
    26f4:	88 ed       	ldi	r24, 0xD8	; 216
    26f6:	92 e0       	ldi	r25, 0x02	; 2
    26f8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <can_buffer_get_enqueue_ptr>
    26fc:	dc 01       	movw	r26, r24
		
		if (buf == NULL)
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	e1 f0       	breq	.+56     	; 0x273a <can_send_message+0x58>
			return 0;		// buffer full
		
		// copy message to the buffer
		memcpy( buf, msg, sizeof(can_t) );
    2702:	ed 2f       	mov	r30, r29
    2704:	fc 2f       	mov	r31, r28
    2706:	8e e0       	ldi	r24, 0x0E	; 14
    2708:	01 90       	ld	r0, Z+
    270a:	0d 92       	st	X+, r0
    270c:	81 50       	subi	r24, 0x01	; 1
    270e:	e1 f7       	brne	.-8      	; 0x2708 <can_send_message+0x26>
		// Therefore interrupts have to disabled while putting the message
		// to the queue.
		bool enqueued = false;
		
#if CAN_FORCE_TX_ORDER
		ENTER_CRITICAL_SECTION;
    2710:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2712:	f8 94       	cli
		if (_transmission_in_progress)
    2714:	80 91 58 02 	lds	r24, 0x0258
    2718:	88 23       	and	r24, r24
    271a:	31 f0       	breq	.+12     	; 0x2728 <can_send_message+0x46>
		{
			can_buffer_enqueue(&can_tx_buffer);
    271c:	88 ed       	ldi	r24, 0xD8	; 216
    271e:	92 e0       	ldi	r25, 0x02	; 2
    2720:	0e 94 56 15 	call	0x2aac	; 0x2aac <can_buffer_enqueue>
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	01 c0       	rjmp	.+2      	; 0x272a <can_send_message+0x48>
		// to the queue.
		bool enqueued = false;
		
#if CAN_FORCE_TX_ORDER
		ENTER_CRITICAL_SECTION;
		if (_transmission_in_progress)
    2728:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    272a:	1f bf       	out	0x3f, r17	; 63
			enqueued = true;
		}
		LEAVE_CRITICAL_SECTION;
#endif
		
		if (enqueued) {
    272c:	88 23       	and	r24, r24
    272e:	39 f4       	brne	.+14     	; 0x273e <can_send_message+0x5c>
			return at90can_send_message( msg );
		}
	}
	else
	{
		return at90can_send_message( msg );
    2730:	8d 2f       	mov	r24, r29
    2732:	9c 2f       	mov	r25, r28
    2734:	0e 94 02 14 	call	0x2804	; 0x2804 <at90can_send_message>
    2738:	03 c0       	rjmp	.+6      	; 0x2740 <can_send_message+0x5e>
#endif
	{
		can_t *buf = can_buffer_get_enqueue_ptr(&can_tx_buffer); 
		
		if (buf == NULL)
			return 0;		// buffer full
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	01 c0       	rjmp	.+2      	; 0x2740 <can_send_message+0x5e>
		}
		LEAVE_CRITICAL_SECTION;
#endif
		
		if (enqueued) {
			return 1;
    273e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return at90can_send_message( msg );
	}
}
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	1f 91       	pop	r17
    2746:	08 95       	ret

00002748 <at90can_copy_message_to_mob>:
 * \brief	Copy data form a message in RAM to the actual registers
 * 
 * \warning this function assumes CANPAGE to be set properly before the call
 */
void at90can_copy_message_to_mob(const can_t *msg)
{
    2748:	cf 93       	push	r28
    274a:	df 93       	push	r29
    274c:	00 d0       	rcall	.+0      	; 0x274e <at90can_copy_message_to_mob+0x6>
    274e:	00 d0       	rcall	.+0      	; 0x2750 <at90can_copy_message_to_mob+0x8>
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
    2754:	fc 01       	movw	r30, r24
	// write DLC (Data Length Code)
	CANCDMOB = msg->length;
    2756:	85 81       	ldd	r24, Z+5	; 0x05
    2758:	80 93 ef 00 	sts	0x00EF, r24
	
	#if SUPPORT_EXTENDED_CANID
	
	if (msg->flags.extended) {
    275c:	84 81       	ldd	r24, Z+4	; 0x04
    275e:	81 ff       	sbrs	r24, 1
    2760:	22 c0       	rjmp	.+68     	; 0x27a6 <at90can_copy_message_to_mob+0x5e>
		// extended CAN ID
		CANCDMOB |= (1 << IDE);
    2762:	80 91 ef 00 	lds	r24, 0x00EF
    2766:	80 61       	ori	r24, 0x10	; 16
    2768:	80 93 ef 00 	sts	0x00EF, r24
		
		CANIDT4 = (uint8_t)  msg->id << 3;
    276c:	80 81       	ld	r24, Z
    276e:	88 0f       	add	r24, r24
    2770:	88 0f       	add	r24, r24
    2772:	88 0f       	add	r24, r24
    2774:	80 93 f0 00 	sts	0x00F0, r24
		
		uint32_t temp = msg->id << 3;
    2778:	80 81       	ld	r24, Z
    277a:	91 81       	ldd	r25, Z+1	; 0x01
    277c:	a2 81       	ldd	r26, Z+2	; 0x02
    277e:	b3 81       	ldd	r27, Z+3	; 0x03
    2780:	33 e0       	ldi	r19, 0x03	; 3
    2782:	88 0f       	add	r24, r24
    2784:	99 1f       	adc	r25, r25
    2786:	aa 1f       	adc	r26, r26
    2788:	bb 1f       	adc	r27, r27
    278a:	3a 95       	dec	r19
    278c:	d1 f7       	brne	.-12     	; 0x2782 <at90can_copy_message_to_mob+0x3a>
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	9a 83       	std	Y+2, r25	; 0x02
    2792:	ab 83       	std	Y+3, r26	; 0x03
    2794:	bc 83       	std	Y+4, r27	; 0x04
		uint8_t *ptr = (uint8_t *) &temp;
		
		CANIDT3 = *(ptr + 1);
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	80 93 f1 00 	sts	0x00F1, r24
		CANIDT2 = *(ptr + 2);
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT1 = *(ptr + 3);
    27a2:	8c 81       	ldd	r24, Y+4	; 0x04
    27a4:	11 c0       	rjmp	.+34     	; 0x27c8 <at90can_copy_message_to_mob+0x80>
	}
	else {
		// standard CAN ID
		CANIDT4 = 0;
    27a6:	10 92 f0 00 	sts	0x00F0, r1
		CANIDT3 = 0;
    27aa:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT2 = (uint8_t)  msg->id << 5;
    27ae:	80 81       	ld	r24, Z
    27b0:	82 95       	swap	r24
    27b2:	88 0f       	add	r24, r24
    27b4:	80 7e       	andi	r24, 0xE0	; 224
    27b6:	80 93 f2 00 	sts	0x00F2, r24
		CANIDT1 = (uint16_t) msg->id >> 3;
    27ba:	80 81       	ld	r24, Z
    27bc:	91 81       	ldd	r25, Z+1	; 0x01
    27be:	23 e0       	ldi	r18, 0x03	; 3
    27c0:	96 95       	lsr	r25
    27c2:	87 95       	ror	r24
    27c4:	2a 95       	dec	r18
    27c6:	e1 f7       	brne	.-8      	; 0x27c0 <at90can_copy_message_to_mob+0x78>
    27c8:	80 93 f3 00 	sts	0x00F3, r24
	CANIDT2 = (uint8_t)  msg->id << 5;
	CANIDT1 = (uint16_t) msg->id >> 3;
	
	#endif
	
	if (msg->flags.rtr) {
    27cc:	84 81       	ldd	r24, Z+4	; 0x04
    27ce:	80 ff       	sbrs	r24, 0
    27d0:	06 c0       	rjmp	.+12     	; 0x27de <at90can_copy_message_to_mob+0x96>
		CANIDT4 |= (1<<RTRTAG);
    27d2:	80 91 f0 00 	lds	r24, 0x00F0
    27d6:	84 60       	ori	r24, 0x04	; 4
    27d8:	80 93 f0 00 	sts	0x00F0, r24
    27dc:	0c c0       	rjmp	.+24     	; 0x27f6 <at90can_copy_message_to_mob+0xae>
	}
	else {
		const uint8_t *p = msg->data;
    27de:	cf 01       	movw	r24, r30
    27e0:	06 96       	adiw	r24, 0x06	; 6
    27e2:	dc 01       	movw	r26, r24
		for (uint8_t i = 0;i < msg->length;i++) {
    27e4:	03 c0       	rjmp	.+6      	; 0x27ec <at90can_copy_message_to_mob+0xa4>
			CANMSG = *p++;
    27e6:	2d 91       	ld	r18, X+
    27e8:	20 93 fa 00 	sts	0x00FA, r18
/**
 * \brief	Copy data form a message in RAM to the actual registers
 * 
 * \warning this function assumes CANPAGE to be set properly before the call
 */
void at90can_copy_message_to_mob(const can_t *msg)
    27ec:	3a 2f       	mov	r19, r26
    27ee:	38 1b       	sub	r19, r24
	if (msg->flags.rtr) {
		CANIDT4 |= (1<<RTRTAG);
	}
	else {
		const uint8_t *p = msg->data;
		for (uint8_t i = 0;i < msg->length;i++) {
    27f0:	25 81       	ldd	r18, Z+5	; 0x05
    27f2:	32 17       	cp	r19, r18
    27f4:	c0 f3       	brcs	.-16     	; 0x27e6 <at90can_copy_message_to_mob+0x9e>
			CANMSG = *p++;
		}
	}
}
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	08 95       	ret

00002804 <at90can_send_message>:

// ----------------------------------------------------------------------------
uint8_t at90can_send_message(const can_t *msg)
{
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	df 93       	push	r29
    280a:	ec 01       	movw	r28, r24
	// check if there is any free MOb
	uint8_t mob = _find_free_mob();
    280c:	0e 94 52 10 	call	0x20a4	; 0x20a4 <_find_free_mob>
    2810:	18 2f       	mov	r17, r24
	if (mob >= 15)
    2812:	8f 30       	cpi	r24, 0x0F	; 15
    2814:	e0 f4       	brcc	.+56     	; 0x284e <at90can_send_message+0x4a>
		return 0;
	
	// load corresponding MOb page ...
	CANPAGE = (mob << 4);
    2816:	82 95       	swap	r24
    2818:	80 7f       	andi	r24, 0xF0	; 240
    281a:	80 93 ed 00 	sts	0x00ED, r24
	
	// clear flags
	CANSTMOB &= 0;
    281e:	80 91 ee 00 	lds	r24, 0x00EE
    2822:	10 92 ee 00 	sts	0x00EE, r1
	
	// ... and copy the data
	at90can_copy_message_to_mob( msg );
    2826:	ce 01       	movw	r24, r28
    2828:	0e 94 a4 13 	call	0x2748	; 0x2748 <at90can_copy_message_to_mob>
	
	// enable interrupt
	_enable_mob_interrupt(mob);
    282c:	81 2f       	mov	r24, r17
    282e:	0e 94 86 10 	call	0x210c	; 0x210c <_enable_mob_interrupt>
	
	ENTER_CRITICAL_SECTION;
    2832:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2834:	f8 94       	cli
	#if CAN_TX_BUFFER_SIZE == 0
		_free_buffer--;
	#elif CAN_FORCE_TX_ORDER
		_transmission_in_progress = 1;
    2836:	91 e0       	ldi	r25, 0x01	; 1
    2838:	90 93 58 02 	sts	0x0258, r25
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    283c:	8f bf       	out	0x3f, r24	; 63
	#endif
	LEAVE_CRITICAL_SECTION;
	
	// enable transmission
	CANCDMOB |= (1<<CONMOB0);
    283e:	80 91 ef 00 	lds	r24, 0x00EF
    2842:	80 64       	ori	r24, 0x40	; 64
    2844:	80 93 ef 00 	sts	0x00EF, r24
	
	return (mob + 1);
    2848:	81 2f       	mov	r24, r17
    284a:	8f 5f       	subi	r24, 0xFF	; 255
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <at90can_send_message+0x4c>
uint8_t at90can_send_message(const can_t *msg)
{
	// check if there is any free MOb
	uint8_t mob = _find_free_mob();
	if (mob >= 15)
		return 0;
    284e:	80 e0       	ldi	r24, 0x00	; 0
	
	// enable transmission
	CANCDMOB |= (1<<CONMOB0);
	
	return (mob + 1);
}
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	1f 91       	pop	r17
    2856:	08 95       	ret

00002858 <can_set_filter>:
#include "uart.h"
#ifdef	SUPPORT_FOR_AT90CAN__

// ----------------------------------------------------------------------------
bool at90can_set_filter(uint8_t number, const can_filter_t *filter)
{
    2858:	fb 01       	movw	r30, r22
	if (number > 14) {
    285a:	8f 30       	cpi	r24, 0x0F	; 15
    285c:	08 f0       	brcs	.+2      	; 0x2860 <can_set_filter+0x8>
    285e:	dc c0       	rjmp	.+440    	; 0x2a18 <can_set_filter+0x1c0>
// enter standby mode => messages are not transmitted nor received

extern __attribute__ ((gnu_inline)) inline void _enter_standby_mode(void)
{
	// request abort
	CANGCON = (1 << ABRQ);
    2860:	90 e8       	ldi	r25, 0x80	; 128
    2862:	90 93 d8 00 	sts	0x00D8, r25
	
	// wait until receiver is not busy
	while (CANGSTA & (1 << RXBSY))
    2866:	90 91 d9 00 	lds	r25, 0x00D9
    286a:	93 fd       	sbrc	r25, 3
    286c:	fc cf       	rjmp	.-8      	; 0x2866 <can_set_filter+0xe>
		;
	
	// request standby mode
	CANGCON = 0;
    286e:	10 92 d8 00 	sts	0x00D8, r1
	
	// wait until the CAN Controller has entered standby mode
	while (CANGSTA & (1 << ENFG))
    2872:	90 91 d9 00 	lds	r25, 0x00D9
    2876:	92 fd       	sbrc	r25, 2
    2878:	fc cf       	rjmp	.-8      	; 0x2872 <can_set_filter+0x1a>
	}
	
	// set CAN Controller to standby mode
	_enter_standby_mode();
	
	CANPAGE = number << 4;
    287a:	98 2f       	mov	r25, r24
    287c:	92 95       	swap	r25
    287e:	90 7f       	andi	r25, 0xF0	; 240
    2880:	90 93 ed 00 	sts	0x00ED, r25
	
	CANSTMOB = 0;
    2884:	10 92 ee 00 	sts	0x00EE, r1
	CANCDMOB = 0;
    2888:	10 92 ef 00 	sts	0x00EF, r1
	
	#if SUPPORT_EXTENDED_CANID
	
	if (filter->flags.extended == 0x3)
    288c:	90 85       	ldd	r25, Z+8	; 0x08
    288e:	9c 70       	andi	r25, 0x0C	; 12
    2890:	9c 30       	cpi	r25, 0x0C	; 12
    2892:	09 f0       	breq	.+2      	; 0x2896 <can_set_filter+0x3e>
    2894:	61 c0       	rjmp	.+194    	; 0x2958 <can_set_filter+0x100>
	{
		// extended identifier
		CANIDT4 = (uint8_t)  filter->id << 3;
    2896:	90 81       	ld	r25, Z
    2898:	99 0f       	add	r25, r25
    289a:	99 0f       	add	r25, r25
    289c:	99 0f       	add	r25, r25
    289e:	90 93 f0 00 	sts	0x00F0, r25
		CANIDT3 = 			 filter->id >> 5;
    28a2:	40 81       	ld	r20, Z
    28a4:	51 81       	ldd	r21, Z+1	; 0x01
    28a6:	62 81       	ldd	r22, Z+2	; 0x02
    28a8:	73 81       	ldd	r23, Z+3	; 0x03
    28aa:	a5 e0       	ldi	r26, 0x05	; 5
    28ac:	76 95       	lsr	r23
    28ae:	67 95       	ror	r22
    28b0:	57 95       	ror	r21
    28b2:	47 95       	ror	r20
    28b4:	aa 95       	dec	r26
    28b6:	d1 f7       	brne	.-12     	; 0x28ac <can_set_filter+0x54>
    28b8:	40 93 f1 00 	sts	0x00F1, r20
		CANIDT2 =            filter->id >> 13;
    28bc:	40 81       	ld	r20, Z
    28be:	51 81       	ldd	r21, Z+1	; 0x01
    28c0:	62 81       	ldd	r22, Z+2	; 0x02
    28c2:	73 81       	ldd	r23, Z+3	; 0x03
    28c4:	bd e0       	ldi	r27, 0x0D	; 13
    28c6:	76 95       	lsr	r23
    28c8:	67 95       	ror	r22
    28ca:	57 95       	ror	r21
    28cc:	47 95       	ror	r20
    28ce:	ba 95       	dec	r27
    28d0:	d1 f7       	brne	.-12     	; 0x28c6 <can_set_filter+0x6e>
    28d2:	40 93 f2 00 	sts	0x00F2, r20
		CANIDT1 =            filter->id >> 21;
    28d6:	40 81       	ld	r20, Z
    28d8:	51 81       	ldd	r21, Z+1	; 0x01
    28da:	62 81       	ldd	r22, Z+2	; 0x02
    28dc:	73 81       	ldd	r23, Z+3	; 0x03
    28de:	95 e1       	ldi	r25, 0x15	; 21
    28e0:	76 95       	lsr	r23
    28e2:	67 95       	ror	r22
    28e4:	57 95       	ror	r21
    28e6:	47 95       	ror	r20
    28e8:	9a 95       	dec	r25
    28ea:	d1 f7       	brne	.-12     	; 0x28e0 <can_set_filter+0x88>
    28ec:	40 93 f3 00 	sts	0x00F3, r20
		
		CANIDM4 = ((uint8_t) filter->mask << 3) | (1 << IDEMSK);
    28f0:	94 81       	ldd	r25, Z+4	; 0x04
    28f2:	99 0f       	add	r25, r25
    28f4:	99 0f       	add	r25, r25
    28f6:	99 0f       	add	r25, r25
    28f8:	91 60       	ori	r25, 0x01	; 1
    28fa:	90 93 f4 00 	sts	0x00F4, r25
		CANIDM3 = 			 filter->mask >> 5;
    28fe:	44 81       	ldd	r20, Z+4	; 0x04
    2900:	55 81       	ldd	r21, Z+5	; 0x05
    2902:	66 81       	ldd	r22, Z+6	; 0x06
    2904:	77 81       	ldd	r23, Z+7	; 0x07
    2906:	25 e0       	ldi	r18, 0x05	; 5
    2908:	76 95       	lsr	r23
    290a:	67 95       	ror	r22
    290c:	57 95       	ror	r21
    290e:	47 95       	ror	r20
    2910:	2a 95       	dec	r18
    2912:	d1 f7       	brne	.-12     	; 0x2908 <can_set_filter+0xb0>
    2914:	40 93 f5 00 	sts	0x00F5, r20
		CANIDM2 =            filter->mask >> 13;
    2918:	44 81       	ldd	r20, Z+4	; 0x04
    291a:	55 81       	ldd	r21, Z+5	; 0x05
    291c:	66 81       	ldd	r22, Z+6	; 0x06
    291e:	77 81       	ldd	r23, Z+7	; 0x07
    2920:	3d e0       	ldi	r19, 0x0D	; 13
    2922:	76 95       	lsr	r23
    2924:	67 95       	ror	r22
    2926:	57 95       	ror	r21
    2928:	47 95       	ror	r20
    292a:	3a 95       	dec	r19
    292c:	d1 f7       	brne	.-12     	; 0x2922 <can_set_filter+0xca>
    292e:	40 93 f6 00 	sts	0x00F6, r20
		CANIDM1 =            filter->mask >> 21;
    2932:	44 81       	ldd	r20, Z+4	; 0x04
    2934:	55 81       	ldd	r21, Z+5	; 0x05
    2936:	66 81       	ldd	r22, Z+6	; 0x06
    2938:	77 81       	ldd	r23, Z+7	; 0x07
    293a:	a5 e1       	ldi	r26, 0x15	; 21
    293c:	76 95       	lsr	r23
    293e:	67 95       	ror	r22
    2940:	57 95       	ror	r21
    2942:	47 95       	ror	r20
    2944:	aa 95       	dec	r26
    2946:	d1 f7       	brne	.-12     	; 0x293c <can_set_filter+0xe4>
    2948:	40 93 f7 00 	sts	0x00F7, r20
		
		CANCDMOB |= (1 << IDE);
    294c:	90 91 ef 00 	lds	r25, 0x00EF
    2950:	90 61       	ori	r25, 0x10	; 16
    2952:	90 93 ef 00 	sts	0x00EF, r25
    2956:	2d c0       	rjmp	.+90     	; 0x29b2 <can_set_filter+0x15a>
	}
	else {
		CANIDT4 = 0;
    2958:	10 92 f0 00 	sts	0x00F0, r1
		CANIDT3 = 0;
    295c:	10 92 f1 00 	sts	0x00F1, r1
		CANIDT2 = (uint8_t)  filter->id << 5;
    2960:	90 81       	ld	r25, Z
    2962:	92 95       	swap	r25
    2964:	99 0f       	add	r25, r25
    2966:	90 7e       	andi	r25, 0xE0	; 224
    2968:	90 93 f2 00 	sts	0x00F2, r25
		CANIDT1 = (uint16_t) filter->id >> 3;
    296c:	20 81       	ld	r18, Z
    296e:	31 81       	ldd	r19, Z+1	; 0x01
    2970:	43 e0       	ldi	r20, 0x03	; 3
    2972:	36 95       	lsr	r19
    2974:	27 95       	ror	r18
    2976:	4a 95       	dec	r20
    2978:	e1 f7       	brne	.-8      	; 0x2972 <can_set_filter+0x11a>
    297a:	20 93 f3 00 	sts	0x00F3, r18
		
		if (filter->flags.extended) {
    297e:	90 85       	ldd	r25, Z+8	; 0x08
    2980:	9c 70       	andi	r25, 0x0C	; 12
    2982:	21 f0       	breq	.+8      	; 0x298c <can_set_filter+0x134>
			CANIDM4 = (1 << IDEMSK);		// receive only standard frames
    2984:	91 e0       	ldi	r25, 0x01	; 1
    2986:	90 93 f4 00 	sts	0x00F4, r25
    298a:	02 c0       	rjmp	.+4      	; 0x2990 <can_set_filter+0x138>
		} else {
			CANIDM4 = 0;					// receive all frames
    298c:	10 92 f4 00 	sts	0x00F4, r1
		}
		
		CANIDM3 = 0;
    2990:	10 92 f5 00 	sts	0x00F5, r1
		CANIDM2 = (uint8_t)  filter->mask << 5;
    2994:	94 81       	ldd	r25, Z+4	; 0x04
    2996:	92 95       	swap	r25
    2998:	99 0f       	add	r25, r25
    299a:	90 7e       	andi	r25, 0xE0	; 224
    299c:	90 93 f6 00 	sts	0x00F6, r25
		CANIDM1 = (uint16_t) filter->mask >> 3;
    29a0:	24 81       	ldd	r18, Z+4	; 0x04
    29a2:	35 81       	ldd	r19, Z+5	; 0x05
    29a4:	93 e0       	ldi	r25, 0x03	; 3
    29a6:	36 95       	lsr	r19
    29a8:	27 95       	ror	r18
    29aa:	9a 95       	dec	r25
    29ac:	e1 f7       	brne	.-8      	; 0x29a6 <can_set_filter+0x14e>
    29ae:	20 93 f7 00 	sts	0x00F7, r18
	CANIDM2 = (uint8_t)  filter->mask << 5;
	CANIDM1 = (uint16_t) filter->mask >> 3;
	
	#endif
	
	if (filter->flags.rtr & 0x2) {
    29b2:	90 85       	ldd	r25, Z+8	; 0x08
    29b4:	93 70       	andi	r25, 0x03	; 3
    29b6:	91 ff       	sbrs	r25, 1
    29b8:	0e c0       	rjmp	.+28     	; 0x29d6 <can_set_filter+0x17e>
		CANIDM4 |= (1 << RTRMSK);
    29ba:	90 91 f4 00 	lds	r25, 0x00F4
    29be:	94 60       	ori	r25, 0x04	; 4
    29c0:	90 93 f4 00 	sts	0x00F4, r25
		
		if (filter->flags.rtr & 0x1)
    29c4:	90 85       	ldd	r25, Z+8	; 0x08
    29c6:	93 70       	andi	r25, 0x03	; 3
    29c8:	90 ff       	sbrs	r25, 0
    29ca:	05 c0       	rjmp	.+10     	; 0x29d6 <can_set_filter+0x17e>
			CANIDT4 |= (1 << RTRMSK);		// only RTR-frames
    29cc:	90 91 f0 00 	lds	r25, 0x00F0
    29d0:	94 60       	ori	r25, 0x04	; 4
    29d2:	90 93 f0 00 	sts	0x00F0, r25
	}
	
	CANCDMOB |= (1<<CONMOB1);
    29d6:	90 91 ef 00 	lds	r25, 0x00EF
    29da:	90 68       	ori	r25, 0x80	; 128
    29dc:	90 93 ef 00 	sts	0x00EF, r25
	
	_enable_mob_interrupt(number);
    29e0:	0e 94 86 10 	call	0x210c	; 0x210c <_enable_mob_interrupt>
// leave standby mode => CAN Controller is connected to CAN Bus

extern __attribute__ ((gnu_inline)) inline void _leave_standby_mode(void)
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
    29e4:	90 91 ed 00 	lds	r25, 0x00ED
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
    29e8:	80 e0       	ldi	r24, 0x00	; 0
		CANPAGE = i << 4;
    29ea:	28 2f       	mov	r18, r24
    29ec:	22 95       	swap	r18
    29ee:	20 7f       	andi	r18, 0xF0	; 240
    29f0:	20 93 ed 00 	sts	0x00ED, r18
		CANCDMOB = CANCDMOB;
    29f4:	20 91 ef 00 	lds	r18, 0x00EF
    29f8:	20 93 ef 00 	sts	0x00EF, r18
{
	// save CANPAGE register
	uint8_t canpage = CANPAGE;
	
	// reenable all MObs
	for (uint8_t i=0;i<15;i++) {
    29fc:	8f 5f       	subi	r24, 0xFF	; 255
    29fe:	8f 30       	cpi	r24, 0x0F	; 15
    2a00:	a1 f7       	brne	.-24     	; 0x29ea <can_set_filter+0x192>
		CANPAGE = i << 4;
		CANCDMOB = CANCDMOB;
	}
	
	// restore CANPAGE
	CANPAGE = canpage;
    2a02:	90 93 ed 00 	sts	0x00ED, r25
	
	// request normal mode
	CANGCON = (1 << ENASTB);
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	80 93 d8 00 	sts	0x00D8, r24
	
	// wait until the CAN Controller has left standby mode
	while ((CANGSTA & (1 << ENFG)) == 0)
    2a0c:	80 91 d9 00 	lds	r24, 0x00D9
    2a10:	82 ff       	sbrs	r24, 2
    2a12:	fc cf       	rjmp	.-8      	; 0x2a0c <can_set_filter+0x1b4>
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	08 95       	ret
// ----------------------------------------------------------------------------
bool at90can_set_filter(uint8_t number, const can_filter_t *filter)
{
	if (number > 14) {
		// it is only possible to serve a maximum of 15 filters
		return false;
    2a18:	80 e0       	ldi	r24, 0x00	; 0
	
	// re-enable CAN Controller 
	_leave_standby_mode();
	
	return true;
}
    2a1a:	08 95       	ret

00002a1c <can_set_mode>:
#ifdef	SUPPORT_FOR_AT90CAN__

// ----------------------------------------------------------------------------
void at90can_set_mode(can_mode_t mode)
{
	if (mode == LISTEN_ONLY_MODE || mode == LOOPBACK_MODE) {
    2a1c:	82 30       	cpi	r24, 0x02	; 2
    2a1e:	20 f4       	brcc	.+8      	; 0x2a28 <can_set_mode+0xc>
		CANGCON |= (1<<LISTEN);
    2a20:	80 91 d8 00 	lds	r24, 0x00D8
    2a24:	88 60       	ori	r24, 0x08	; 8
    2a26:	03 c0       	rjmp	.+6      	; 0x2a2e <can_set_mode+0x12>
	}
	else {
		CANGCON &= ~(1<<LISTEN);
    2a28:	80 91 d8 00 	lds	r24, 0x00D8
    2a2c:	87 7f       	andi	r24, 0xF7	; 247
    2a2e:	80 93 d8 00 	sts	0x00D8, r24
    2a32:	08 95       	ret

00002a34 <can_buffer_init>:

#if CAN_RX_BUFFER_SIZE > 0 || CAN_TX_BUFFER_SIZE > 0

// -----------------------------------------------------------------------------
void can_buffer_init(can_buffer_t *buf, uint8_t size, can_t *list)
{
    2a34:	fc 01       	movw	r30, r24
	ENTER_CRITICAL_SECTION;
    2a36:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a38:	f8 94       	cli
	buf->size = size;
    2a3a:	62 83       	std	Z+2, r22	; 0x02
	buf->buf = list;
    2a3c:	51 83       	std	Z+1, r21	; 0x01
    2a3e:	40 83       	st	Z, r20
	
	buf->head = 0;
    2a40:	14 82       	std	Z+4, r1	; 0x04
	buf->tail = 0;
    2a42:	15 82       	std	Z+5, r1	; 0x05
	buf->used = 0;
    2a44:	13 82       	std	Z+3, r1	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a46:	8f bf       	out	0x3f, r24	; 63
	LEAVE_CRITICAL_SECTION;
}
    2a48:	08 95       	ret

00002a4a <can_buffer_empty>:
// -----------------------------------------------------------------------------
bool can_buffer_empty(can_buffer_t *buf)
{
	uint8_t used;
	
	ENTER_CRITICAL_SECTION;
    2a4a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a4c:	f8 94       	cli
	used = buf->used;
    2a4e:	fc 01       	movw	r30, r24
    2a50:	93 81       	ldd	r25, Z+3	; 0x03
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a52:	2f bf       	out	0x3f, r18	; 63
	buf->used = 0;
	LEAVE_CRITICAL_SECTION;
}

// -----------------------------------------------------------------------------
bool can_buffer_empty(can_buffer_t *buf)
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	91 11       	cpse	r25, r1
    2a58:	80 e0       	ldi	r24, 0x00	; 0
	
	if (used == 0)
		return true;
	else
		return false;
}
    2a5a:	08 95       	ret

00002a5c <can_buffer_full>:

// -----------------------------------------------------------------------------
bool can_buffer_full(can_buffer_t *buf)
{
    2a5c:	fc 01       	movw	r30, r24
	uint8_t used;
	uint8_t size;
	
	ENTER_CRITICAL_SECTION;
    2a5e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2a60:	f8 94       	cli
	used = buf->used;
    2a62:	23 81       	ldd	r18, Z+3	; 0x03
	size = buf->size;
    2a64:	92 81       	ldd	r25, Z+2	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2a66:	8f bf       	out	0x3f, r24	; 63
	else
		return false;
}

// -----------------------------------------------------------------------------
bool can_buffer_full(can_buffer_t *buf)
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	29 17       	cp	r18, r25
    2a6c:	08 f4       	brcc	.+2      	; 0x2a70 <can_buffer_full+0x14>
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
	
	if (used >= size)
		return true;
	else
		return false;
}
    2a70:	08 95       	ret

00002a72 <can_buffer_get_enqueue_ptr>:

// -----------------------------------------------------------------------------
can_t *can_buffer_get_enqueue_ptr(can_buffer_t *buf)
{
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	ec 01       	movw	r28, r24
	if (can_buffer_full( buf ))
    2a78:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <can_buffer_full>
    2a7c:	88 23       	and	r24, r24
    2a7e:	89 f4       	brne	.+34     	; 0x2aa2 <can_buffer_get_enqueue_ptr+0x30>
		return NULL;
	
	return &buf->buf[buf->head];
    2a80:	8c 81       	ldd	r24, Y+4	; 0x04
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	9c 01       	movw	r18, r24
    2a8a:	43 e0       	ldi	r20, 0x03	; 3
    2a8c:	22 0f       	add	r18, r18
    2a8e:	33 1f       	adc	r19, r19
    2a90:	4a 95       	dec	r20
    2a92:	e1 f7       	brne	.-8      	; 0x2a8c <can_buffer_get_enqueue_ptr+0x1a>
    2a94:	28 1b       	sub	r18, r24
    2a96:	39 0b       	sbc	r19, r25
    2a98:	88 81       	ld	r24, Y
    2a9a:	99 81       	ldd	r25, Y+1	; 0x01
    2a9c:	82 0f       	add	r24, r18
    2a9e:	93 1f       	adc	r25, r19
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <can_buffer_get_enqueue_ptr+0x34>

// -----------------------------------------------------------------------------
can_t *can_buffer_get_enqueue_ptr(can_buffer_t *buf)
{
	if (can_buffer_full( buf ))
		return NULL;
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
	
	return &buf->buf[buf->head];
}
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	08 95       	ret

00002aac <can_buffer_enqueue>:

// -----------------------------------------------------------------------------
void can_buffer_enqueue(can_buffer_t *buf)
{
    2aac:	fc 01       	movw	r30, r24
	ENTER_CRITICAL_SECTION;
    2aae:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ab0:	f8 94       	cli
	buf->used ++;
    2ab2:	83 81       	ldd	r24, Z+3	; 0x03
    2ab4:	8f 5f       	subi	r24, 0xFF	; 255
    2ab6:	83 83       	std	Z+3, r24	; 0x03
	if (++buf->head >= buf->size)
    2ab8:	84 81       	ldd	r24, Z+4	; 0x04
    2aba:	8f 5f       	subi	r24, 0xFF	; 255
    2abc:	84 83       	std	Z+4, r24	; 0x04
    2abe:	22 81       	ldd	r18, Z+2	; 0x02
    2ac0:	82 17       	cp	r24, r18
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <can_buffer_enqueue+0x1a>
		buf->head = 0;
    2ac4:	14 82       	std	Z+4, r1	; 0x04
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ac6:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_SECTION;
}
    2ac8:	08 95       	ret

00002aca <can_buffer_get_dequeue_ptr>:

// -----------------------------------------------------------------------------
can_t *can_buffer_get_dequeue_ptr(can_buffer_t *buf)
{
    2aca:	cf 93       	push	r28
    2acc:	df 93       	push	r29
    2ace:	ec 01       	movw	r28, r24
	if (can_buffer_empty( buf ))
    2ad0:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <can_buffer_empty>
    2ad4:	88 23       	and	r24, r24
    2ad6:	89 f4       	brne	.+34     	; 0x2afa <can_buffer_get_dequeue_ptr+0x30>
		return NULL;
	
	return &buf->buf[buf->tail];
    2ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	88 0f       	add	r24, r24
    2ade:	99 1f       	adc	r25, r25
    2ae0:	9c 01       	movw	r18, r24
    2ae2:	63 e0       	ldi	r22, 0x03	; 3
    2ae4:	22 0f       	add	r18, r18
    2ae6:	33 1f       	adc	r19, r19
    2ae8:	6a 95       	dec	r22
    2aea:	e1 f7       	brne	.-8      	; 0x2ae4 <can_buffer_get_dequeue_ptr+0x1a>
    2aec:	28 1b       	sub	r18, r24
    2aee:	39 0b       	sbc	r19, r25
    2af0:	88 81       	ld	r24, Y
    2af2:	99 81       	ldd	r25, Y+1	; 0x01
    2af4:	82 0f       	add	r24, r18
    2af6:	93 1f       	adc	r25, r19
    2af8:	02 c0       	rjmp	.+4      	; 0x2afe <can_buffer_get_dequeue_ptr+0x34>

// -----------------------------------------------------------------------------
can_t *can_buffer_get_dequeue_ptr(can_buffer_t *buf)
{
	if (can_buffer_empty( buf ))
		return NULL;
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e0       	ldi	r25, 0x00	; 0
	
	return &buf->buf[buf->tail];
}
    2afe:	df 91       	pop	r29
    2b00:	cf 91       	pop	r28
    2b02:	08 95       	ret

00002b04 <can_buffer_dequeue>:

// -----------------------------------------------------------------------------
void can_buffer_dequeue(can_buffer_t *buf)
{
    2b04:	fc 01       	movw	r30, r24
	ENTER_CRITICAL_SECTION;
    2b06:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2b08:	f8 94       	cli
	buf->used --;
    2b0a:	83 81       	ldd	r24, Z+3	; 0x03
    2b0c:	81 50       	subi	r24, 0x01	; 1
    2b0e:	83 83       	std	Z+3, r24	; 0x03
	if (++buf->tail >= buf->size)
    2b10:	85 81       	ldd	r24, Z+5	; 0x05
    2b12:	8f 5f       	subi	r24, 0xFF	; 255
    2b14:	85 83       	std	Z+5, r24	; 0x05
    2b16:	22 81       	ldd	r18, Z+2	; 0x02
    2b18:	82 17       	cp	r24, r18
    2b1a:	08 f0       	brcs	.+2      	; 0x2b1e <can_buffer_dequeue+0x1a>
		buf->tail = 0;
    2b1c:	15 82       	std	Z+5, r1	; 0x05
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2b1e:	9f bf       	out	0x3f, r25	; 63
	LEAVE_CRITICAL_SECTION;
}
    2b20:	08 95       	ret

00002b22 <main>:
uint8_t f_heartbeat = 0;
uint8_t f_ctrl = 0;


int main(void)
{
    2b22:	cf 93       	push	r28
    2b24:	df 93       	push	r29
    2b26:	cd b7       	in	r28, 0x3d	; 61
    2b28:	de b7       	in	r29, 0x3e	; 62
    2b2a:	c6 54       	subi	r28, 0x46	; 70
    2b2c:	d0 40       	sbci	r29, 0x00	; 0
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61

	// ------------------------------------------------------------
	// Misc CPU registers
	// ------------------------------------------------------------	  
	__asm__("sei");   				// Global interrupt enable
    2b38:	78 94       	sei

	WDTCR = (1<<WDCE) | (1<<WDE); 	// Watchdog disable
    2b3a:	88 e1       	ldi	r24, 0x18	; 24
    2b3c:	80 93 60 00 	sts	0x0060, r24
	WDTCR = 0x00;
    2b40:	10 92 60 00 	sts	0x0060, r1
	/*
	 ******* Initialization functions *******
	 */
	
	// Initialize microcontroller ports
	initPorts();
    2b44:	0e 94 90 01 	call	0x320	; 0x320 <initPorts>
	
	// Initialize the UART library
    uart1_init( UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU) );
    2b48:	83 e0       	ldi	r24, 0x03	; 3
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	0e 94 c5 0b 	call	0x178a	; 0x178a <uart1_init>
	
	// Initialize CAN controller
	initCAN();
    2b50:	0e 94 a0 01 	call	0x340	; 0x340 <initCAN>
	
	// Initialize ADC	
	initADC();
    2b54:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <initADC>

	// Initialize resolvers to operational state
	sendResolverNMTMessage();
    2b58:	0e 94 26 0c 	call	0x184c	; 0x184c <sendResolverNMTMessage>
	
	can_t receiveMsg;
	for(uint8_t i=0; i < 8; i++)
	{
		receiveMsg.data[i] = 0x00;
    2b5c:	1f a6       	lds	r17, 0xbf
    2b5e:	18 aa       	sts	0x98, r17
    2b60:	19 aa       	sts	0x99, r17
    2b62:	1a aa       	sts	0x9a, r17
    2b64:	1b aa       	sts	0x9b, r17
    2b66:	1c aa       	sts	0x9c, r17
    2b68:	1d aa       	sts	0x9d, r17
    2b6a:	1e aa       	sts	0x9e, r17
	uint8_t c;
	char buffer[7];
    int16_t  num=134;
    
    // Transmit string to UART
    uart1_puts("Program start!\n");
    2b6c:	85 e2       	ldi	r24, 0x25	; 37
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart1_puts>
	
	float th1,th2,th3,th4;
	Waypoint wp;
	wp.x = 0;
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	dc 01       	movw	r26, r24
    2b7a:	8f ab       	sts	0x5f, r24
    2b7c:	98 af       	sts	0x78, r25
    2b7e:	a9 af       	sts	0x79, r26
    2b80:	ba af       	sts	0x7a, r27
	wp.y = 1.3;
    2b82:	86 e6       	ldi	r24, 0x66	; 102
    2b84:	96 e6       	ldi	r25, 0x66	; 102
    2b86:	a6 ea       	ldi	r26, 0xA6	; 166
    2b88:	bf e3       	ldi	r27, 0x3F	; 63
    2b8a:	8b af       	sts	0x7b, r24
    2b8c:	9c af       	sts	0x7c, r25
    2b8e:	ad af       	sts	0x7d, r26
    2b90:	be af       	sts	0x7e, r27
	wp.z = 0.7;
    2b92:	83 e3       	ldi	r24, 0x33	; 51
    2b94:	93 e3       	ldi	r25, 0x33	; 51
    2b96:	a3 e3       	ldi	r26, 0x33	; 51
    2b98:	bf e3       	ldi	r27, 0x3F	; 63
    2b9a:	23 96       	adiw	r28, 0x03	; 3
    2b9c:	8c af       	sts	0x7c, r24
    2b9e:	9d af       	sts	0x7d, r25
    2ba0:	ae af       	sts	0x7e, r26
    2ba2:	bf af       	sts	0x7f, r27
    2ba4:	23 97       	sbiw	r28, 0x03	; 3
	wp.thdg = M_PI/2;
    2ba6:	8b ed       	ldi	r24, 0xDB	; 219
    2ba8:	9f e0       	ldi	r25, 0x0F	; 15
    2baa:	a9 ec       	ldi	r26, 0xC9	; 201
    2bac:	bf e3       	ldi	r27, 0x3F	; 63
    2bae:	27 96       	adiw	r28, 0x07	; 7
    2bb0:	8c af       	sts	0x7c, r24
    2bb2:	9d af       	sts	0x7d, r25
    2bb4:	ae af       	sts	0x7e, r26
    2bb6:	bf af       	sts	0x7f, r27
    2bb8:	27 97       	sbiw	r28, 0x07	; 7
	calculateJointAngles(&wp, &th1, &th2, &th3, &th4);        
    2bba:	ce 01       	movw	r24, r28
    2bbc:	c7 96       	adiw	r24, 0x37	; 55
    2bbe:	be 01       	movw	r22, r28
    2bc0:	69 5e       	subi	r22, 0xE9	; 233
    2bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc4:	ae 01       	movw	r20, r28
    2bc6:	4d 5e       	subi	r20, 0xED	; 237
    2bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    2bca:	9e 01       	movw	r18, r28
    2bcc:	21 5f       	subi	r18, 0xF1	; 241
    2bce:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd0:	8e 01       	movw	r16, r28
    2bd2:	05 5f       	subi	r16, 0xF5	; 245
    2bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <calculateJointAngles>
    2bda:	e4 e6       	ldi	r30, 0x64	; 100
    2bdc:	ee 2e       	mov	r14, r30
	uint8_t bucketReachedReference = 0;
	
	can_t valveCtrlMsg;
	for(uint8_t i=0; i<100; i++)
	{
		setValveMsg(&valveCtrlMsg, 0, 0x00, SLEW_JOINT_VALVE_CTRLMSG_ID);
    2bde:	ce 01       	movw	r24, r28
    2be0:	4b 96       	adiw	r24, 0x1b	; 27
    2be2:	60 e0       	ldi	r22, 0x00	; 0
    2be4:	40 e0       	ldi	r20, 0x00	; 0
    2be6:	06 e0       	ldi	r16, 0x06	; 6
    2be8:	11 e3       	ldi	r17, 0x31	; 49
    2bea:	2e ef       	ldi	r18, 0xFE	; 254
    2bec:	3c e0       	ldi	r19, 0x0C	; 12
    2bee:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <setValveMsg>
		can_send_message(&valveCtrlMsg);
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	4b 96       	adiw	r24, 0x1b	; 27
    2bf6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <can_send_message>
		setValveMsg(&valveCtrlMsg, 0, 0x00, BOOM_JOINT_VALVE_CTRLMSG_ID);
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	4b 96       	adiw	r24, 0x1b	; 27
    2bfe:	60 e0       	ldi	r22, 0x00	; 0
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	06 e0       	ldi	r16, 0x06	; 6
    2c04:	13 e3       	ldi	r17, 0x33	; 51
    2c06:	2e ef       	ldi	r18, 0xFE	; 254
    2c08:	3c e0       	ldi	r19, 0x0C	; 12
    2c0a:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <setValveMsg>
		can_send_message(&valveCtrlMsg);
    2c0e:	ce 01       	movw	r24, r28
    2c10:	4b 96       	adiw	r24, 0x1b	; 27
    2c12:	0e 94 71 13 	call	0x26e2	; 0x26e2 <can_send_message>
		setValveMsg(&valveCtrlMsg, 0, 0x00, ARM_JOINT_VALVE_CTRLMSG_ID);
    2c16:	ce 01       	movw	r24, r28
    2c18:	4b 96       	adiw	r24, 0x1b	; 27
    2c1a:	60 e0       	ldi	r22, 0x00	; 0
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	06 e0       	ldi	r16, 0x06	; 6
    2c20:	15 e3       	ldi	r17, 0x35	; 53
    2c22:	2e ef       	ldi	r18, 0xFE	; 254
    2c24:	3c e0       	ldi	r19, 0x0C	; 12
    2c26:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <setValveMsg>
		can_send_message(&valveCtrlMsg);
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	4b 96       	adiw	r24, 0x1b	; 27
    2c2e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <can_send_message>
		setValveMsg(&valveCtrlMsg, 0, 0x00, BUCKET_JOINT_VALVE_CTRLMSG_ID);
    2c32:	ce 01       	movw	r24, r28
    2c34:	4b 96       	adiw	r24, 0x1b	; 27
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	40 e0       	ldi	r20, 0x00	; 0
    2c3a:	06 e0       	ldi	r16, 0x06	; 6
    2c3c:	14 e3       	ldi	r17, 0x34	; 52
    2c3e:	2e ef       	ldi	r18, 0xFE	; 254
    2c40:	3c e0       	ldi	r19, 0x0C	; 12
    2c42:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <setValveMsg>
		can_send_message(&valveCtrlMsg);
    2c46:	ce 01       	movw	r24, r28
    2c48:	4b 96       	adiw	r24, 0x1b	; 27
    2c4a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <can_send_message>
    2c4e:	8f ef       	ldi	r24, 0xFF	; 255
    2c50:	90 e7       	ldi	r25, 0x70	; 112
    2c52:	a2 e0       	ldi	r26, 0x02	; 2
    2c54:	81 50       	subi	r24, 0x01	; 1
    2c56:	90 40       	sbci	r25, 0x00	; 0
    2c58:	a0 40       	sbci	r26, 0x00	; 0
    2c5a:	e1 f7       	brne	.-8      	; 0x2c54 <main+0x132>
    2c5c:	00 c0       	rjmp	.+0      	; 0x2c5e <main+0x13c>
    2c5e:	00 00       	nop
    2c60:	ea 94       	dec	r14
	uint8_t boomReachedReference = 0;
	uint8_t armReachedReference = 0;
	uint8_t bucketReachedReference = 0;
	
	can_t valveCtrlMsg;
	for(uint8_t i=0; i<100; i++)
    2c62:	09 f0       	breq	.+2      	; 0x2c66 <main+0x144>
    2c64:	bc cf       	rjmp	.-136    	; 0x2bde <main+0xbc>
		if (can_check_message())
		{
			can_get_message(&receiveMsg);
			resolverId = receiveMsg.id;
			
			int16_t angle = 15;
    2c66:	0f e0       	ldi	r16, 0x0F	; 15
    2c68:	10 e0       	ldi	r17, 0x00	; 0
			int16_t slew = -20;
    2c6a:	8c ee       	ldi	r24, 0xEC	; 236
    2c6c:	e8 2e       	mov	r14, r24
    2c6e:	8f ef       	ldi	r24, 0xFF	; 255
    2c70:	f8 2e       	mov	r15, r24
			int16_t boom = 40;
    2c72:	98 e2       	ldi	r25, 0x28	; 40
    2c74:	c9 2e       	mov	r12, r25
    2c76:	d1 2c       	mov	r13, r1
			int16_t arm = -60;
    2c78:	24 ec       	ldi	r18, 0xC4	; 196
    2c7a:	a2 2e       	mov	r10, r18
    2c7c:	2f ef       	ldi	r18, 0xFF	; 255
    2c7e:	b2 2e       	mov	r11, r18
		_delay_ms(50);
	}

	while(1)
	{		
		if (can_check_message())
    2c80:	0e 94 66 11 	call	0x22cc	; 0x22cc <can_check_message>
    2c84:	88 23       	and	r24, r24
    2c86:	e1 f3       	breq	.-8      	; 0x2c80 <main+0x15e>
		{
			can_get_message(&receiveMsg);
    2c88:	ce 01       	movw	r24, r28
    2c8a:	89 96       	adiw	r24, 0x29	; 41
    2c8c:	0e 94 ca 11 	call	0x2394	; 0x2394 <can_get_message>
			resolverId = receiveMsg.id;
			
			int16_t angle = 15;
    2c90:	1a 87       	std	Y+10, r17	; 0x0a
    2c92:	09 87       	std	Y+9, r16	; 0x09
			int16_t slew = -20;
    2c94:	f8 86       	std	Y+8, r15	; 0x08
    2c96:	ef 82       	std	Y+7, r14	; 0x07
			int16_t boom = 40;
    2c98:	de 82       	std	Y+6, r13	; 0x06
    2c9a:	cd 82       	std	Y+5, r12	; 0x05
			int16_t arm = -60;
    2c9c:	bc 82       	std	Y+4, r11	; 0x04
    2c9e:	ab 82       	std	Y+3, r10	; 0x03
			int16_t bucket = 0;
    2ca0:	1a 82       	std	Y+2, r1	; 0x02
    2ca2:	19 82       	std	Y+1, r1	; 0x01
			controlSlewJointValve(&slew, &angle);
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	07 96       	adiw	r24, 0x07	; 7
    2ca8:	be 01       	movw	r22, r28
    2caa:	67 5f       	subi	r22, 0xF7	; 247
    2cac:	7f 4f       	sbci	r23, 0xFF	; 255
    2cae:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <controlSlewJointValve>
    2cb2:	8f ef       	ldi	r24, 0xFF	; 255
    2cb4:	90 e7       	ldi	r25, 0x70	; 112
    2cb6:	a2 e0       	ldi	r26, 0x02	; 2
    2cb8:	81 50       	subi	r24, 0x01	; 1
    2cba:	90 40       	sbci	r25, 0x00	; 0
    2cbc:	a0 40       	sbci	r26, 0x00	; 0
    2cbe:	e1 f7       	brne	.-8      	; 0x2cb8 <main+0x196>
    2cc0:	00 c0       	rjmp	.+0      	; 0x2cc2 <main+0x1a0>
    2cc2:	00 00       	nop
			_delay_ms(50);
			controlBoomJointValve(&boom, &angle);
    2cc4:	ce 01       	movw	r24, r28
    2cc6:	05 96       	adiw	r24, 0x05	; 5
    2cc8:	be 01       	movw	r22, r28
    2cca:	67 5f       	subi	r22, 0xF7	; 247
    2ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cce:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <controlBoomJointValve>
    2cd2:	8f ef       	ldi	r24, 0xFF	; 255
    2cd4:	90 e7       	ldi	r25, 0x70	; 112
    2cd6:	a2 e0       	ldi	r26, 0x02	; 2
    2cd8:	81 50       	subi	r24, 0x01	; 1
    2cda:	90 40       	sbci	r25, 0x00	; 0
    2cdc:	a0 40       	sbci	r26, 0x00	; 0
    2cde:	e1 f7       	brne	.-8      	; 0x2cd8 <main+0x1b6>
    2ce0:	00 c0       	rjmp	.+0      	; 0x2ce2 <main+0x1c0>
    2ce2:	00 00       	nop
			_delay_ms(50);
			controlArmJointValve(&arm, &angle);
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	03 96       	adiw	r24, 0x03	; 3
    2ce8:	be 01       	movw	r22, r28
    2cea:	67 5f       	subi	r22, 0xF7	; 247
    2cec:	7f 4f       	sbci	r23, 0xFF	; 255
    2cee:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <controlArmJointValve>
    2cf2:	8f ef       	ldi	r24, 0xFF	; 255
    2cf4:	90 e7       	ldi	r25, 0x70	; 112
    2cf6:	a2 e0       	ldi	r26, 0x02	; 2
    2cf8:	81 50       	subi	r24, 0x01	; 1
    2cfa:	90 40       	sbci	r25, 0x00	; 0
    2cfc:	a0 40       	sbci	r26, 0x00	; 0
    2cfe:	e1 f7       	brne	.-8      	; 0x2cf8 <main+0x1d6>
    2d00:	00 c0       	rjmp	.+0      	; 0x2d02 <main+0x1e0>
    2d02:	00 00       	nop
			_delay_ms(50);
			controlBucketJointValve(&bucket, &angle);
    2d04:	ce 01       	movw	r24, r28
    2d06:	01 96       	adiw	r24, 0x01	; 1
    2d08:	be 01       	movw	r22, r28
    2d0a:	67 5f       	subi	r22, 0xF7	; 247
    2d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0e:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <controlBucketJointValve>
    2d12:	8f ef       	ldi	r24, 0xFF	; 255
    2d14:	90 e7       	ldi	r25, 0x70	; 112
    2d16:	a2 e0       	ldi	r26, 0x02	; 2
    2d18:	81 50       	subi	r24, 0x01	; 1
    2d1a:	90 40       	sbci	r25, 0x00	; 0
    2d1c:	a0 40       	sbci	r26, 0x00	; 0
    2d1e:	e1 f7       	brne	.-8      	; 0x2d18 <main+0x1f6>
    2d20:	00 c0       	rjmp	.+0      	; 0x2d22 <main+0x200>
    2d22:	00 00       	nop
    2d24:	ad cf       	rjmp	.-166    	; 0x2c80 <main+0x15e>

00002d26 <__subsf3>:
    2d26:	50 58       	subi	r21, 0x80	; 128

00002d28 <__addsf3>:
    2d28:	bb 27       	eor	r27, r27
    2d2a:	aa 27       	eor	r26, r26
    2d2c:	0e d0       	rcall	.+28     	; 0x2d4a <__addsf3x>
    2d2e:	27 c2       	rjmp	.+1102   	; 0x317e <__fp_round>
    2d30:	f0 d1       	rcall	.+992    	; 0x3112 <__fp_pscA>
    2d32:	30 f0       	brcs	.+12     	; 0x2d40 <__addsf3+0x18>
    2d34:	f5 d1       	rcall	.+1002   	; 0x3120 <__fp_pscB>
    2d36:	20 f0       	brcs	.+8      	; 0x2d40 <__addsf3+0x18>
    2d38:	31 f4       	brne	.+12     	; 0x2d46 <__addsf3+0x1e>
    2d3a:	9f 3f       	cpi	r25, 0xFF	; 255
    2d3c:	11 f4       	brne	.+4      	; 0x2d42 <__addsf3+0x1a>
    2d3e:	1e f4       	brtc	.+6      	; 0x2d46 <__addsf3+0x1e>
    2d40:	c0 c1       	rjmp	.+896    	; 0x30c2 <__fp_nan>
    2d42:	0e f4       	brtc	.+2      	; 0x2d46 <__addsf3+0x1e>
    2d44:	e0 95       	com	r30
    2d46:	e7 fb       	bst	r30, 7
    2d48:	b6 c1       	rjmp	.+876    	; 0x30b6 <__fp_inf>

00002d4a <__addsf3x>:
    2d4a:	e9 2f       	mov	r30, r25
    2d4c:	3a d2       	rcall	.+1140   	; 0x31c2 <__fp_split3>
    2d4e:	80 f3       	brcs	.-32     	; 0x2d30 <__addsf3+0x8>
    2d50:	ba 17       	cp	r27, r26
    2d52:	62 07       	cpc	r22, r18
    2d54:	73 07       	cpc	r23, r19
    2d56:	84 07       	cpc	r24, r20
    2d58:	95 07       	cpc	r25, r21
    2d5a:	18 f0       	brcs	.+6      	; 0x2d62 <__addsf3x+0x18>
    2d5c:	71 f4       	brne	.+28     	; 0x2d7a <__addsf3x+0x30>
    2d5e:	9e f5       	brtc	.+102    	; 0x2dc6 <__addsf3x+0x7c>
    2d60:	52 c2       	rjmp	.+1188   	; 0x3206 <__fp_zero>
    2d62:	0e f4       	brtc	.+2      	; 0x2d66 <__addsf3x+0x1c>
    2d64:	e0 95       	com	r30
    2d66:	0b 2e       	mov	r0, r27
    2d68:	ba 2f       	mov	r27, r26
    2d6a:	a0 2d       	mov	r26, r0
    2d6c:	0b 01       	movw	r0, r22
    2d6e:	b9 01       	movw	r22, r18
    2d70:	90 01       	movw	r18, r0
    2d72:	0c 01       	movw	r0, r24
    2d74:	ca 01       	movw	r24, r20
    2d76:	a0 01       	movw	r20, r0
    2d78:	11 24       	eor	r1, r1
    2d7a:	ff 27       	eor	r31, r31
    2d7c:	59 1b       	sub	r21, r25
    2d7e:	99 f0       	breq	.+38     	; 0x2da6 <__addsf3x+0x5c>
    2d80:	59 3f       	cpi	r21, 0xF9	; 249
    2d82:	50 f4       	brcc	.+20     	; 0x2d98 <__addsf3x+0x4e>
    2d84:	50 3e       	cpi	r21, 0xE0	; 224
    2d86:	68 f1       	brcs	.+90     	; 0x2de2 <__addsf3x+0x98>
    2d88:	1a 16       	cp	r1, r26
    2d8a:	f0 40       	sbci	r31, 0x00	; 0
    2d8c:	a2 2f       	mov	r26, r18
    2d8e:	23 2f       	mov	r18, r19
    2d90:	34 2f       	mov	r19, r20
    2d92:	44 27       	eor	r20, r20
    2d94:	58 5f       	subi	r21, 0xF8	; 248
    2d96:	f3 cf       	rjmp	.-26     	; 0x2d7e <__addsf3x+0x34>
    2d98:	46 95       	lsr	r20
    2d9a:	37 95       	ror	r19
    2d9c:	27 95       	ror	r18
    2d9e:	a7 95       	ror	r26
    2da0:	f0 40       	sbci	r31, 0x00	; 0
    2da2:	53 95       	inc	r21
    2da4:	c9 f7       	brne	.-14     	; 0x2d98 <__addsf3x+0x4e>
    2da6:	7e f4       	brtc	.+30     	; 0x2dc6 <__addsf3x+0x7c>
    2da8:	1f 16       	cp	r1, r31
    2daa:	ba 0b       	sbc	r27, r26
    2dac:	62 0b       	sbc	r22, r18
    2dae:	73 0b       	sbc	r23, r19
    2db0:	84 0b       	sbc	r24, r20
    2db2:	ba f0       	brmi	.+46     	; 0x2de2 <__addsf3x+0x98>
    2db4:	91 50       	subi	r25, 0x01	; 1
    2db6:	a1 f0       	breq	.+40     	; 0x2de0 <__addsf3x+0x96>
    2db8:	ff 0f       	add	r31, r31
    2dba:	bb 1f       	adc	r27, r27
    2dbc:	66 1f       	adc	r22, r22
    2dbe:	77 1f       	adc	r23, r23
    2dc0:	88 1f       	adc	r24, r24
    2dc2:	c2 f7       	brpl	.-16     	; 0x2db4 <__addsf3x+0x6a>
    2dc4:	0e c0       	rjmp	.+28     	; 0x2de2 <__addsf3x+0x98>
    2dc6:	ba 0f       	add	r27, r26
    2dc8:	62 1f       	adc	r22, r18
    2dca:	73 1f       	adc	r23, r19
    2dcc:	84 1f       	adc	r24, r20
    2dce:	48 f4       	brcc	.+18     	; 0x2de2 <__addsf3x+0x98>
    2dd0:	87 95       	ror	r24
    2dd2:	77 95       	ror	r23
    2dd4:	67 95       	ror	r22
    2dd6:	b7 95       	ror	r27
    2dd8:	f7 95       	ror	r31
    2dda:	9e 3f       	cpi	r25, 0xFE	; 254
    2ddc:	08 f0       	brcs	.+2      	; 0x2de0 <__addsf3x+0x96>
    2dde:	b3 cf       	rjmp	.-154    	; 0x2d46 <__addsf3+0x1e>
    2de0:	93 95       	inc	r25
    2de2:	88 0f       	add	r24, r24
    2de4:	08 f0       	brcs	.+2      	; 0x2de8 <__addsf3x+0x9e>
    2de6:	99 27       	eor	r25, r25
    2de8:	ee 0f       	add	r30, r30
    2dea:	97 95       	ror	r25
    2dec:	87 95       	ror	r24
    2dee:	08 95       	ret
    2df0:	90 d1       	rcall	.+800    	; 0x3112 <__fp_pscA>
    2df2:	58 f0       	brcs	.+22     	; 0x2e0a <__addsf3x+0xc0>
    2df4:	80 e8       	ldi	r24, 0x80	; 128
    2df6:	91 e0       	ldi	r25, 0x01	; 1
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <__addsf3x+0xb2>
    2dfa:	9e ef       	ldi	r25, 0xFE	; 254
    2dfc:	91 d1       	rcall	.+802    	; 0x3120 <__fp_pscB>
    2dfe:	28 f0       	brcs	.+10     	; 0x2e0a <__addsf3x+0xc0>
    2e00:	40 e8       	ldi	r20, 0x80	; 128
    2e02:	51 e0       	ldi	r21, 0x01	; 1
    2e04:	59 f4       	brne	.+22     	; 0x2e1c <atan2+0xe>
    2e06:	5e ef       	ldi	r21, 0xFE	; 254
    2e08:	09 c0       	rjmp	.+18     	; 0x2e1c <atan2+0xe>
    2e0a:	5b c1       	rjmp	.+694    	; 0x30c2 <__fp_nan>
    2e0c:	fc c1       	rjmp	.+1016   	; 0x3206 <__fp_zero>

00002e0e <atan2>:
    2e0e:	e9 2f       	mov	r30, r25
    2e10:	e0 78       	andi	r30, 0x80	; 128
    2e12:	d7 d1       	rcall	.+942    	; 0x31c2 <__fp_split3>
    2e14:	68 f3       	brcs	.-38     	; 0x2df0 <__addsf3x+0xa6>
    2e16:	09 2e       	mov	r0, r25
    2e18:	05 2a       	or	r0, r21
    2e1a:	c1 f3       	breq	.-16     	; 0x2e0c <__addsf3x+0xc2>
    2e1c:	26 17       	cp	r18, r22
    2e1e:	37 07       	cpc	r19, r23
    2e20:	48 07       	cpc	r20, r24
    2e22:	59 07       	cpc	r21, r25
    2e24:	38 f0       	brcs	.+14     	; 0x2e34 <atan2+0x26>
    2e26:	0e 2e       	mov	r0, r30
    2e28:	07 f8       	bld	r0, 7
    2e2a:	e0 25       	eor	r30, r0
    2e2c:	69 f0       	breq	.+26     	; 0x2e48 <atan2+0x3a>
    2e2e:	e0 25       	eor	r30, r0
    2e30:	e0 64       	ori	r30, 0x40	; 64
    2e32:	0a c0       	rjmp	.+20     	; 0x2e48 <atan2+0x3a>
    2e34:	ef 63       	ori	r30, 0x3F	; 63
    2e36:	07 f8       	bld	r0, 7
    2e38:	00 94       	com	r0
    2e3a:	07 fa       	bst	r0, 7
    2e3c:	db 01       	movw	r26, r22
    2e3e:	b9 01       	movw	r22, r18
    2e40:	9d 01       	movw	r18, r26
    2e42:	dc 01       	movw	r26, r24
    2e44:	ca 01       	movw	r24, r20
    2e46:	ad 01       	movw	r20, r26
    2e48:	ef 93       	push	r30
    2e4a:	4a d0       	rcall	.+148    	; 0x2ee0 <__divsf3_pse>
    2e4c:	98 d1       	rcall	.+816    	; 0x317e <__fp_round>
    2e4e:	0a d0       	rcall	.+20     	; 0x2e64 <atan>
    2e50:	5f 91       	pop	r21
    2e52:	55 23       	and	r21, r21
    2e54:	31 f0       	breq	.+12     	; 0x2e62 <atan2+0x54>
    2e56:	2b ed       	ldi	r18, 0xDB	; 219
    2e58:	3f e0       	ldi	r19, 0x0F	; 15
    2e5a:	49 e4       	ldi	r20, 0x49	; 73
    2e5c:	50 fd       	sbrc	r21, 0
    2e5e:	49 ec       	ldi	r20, 0xC9	; 201
    2e60:	63 cf       	rjmp	.-314    	; 0x2d28 <__addsf3>
    2e62:	08 95       	ret

00002e64 <atan>:
    2e64:	df 93       	push	r29
    2e66:	dd 27       	eor	r29, r29
    2e68:	b9 2f       	mov	r27, r25
    2e6a:	bf 77       	andi	r27, 0x7F	; 127
    2e6c:	40 e8       	ldi	r20, 0x80	; 128
    2e6e:	5f e3       	ldi	r21, 0x3F	; 63
    2e70:	16 16       	cp	r1, r22
    2e72:	17 06       	cpc	r1, r23
    2e74:	48 07       	cpc	r20, r24
    2e76:	5b 07       	cpc	r21, r27
    2e78:	10 f4       	brcc	.+4      	; 0x2e7e <atan+0x1a>
    2e7a:	d9 2f       	mov	r29, r25
    2e7c:	cf d1       	rcall	.+926    	; 0x321c <inverse>
    2e7e:	9f 93       	push	r25
    2e80:	8f 93       	push	r24
    2e82:	7f 93       	push	r23
    2e84:	6f 93       	push	r22
    2e86:	c8 d2       	rcall	.+1424   	; 0x3418 <square>
    2e88:	e4 e9       	ldi	r30, 0x94	; 148
    2e8a:	f0 e0       	ldi	r31, 0x00	; 0
    2e8c:	1d d1       	rcall	.+570    	; 0x30c8 <__fp_powser>
    2e8e:	77 d1       	rcall	.+750    	; 0x317e <__fp_round>
    2e90:	2f 91       	pop	r18
    2e92:	3f 91       	pop	r19
    2e94:	4f 91       	pop	r20
    2e96:	5f 91       	pop	r21
    2e98:	d4 d1       	rcall	.+936    	; 0x3242 <__mulsf3x>
    2e9a:	dd 23       	and	r29, r29
    2e9c:	49 f0       	breq	.+18     	; 0x2eb0 <atan+0x4c>
    2e9e:	90 58       	subi	r25, 0x80	; 128
    2ea0:	a2 ea       	ldi	r26, 0xA2	; 162
    2ea2:	2a ed       	ldi	r18, 0xDA	; 218
    2ea4:	3f e0       	ldi	r19, 0x0F	; 15
    2ea6:	49 ec       	ldi	r20, 0xC9	; 201
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	d0 78       	andi	r29, 0x80	; 128
    2eac:	5d 27       	eor	r21, r29
    2eae:	4d df       	rcall	.-358    	; 0x2d4a <__addsf3x>
    2eb0:	df 91       	pop	r29
    2eb2:	65 c1       	rjmp	.+714    	; 0x317e <__fp_round>

00002eb4 <__cmpsf2>:
    2eb4:	dc d0       	rcall	.+440    	; 0x306e <__fp_cmp>
    2eb6:	08 f4       	brcc	.+2      	; 0x2eba <__cmpsf2+0x6>
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	08 95       	ret

00002ebc <cos>:
    2ebc:	39 d1       	rcall	.+626    	; 0x3130 <__fp_rempio2>
    2ebe:	e3 95       	inc	r30
    2ec0:	6f c1       	rjmp	.+734    	; 0x31a0 <__fp_sinus>

00002ec2 <__divsf3>:
    2ec2:	0c d0       	rcall	.+24     	; 0x2edc <__divsf3x>
    2ec4:	5c c1       	rjmp	.+696    	; 0x317e <__fp_round>
    2ec6:	2c d1       	rcall	.+600    	; 0x3120 <__fp_pscB>
    2ec8:	40 f0       	brcs	.+16     	; 0x2eda <__divsf3+0x18>
    2eca:	23 d1       	rcall	.+582    	; 0x3112 <__fp_pscA>
    2ecc:	30 f0       	brcs	.+12     	; 0x2eda <__divsf3+0x18>
    2ece:	21 f4       	brne	.+8      	; 0x2ed8 <__divsf3+0x16>
    2ed0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ed2:	19 f0       	breq	.+6      	; 0x2eda <__divsf3+0x18>
    2ed4:	f0 c0       	rjmp	.+480    	; 0x30b6 <__fp_inf>
    2ed6:	51 11       	cpse	r21, r1
    2ed8:	97 c1       	rjmp	.+814    	; 0x3208 <__fp_szero>
    2eda:	f3 c0       	rjmp	.+486    	; 0x30c2 <__fp_nan>

00002edc <__divsf3x>:
    2edc:	72 d1       	rcall	.+740    	; 0x31c2 <__fp_split3>
    2ede:	98 f3       	brcs	.-26     	; 0x2ec6 <__divsf3+0x4>

00002ee0 <__divsf3_pse>:
    2ee0:	99 23       	and	r25, r25
    2ee2:	c9 f3       	breq	.-14     	; 0x2ed6 <__divsf3+0x14>
    2ee4:	55 23       	and	r21, r21
    2ee6:	b1 f3       	breq	.-20     	; 0x2ed4 <__divsf3+0x12>
    2ee8:	95 1b       	sub	r25, r21
    2eea:	55 0b       	sbc	r21, r21
    2eec:	bb 27       	eor	r27, r27
    2eee:	aa 27       	eor	r26, r26
    2ef0:	62 17       	cp	r22, r18
    2ef2:	73 07       	cpc	r23, r19
    2ef4:	84 07       	cpc	r24, r20
    2ef6:	38 f0       	brcs	.+14     	; 0x2f06 <__divsf3_pse+0x26>
    2ef8:	9f 5f       	subi	r25, 0xFF	; 255
    2efa:	5f 4f       	sbci	r21, 0xFF	; 255
    2efc:	22 0f       	add	r18, r18
    2efe:	33 1f       	adc	r19, r19
    2f00:	44 1f       	adc	r20, r20
    2f02:	aa 1f       	adc	r26, r26
    2f04:	a9 f3       	breq	.-22     	; 0x2ef0 <__divsf3_pse+0x10>
    2f06:	33 d0       	rcall	.+102    	; 0x2f6e <__divsf3_pse+0x8e>
    2f08:	0e 2e       	mov	r0, r30
    2f0a:	3a f0       	brmi	.+14     	; 0x2f1a <__divsf3_pse+0x3a>
    2f0c:	e0 e8       	ldi	r30, 0x80	; 128
    2f0e:	30 d0       	rcall	.+96     	; 0x2f70 <__divsf3_pse+0x90>
    2f10:	91 50       	subi	r25, 0x01	; 1
    2f12:	50 40       	sbci	r21, 0x00	; 0
    2f14:	e6 95       	lsr	r30
    2f16:	00 1c       	adc	r0, r0
    2f18:	ca f7       	brpl	.-14     	; 0x2f0c <__divsf3_pse+0x2c>
    2f1a:	29 d0       	rcall	.+82     	; 0x2f6e <__divsf3_pse+0x8e>
    2f1c:	fe 2f       	mov	r31, r30
    2f1e:	27 d0       	rcall	.+78     	; 0x2f6e <__divsf3_pse+0x8e>
    2f20:	66 0f       	add	r22, r22
    2f22:	77 1f       	adc	r23, r23
    2f24:	88 1f       	adc	r24, r24
    2f26:	bb 1f       	adc	r27, r27
    2f28:	26 17       	cp	r18, r22
    2f2a:	37 07       	cpc	r19, r23
    2f2c:	48 07       	cpc	r20, r24
    2f2e:	ab 07       	cpc	r26, r27
    2f30:	b0 e8       	ldi	r27, 0x80	; 128
    2f32:	09 f0       	breq	.+2      	; 0x2f36 <__divsf3_pse+0x56>
    2f34:	bb 0b       	sbc	r27, r27
    2f36:	80 2d       	mov	r24, r0
    2f38:	bf 01       	movw	r22, r30
    2f3a:	ff 27       	eor	r31, r31
    2f3c:	93 58       	subi	r25, 0x83	; 131
    2f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f40:	2a f0       	brmi	.+10     	; 0x2f4c <__divsf3_pse+0x6c>
    2f42:	9e 3f       	cpi	r25, 0xFE	; 254
    2f44:	51 05       	cpc	r21, r1
    2f46:	68 f0       	brcs	.+26     	; 0x2f62 <__divsf3_pse+0x82>
    2f48:	b6 c0       	rjmp	.+364    	; 0x30b6 <__fp_inf>
    2f4a:	5e c1       	rjmp	.+700    	; 0x3208 <__fp_szero>
    2f4c:	5f 3f       	cpi	r21, 0xFF	; 255
    2f4e:	ec f3       	brlt	.-6      	; 0x2f4a <__divsf3_pse+0x6a>
    2f50:	98 3e       	cpi	r25, 0xE8	; 232
    2f52:	dc f3       	brlt	.-10     	; 0x2f4a <__divsf3_pse+0x6a>
    2f54:	86 95       	lsr	r24
    2f56:	77 95       	ror	r23
    2f58:	67 95       	ror	r22
    2f5a:	b7 95       	ror	r27
    2f5c:	f7 95       	ror	r31
    2f5e:	9f 5f       	subi	r25, 0xFF	; 255
    2f60:	c9 f7       	brne	.-14     	; 0x2f54 <__divsf3_pse+0x74>
    2f62:	88 0f       	add	r24, r24
    2f64:	91 1d       	adc	r25, r1
    2f66:	96 95       	lsr	r25
    2f68:	87 95       	ror	r24
    2f6a:	97 f9       	bld	r25, 7
    2f6c:	08 95       	ret
    2f6e:	e1 e0       	ldi	r30, 0x01	; 1
    2f70:	66 0f       	add	r22, r22
    2f72:	77 1f       	adc	r23, r23
    2f74:	88 1f       	adc	r24, r24
    2f76:	bb 1f       	adc	r27, r27
    2f78:	62 17       	cp	r22, r18
    2f7a:	73 07       	cpc	r23, r19
    2f7c:	84 07       	cpc	r24, r20
    2f7e:	ba 07       	cpc	r27, r26
    2f80:	20 f0       	brcs	.+8      	; 0x2f8a <__divsf3_pse+0xaa>
    2f82:	62 1b       	sub	r22, r18
    2f84:	73 0b       	sbc	r23, r19
    2f86:	84 0b       	sbc	r24, r20
    2f88:	ba 0b       	sbc	r27, r26
    2f8a:	ee 1f       	adc	r30, r30
    2f8c:	88 f7       	brcc	.-30     	; 0x2f70 <__divsf3_pse+0x90>
    2f8e:	e0 95       	com	r30
    2f90:	08 95       	ret

00002f92 <__fixsfsi>:
    2f92:	04 d0       	rcall	.+8      	; 0x2f9c <__fixunssfsi>
    2f94:	68 94       	set
    2f96:	b1 11       	cpse	r27, r1
    2f98:	37 c1       	rjmp	.+622    	; 0x3208 <__fp_szero>
    2f9a:	08 95       	ret

00002f9c <__fixunssfsi>:
    2f9c:	1a d1       	rcall	.+564    	; 0x31d2 <__fp_splitA>
    2f9e:	88 f0       	brcs	.+34     	; 0x2fc2 <__fixunssfsi+0x26>
    2fa0:	9f 57       	subi	r25, 0x7F	; 127
    2fa2:	90 f0       	brcs	.+36     	; 0x2fc8 <__fixunssfsi+0x2c>
    2fa4:	b9 2f       	mov	r27, r25
    2fa6:	99 27       	eor	r25, r25
    2fa8:	b7 51       	subi	r27, 0x17	; 23
    2faa:	a0 f0       	brcs	.+40     	; 0x2fd4 <__fixunssfsi+0x38>
    2fac:	d1 f0       	breq	.+52     	; 0x2fe2 <__fixunssfsi+0x46>
    2fae:	66 0f       	add	r22, r22
    2fb0:	77 1f       	adc	r23, r23
    2fb2:	88 1f       	adc	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	1a f0       	brmi	.+6      	; 0x2fbe <__fixunssfsi+0x22>
    2fb8:	ba 95       	dec	r27
    2fba:	c9 f7       	brne	.-14     	; 0x2fae <__fixunssfsi+0x12>
    2fbc:	12 c0       	rjmp	.+36     	; 0x2fe2 <__fixunssfsi+0x46>
    2fbe:	b1 30       	cpi	r27, 0x01	; 1
    2fc0:	81 f0       	breq	.+32     	; 0x2fe2 <__fixunssfsi+0x46>
    2fc2:	21 d1       	rcall	.+578    	; 0x3206 <__fp_zero>
    2fc4:	b1 e0       	ldi	r27, 0x01	; 1
    2fc6:	08 95       	ret
    2fc8:	1e c1       	rjmp	.+572    	; 0x3206 <__fp_zero>
    2fca:	67 2f       	mov	r22, r23
    2fcc:	78 2f       	mov	r23, r24
    2fce:	88 27       	eor	r24, r24
    2fd0:	b8 5f       	subi	r27, 0xF8	; 248
    2fd2:	39 f0       	breq	.+14     	; 0x2fe2 <__fixunssfsi+0x46>
    2fd4:	b9 3f       	cpi	r27, 0xF9	; 249
    2fd6:	cc f3       	brlt	.-14     	; 0x2fca <__fixunssfsi+0x2e>
    2fd8:	86 95       	lsr	r24
    2fda:	77 95       	ror	r23
    2fdc:	67 95       	ror	r22
    2fde:	b3 95       	inc	r27
    2fe0:	d9 f7       	brne	.-10     	; 0x2fd8 <__fixunssfsi+0x3c>
    2fe2:	3e f4       	brtc	.+14     	; 0x2ff2 <__fixunssfsi+0x56>
    2fe4:	90 95       	com	r25
    2fe6:	80 95       	com	r24
    2fe8:	70 95       	com	r23
    2fea:	61 95       	neg	r22
    2fec:	7f 4f       	sbci	r23, 0xFF	; 255
    2fee:	8f 4f       	sbci	r24, 0xFF	; 255
    2ff0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff2:	08 95       	ret

00002ff4 <__floatunsisf>:
    2ff4:	e8 94       	clt
    2ff6:	09 c0       	rjmp	.+18     	; 0x300a <__floatsisf+0x12>

00002ff8 <__floatsisf>:
    2ff8:	97 fb       	bst	r25, 7
    2ffa:	3e f4       	brtc	.+14     	; 0x300a <__floatsisf+0x12>
    2ffc:	90 95       	com	r25
    2ffe:	80 95       	com	r24
    3000:	70 95       	com	r23
    3002:	61 95       	neg	r22
    3004:	7f 4f       	sbci	r23, 0xFF	; 255
    3006:	8f 4f       	sbci	r24, 0xFF	; 255
    3008:	9f 4f       	sbci	r25, 0xFF	; 255
    300a:	99 23       	and	r25, r25
    300c:	a9 f0       	breq	.+42     	; 0x3038 <__floatsisf+0x40>
    300e:	f9 2f       	mov	r31, r25
    3010:	96 e9       	ldi	r25, 0x96	; 150
    3012:	bb 27       	eor	r27, r27
    3014:	93 95       	inc	r25
    3016:	f6 95       	lsr	r31
    3018:	87 95       	ror	r24
    301a:	77 95       	ror	r23
    301c:	67 95       	ror	r22
    301e:	b7 95       	ror	r27
    3020:	f1 11       	cpse	r31, r1
    3022:	f8 cf       	rjmp	.-16     	; 0x3014 <__floatsisf+0x1c>
    3024:	fa f4       	brpl	.+62     	; 0x3064 <__floatsisf+0x6c>
    3026:	bb 0f       	add	r27, r27
    3028:	11 f4       	brne	.+4      	; 0x302e <__floatsisf+0x36>
    302a:	60 ff       	sbrs	r22, 0
    302c:	1b c0       	rjmp	.+54     	; 0x3064 <__floatsisf+0x6c>
    302e:	6f 5f       	subi	r22, 0xFF	; 255
    3030:	7f 4f       	sbci	r23, 0xFF	; 255
    3032:	8f 4f       	sbci	r24, 0xFF	; 255
    3034:	9f 4f       	sbci	r25, 0xFF	; 255
    3036:	16 c0       	rjmp	.+44     	; 0x3064 <__floatsisf+0x6c>
    3038:	88 23       	and	r24, r24
    303a:	11 f0       	breq	.+4      	; 0x3040 <__floatsisf+0x48>
    303c:	96 e9       	ldi	r25, 0x96	; 150
    303e:	11 c0       	rjmp	.+34     	; 0x3062 <__floatsisf+0x6a>
    3040:	77 23       	and	r23, r23
    3042:	21 f0       	breq	.+8      	; 0x304c <__floatsisf+0x54>
    3044:	9e e8       	ldi	r25, 0x8E	; 142
    3046:	87 2f       	mov	r24, r23
    3048:	76 2f       	mov	r23, r22
    304a:	05 c0       	rjmp	.+10     	; 0x3056 <__floatsisf+0x5e>
    304c:	66 23       	and	r22, r22
    304e:	71 f0       	breq	.+28     	; 0x306c <__floatsisf+0x74>
    3050:	96 e8       	ldi	r25, 0x86	; 134
    3052:	86 2f       	mov	r24, r22
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	2a f0       	brmi	.+10     	; 0x3064 <__floatsisf+0x6c>
    305a:	9a 95       	dec	r25
    305c:	66 0f       	add	r22, r22
    305e:	77 1f       	adc	r23, r23
    3060:	88 1f       	adc	r24, r24
    3062:	da f7       	brpl	.-10     	; 0x305a <__floatsisf+0x62>
    3064:	88 0f       	add	r24, r24
    3066:	96 95       	lsr	r25
    3068:	87 95       	ror	r24
    306a:	97 f9       	bld	r25, 7
    306c:	08 95       	ret

0000306e <__fp_cmp>:
    306e:	99 0f       	add	r25, r25
    3070:	00 08       	sbc	r0, r0
    3072:	55 0f       	add	r21, r21
    3074:	aa 0b       	sbc	r26, r26
    3076:	e0 e8       	ldi	r30, 0x80	; 128
    3078:	fe ef       	ldi	r31, 0xFE	; 254
    307a:	16 16       	cp	r1, r22
    307c:	17 06       	cpc	r1, r23
    307e:	e8 07       	cpc	r30, r24
    3080:	f9 07       	cpc	r31, r25
    3082:	c0 f0       	brcs	.+48     	; 0x30b4 <__fp_cmp+0x46>
    3084:	12 16       	cp	r1, r18
    3086:	13 06       	cpc	r1, r19
    3088:	e4 07       	cpc	r30, r20
    308a:	f5 07       	cpc	r31, r21
    308c:	98 f0       	brcs	.+38     	; 0x30b4 <__fp_cmp+0x46>
    308e:	62 1b       	sub	r22, r18
    3090:	73 0b       	sbc	r23, r19
    3092:	84 0b       	sbc	r24, r20
    3094:	95 0b       	sbc	r25, r21
    3096:	39 f4       	brne	.+14     	; 0x30a6 <__fp_cmp+0x38>
    3098:	0a 26       	eor	r0, r26
    309a:	61 f0       	breq	.+24     	; 0x30b4 <__fp_cmp+0x46>
    309c:	23 2b       	or	r18, r19
    309e:	24 2b       	or	r18, r20
    30a0:	25 2b       	or	r18, r21
    30a2:	21 f4       	brne	.+8      	; 0x30ac <__fp_cmp+0x3e>
    30a4:	08 95       	ret
    30a6:	0a 26       	eor	r0, r26
    30a8:	09 f4       	brne	.+2      	; 0x30ac <__fp_cmp+0x3e>
    30aa:	a1 40       	sbci	r26, 0x01	; 1
    30ac:	a6 95       	lsr	r26
    30ae:	8f ef       	ldi	r24, 0xFF	; 255
    30b0:	81 1d       	adc	r24, r1
    30b2:	81 1d       	adc	r24, r1
    30b4:	08 95       	ret

000030b6 <__fp_inf>:
    30b6:	97 f9       	bld	r25, 7
    30b8:	9f 67       	ori	r25, 0x7F	; 127
    30ba:	80 e8       	ldi	r24, 0x80	; 128
    30bc:	70 e0       	ldi	r23, 0x00	; 0
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	08 95       	ret

000030c2 <__fp_nan>:
    30c2:	9f ef       	ldi	r25, 0xFF	; 255
    30c4:	80 ec       	ldi	r24, 0xC0	; 192
    30c6:	08 95       	ret

000030c8 <__fp_powser>:
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	1f 93       	push	r17
    30ce:	0f 93       	push	r16
    30d0:	ff 92       	push	r15
    30d2:	ef 92       	push	r14
    30d4:	df 92       	push	r13
    30d6:	7b 01       	movw	r14, r22
    30d8:	8c 01       	movw	r16, r24
    30da:	68 94       	set
    30dc:	05 c0       	rjmp	.+10     	; 0x30e8 <__fp_powser+0x20>
    30de:	da 2e       	mov	r13, r26
    30e0:	ef 01       	movw	r28, r30
    30e2:	af d0       	rcall	.+350    	; 0x3242 <__mulsf3x>
    30e4:	fe 01       	movw	r30, r28
    30e6:	e8 94       	clt
    30e8:	a5 91       	lpm	r26, Z+
    30ea:	25 91       	lpm	r18, Z+
    30ec:	35 91       	lpm	r19, Z+
    30ee:	45 91       	lpm	r20, Z+
    30f0:	55 91       	lpm	r21, Z+
    30f2:	ae f3       	brts	.-22     	; 0x30de <__fp_powser+0x16>
    30f4:	ef 01       	movw	r28, r30
    30f6:	29 de       	rcall	.-942    	; 0x2d4a <__addsf3x>
    30f8:	fe 01       	movw	r30, r28
    30fa:	97 01       	movw	r18, r14
    30fc:	a8 01       	movw	r20, r16
    30fe:	da 94       	dec	r13
    3100:	79 f7       	brne	.-34     	; 0x30e0 <__fp_powser+0x18>
    3102:	df 90       	pop	r13
    3104:	ef 90       	pop	r14
    3106:	ff 90       	pop	r15
    3108:	0f 91       	pop	r16
    310a:	1f 91       	pop	r17
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret

00003112 <__fp_pscA>:
    3112:	00 24       	eor	r0, r0
    3114:	0a 94       	dec	r0
    3116:	16 16       	cp	r1, r22
    3118:	17 06       	cpc	r1, r23
    311a:	18 06       	cpc	r1, r24
    311c:	09 06       	cpc	r0, r25
    311e:	08 95       	ret

00003120 <__fp_pscB>:
    3120:	00 24       	eor	r0, r0
    3122:	0a 94       	dec	r0
    3124:	12 16       	cp	r1, r18
    3126:	13 06       	cpc	r1, r19
    3128:	14 06       	cpc	r1, r20
    312a:	05 06       	cpc	r0, r21
    312c:	08 95       	ret
    312e:	c9 cf       	rjmp	.-110    	; 0x30c2 <__fp_nan>

00003130 <__fp_rempio2>:
    3130:	50 d0       	rcall	.+160    	; 0x31d2 <__fp_splitA>
    3132:	e8 f3       	brcs	.-6      	; 0x312e <__fp_pscB+0xe>
    3134:	e8 94       	clt
    3136:	e0 e0       	ldi	r30, 0x00	; 0
    3138:	bb 27       	eor	r27, r27
    313a:	9f 57       	subi	r25, 0x7F	; 127
    313c:	f0 f0       	brcs	.+60     	; 0x317a <__fp_rempio2+0x4a>
    313e:	2a ed       	ldi	r18, 0xDA	; 218
    3140:	3f e0       	ldi	r19, 0x0F	; 15
    3142:	49 ec       	ldi	r20, 0xC9	; 201
    3144:	06 c0       	rjmp	.+12     	; 0x3152 <__fp_rempio2+0x22>
    3146:	ee 0f       	add	r30, r30
    3148:	bb 0f       	add	r27, r27
    314a:	66 1f       	adc	r22, r22
    314c:	77 1f       	adc	r23, r23
    314e:	88 1f       	adc	r24, r24
    3150:	28 f0       	brcs	.+10     	; 0x315c <__fp_rempio2+0x2c>
    3152:	b2 3a       	cpi	r27, 0xA2	; 162
    3154:	62 07       	cpc	r22, r18
    3156:	73 07       	cpc	r23, r19
    3158:	84 07       	cpc	r24, r20
    315a:	28 f0       	brcs	.+10     	; 0x3166 <__fp_rempio2+0x36>
    315c:	b2 5a       	subi	r27, 0xA2	; 162
    315e:	62 0b       	sbc	r22, r18
    3160:	73 0b       	sbc	r23, r19
    3162:	84 0b       	sbc	r24, r20
    3164:	e3 95       	inc	r30
    3166:	9a 95       	dec	r25
    3168:	72 f7       	brpl	.-36     	; 0x3146 <__fp_rempio2+0x16>
    316a:	80 38       	cpi	r24, 0x80	; 128
    316c:	30 f4       	brcc	.+12     	; 0x317a <__fp_rempio2+0x4a>
    316e:	9a 95       	dec	r25
    3170:	bb 0f       	add	r27, r27
    3172:	66 1f       	adc	r22, r22
    3174:	77 1f       	adc	r23, r23
    3176:	88 1f       	adc	r24, r24
    3178:	d2 f7       	brpl	.-12     	; 0x316e <__fp_rempio2+0x3e>
    317a:	90 48       	sbci	r25, 0x80	; 128
    317c:	83 c1       	rjmp	.+774    	; 0x3484 <__fp_mpack_finite>

0000317e <__fp_round>:
    317e:	09 2e       	mov	r0, r25
    3180:	03 94       	inc	r0
    3182:	00 0c       	add	r0, r0
    3184:	11 f4       	brne	.+4      	; 0x318a <__fp_round+0xc>
    3186:	88 23       	and	r24, r24
    3188:	52 f0       	brmi	.+20     	; 0x319e <__fp_round+0x20>
    318a:	bb 0f       	add	r27, r27
    318c:	40 f4       	brcc	.+16     	; 0x319e <__fp_round+0x20>
    318e:	bf 2b       	or	r27, r31
    3190:	11 f4       	brne	.+4      	; 0x3196 <__fp_round+0x18>
    3192:	60 ff       	sbrs	r22, 0
    3194:	04 c0       	rjmp	.+8      	; 0x319e <__fp_round+0x20>
    3196:	6f 5f       	subi	r22, 0xFF	; 255
    3198:	7f 4f       	sbci	r23, 0xFF	; 255
    319a:	8f 4f       	sbci	r24, 0xFF	; 255
    319c:	9f 4f       	sbci	r25, 0xFF	; 255
    319e:	08 95       	ret

000031a0 <__fp_sinus>:
    31a0:	ef 93       	push	r30
    31a2:	e0 ff       	sbrs	r30, 0
    31a4:	06 c0       	rjmp	.+12     	; 0x31b2 <__fp_sinus+0x12>
    31a6:	a2 ea       	ldi	r26, 0xA2	; 162
    31a8:	2a ed       	ldi	r18, 0xDA	; 218
    31aa:	3f e0       	ldi	r19, 0x0F	; 15
    31ac:	49 ec       	ldi	r20, 0xC9	; 201
    31ae:	5f eb       	ldi	r21, 0xBF	; 191
    31b0:	cc dd       	rcall	.-1128   	; 0x2d4a <__addsf3x>
    31b2:	e5 df       	rcall	.-54     	; 0x317e <__fp_round>
    31b4:	0f 90       	pop	r0
    31b6:	03 94       	inc	r0
    31b8:	01 fc       	sbrc	r0, 1
    31ba:	90 58       	subi	r25, 0x80	; 128
    31bc:	e1 ec       	ldi	r30, 0xC1	; 193
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	74 c1       	rjmp	.+744    	; 0x34aa <__fp_powsodd>

000031c2 <__fp_split3>:
    31c2:	57 fd       	sbrc	r21, 7
    31c4:	90 58       	subi	r25, 0x80	; 128
    31c6:	44 0f       	add	r20, r20
    31c8:	55 1f       	adc	r21, r21
    31ca:	59 f0       	breq	.+22     	; 0x31e2 <__fp_splitA+0x10>
    31cc:	5f 3f       	cpi	r21, 0xFF	; 255
    31ce:	71 f0       	breq	.+28     	; 0x31ec <__fp_splitA+0x1a>
    31d0:	47 95       	ror	r20

000031d2 <__fp_splitA>:
    31d2:	88 0f       	add	r24, r24
    31d4:	97 fb       	bst	r25, 7
    31d6:	99 1f       	adc	r25, r25
    31d8:	61 f0       	breq	.+24     	; 0x31f2 <__fp_splitA+0x20>
    31da:	9f 3f       	cpi	r25, 0xFF	; 255
    31dc:	79 f0       	breq	.+30     	; 0x31fc <__fp_splitA+0x2a>
    31de:	87 95       	ror	r24
    31e0:	08 95       	ret
    31e2:	12 16       	cp	r1, r18
    31e4:	13 06       	cpc	r1, r19
    31e6:	14 06       	cpc	r1, r20
    31e8:	55 1f       	adc	r21, r21
    31ea:	f2 cf       	rjmp	.-28     	; 0x31d0 <__fp_split3+0xe>
    31ec:	46 95       	lsr	r20
    31ee:	f1 df       	rcall	.-30     	; 0x31d2 <__fp_splitA>
    31f0:	08 c0       	rjmp	.+16     	; 0x3202 <__fp_splitA+0x30>
    31f2:	16 16       	cp	r1, r22
    31f4:	17 06       	cpc	r1, r23
    31f6:	18 06       	cpc	r1, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	f1 cf       	rjmp	.-30     	; 0x31de <__fp_splitA+0xc>
    31fc:	86 95       	lsr	r24
    31fe:	71 05       	cpc	r23, r1
    3200:	61 05       	cpc	r22, r1
    3202:	08 94       	sec
    3204:	08 95       	ret

00003206 <__fp_zero>:
    3206:	e8 94       	clt

00003208 <__fp_szero>:
    3208:	bb 27       	eor	r27, r27
    320a:	66 27       	eor	r22, r22
    320c:	77 27       	eor	r23, r23
    320e:	cb 01       	movw	r24, r22
    3210:	97 f9       	bld	r25, 7
    3212:	08 95       	ret

00003214 <__gesf2>:
    3214:	2c df       	rcall	.-424    	; 0x306e <__fp_cmp>
    3216:	08 f4       	brcc	.+2      	; 0x321a <__gesf2+0x6>
    3218:	8f ef       	ldi	r24, 0xFF	; 255
    321a:	08 95       	ret

0000321c <inverse>:
    321c:	9b 01       	movw	r18, r22
    321e:	ac 01       	movw	r20, r24
    3220:	60 e0       	ldi	r22, 0x00	; 0
    3222:	70 e0       	ldi	r23, 0x00	; 0
    3224:	80 e8       	ldi	r24, 0x80	; 128
    3226:	9f e3       	ldi	r25, 0x3F	; 63
    3228:	4c ce       	rjmp	.-872    	; 0x2ec2 <__divsf3>

0000322a <__mulsf3>:
    322a:	0b d0       	rcall	.+22     	; 0x3242 <__mulsf3x>
    322c:	a8 cf       	rjmp	.-176    	; 0x317e <__fp_round>
    322e:	71 df       	rcall	.-286    	; 0x3112 <__fp_pscA>
    3230:	28 f0       	brcs	.+10     	; 0x323c <__mulsf3+0x12>
    3232:	76 df       	rcall	.-276    	; 0x3120 <__fp_pscB>
    3234:	18 f0       	brcs	.+6      	; 0x323c <__mulsf3+0x12>
    3236:	95 23       	and	r25, r21
    3238:	09 f0       	breq	.+2      	; 0x323c <__mulsf3+0x12>
    323a:	3d cf       	rjmp	.-390    	; 0x30b6 <__fp_inf>
    323c:	42 cf       	rjmp	.-380    	; 0x30c2 <__fp_nan>
    323e:	11 24       	eor	r1, r1
    3240:	e3 cf       	rjmp	.-58     	; 0x3208 <__fp_szero>

00003242 <__mulsf3x>:
    3242:	bf df       	rcall	.-130    	; 0x31c2 <__fp_split3>
    3244:	a0 f3       	brcs	.-24     	; 0x322e <__mulsf3+0x4>

00003246 <__mulsf3_pse>:
    3246:	95 9f       	mul	r25, r21
    3248:	d1 f3       	breq	.-12     	; 0x323e <__mulsf3+0x14>
    324a:	95 0f       	add	r25, r21
    324c:	50 e0       	ldi	r21, 0x00	; 0
    324e:	55 1f       	adc	r21, r21
    3250:	62 9f       	mul	r22, r18
    3252:	f0 01       	movw	r30, r0
    3254:	72 9f       	mul	r23, r18
    3256:	bb 27       	eor	r27, r27
    3258:	f0 0d       	add	r31, r0
    325a:	b1 1d       	adc	r27, r1
    325c:	63 9f       	mul	r22, r19
    325e:	aa 27       	eor	r26, r26
    3260:	f0 0d       	add	r31, r0
    3262:	b1 1d       	adc	r27, r1
    3264:	aa 1f       	adc	r26, r26
    3266:	64 9f       	mul	r22, r20
    3268:	66 27       	eor	r22, r22
    326a:	b0 0d       	add	r27, r0
    326c:	a1 1d       	adc	r26, r1
    326e:	66 1f       	adc	r22, r22
    3270:	82 9f       	mul	r24, r18
    3272:	22 27       	eor	r18, r18
    3274:	b0 0d       	add	r27, r0
    3276:	a1 1d       	adc	r26, r1
    3278:	62 1f       	adc	r22, r18
    327a:	73 9f       	mul	r23, r19
    327c:	b0 0d       	add	r27, r0
    327e:	a1 1d       	adc	r26, r1
    3280:	62 1f       	adc	r22, r18
    3282:	83 9f       	mul	r24, r19
    3284:	a0 0d       	add	r26, r0
    3286:	61 1d       	adc	r22, r1
    3288:	22 1f       	adc	r18, r18
    328a:	74 9f       	mul	r23, r20
    328c:	33 27       	eor	r19, r19
    328e:	a0 0d       	add	r26, r0
    3290:	61 1d       	adc	r22, r1
    3292:	23 1f       	adc	r18, r19
    3294:	84 9f       	mul	r24, r20
    3296:	60 0d       	add	r22, r0
    3298:	21 1d       	adc	r18, r1
    329a:	82 2f       	mov	r24, r18
    329c:	76 2f       	mov	r23, r22
    329e:	6a 2f       	mov	r22, r26
    32a0:	11 24       	eor	r1, r1
    32a2:	9f 57       	subi	r25, 0x7F	; 127
    32a4:	50 40       	sbci	r21, 0x00	; 0
    32a6:	8a f0       	brmi	.+34     	; 0x32ca <__mulsf3_pse+0x84>
    32a8:	e1 f0       	breq	.+56     	; 0x32e2 <__mulsf3_pse+0x9c>
    32aa:	88 23       	and	r24, r24
    32ac:	4a f0       	brmi	.+18     	; 0x32c0 <__mulsf3_pse+0x7a>
    32ae:	ee 0f       	add	r30, r30
    32b0:	ff 1f       	adc	r31, r31
    32b2:	bb 1f       	adc	r27, r27
    32b4:	66 1f       	adc	r22, r22
    32b6:	77 1f       	adc	r23, r23
    32b8:	88 1f       	adc	r24, r24
    32ba:	91 50       	subi	r25, 0x01	; 1
    32bc:	50 40       	sbci	r21, 0x00	; 0
    32be:	a9 f7       	brne	.-22     	; 0x32aa <__mulsf3_pse+0x64>
    32c0:	9e 3f       	cpi	r25, 0xFE	; 254
    32c2:	51 05       	cpc	r21, r1
    32c4:	70 f0       	brcs	.+28     	; 0x32e2 <__mulsf3_pse+0x9c>
    32c6:	f7 ce       	rjmp	.-530    	; 0x30b6 <__fp_inf>
    32c8:	9f cf       	rjmp	.-194    	; 0x3208 <__fp_szero>
    32ca:	5f 3f       	cpi	r21, 0xFF	; 255
    32cc:	ec f3       	brlt	.-6      	; 0x32c8 <__mulsf3_pse+0x82>
    32ce:	98 3e       	cpi	r25, 0xE8	; 232
    32d0:	dc f3       	brlt	.-10     	; 0x32c8 <__mulsf3_pse+0x82>
    32d2:	86 95       	lsr	r24
    32d4:	77 95       	ror	r23
    32d6:	67 95       	ror	r22
    32d8:	b7 95       	ror	r27
    32da:	f7 95       	ror	r31
    32dc:	e7 95       	ror	r30
    32de:	9f 5f       	subi	r25, 0xFF	; 255
    32e0:	c1 f7       	brne	.-16     	; 0x32d2 <__mulsf3_pse+0x8c>
    32e2:	fe 2b       	or	r31, r30
    32e4:	88 0f       	add	r24, r24
    32e6:	91 1d       	adc	r25, r1
    32e8:	96 95       	lsr	r25
    32ea:	87 95       	ror	r24
    32ec:	97 f9       	bld	r25, 7
    32ee:	08 95       	ret

000032f0 <pow>:
    32f0:	fa 01       	movw	r30, r20
    32f2:	ee 0f       	add	r30, r30
    32f4:	ff 1f       	adc	r31, r31
    32f6:	30 96       	adiw	r30, 0x00	; 0
    32f8:	21 05       	cpc	r18, r1
    32fa:	31 05       	cpc	r19, r1
    32fc:	99 f1       	breq	.+102    	; 0x3364 <pow+0x74>
    32fe:	61 15       	cp	r22, r1
    3300:	71 05       	cpc	r23, r1
    3302:	61 f4       	brne	.+24     	; 0x331c <pow+0x2c>
    3304:	80 38       	cpi	r24, 0x80	; 128
    3306:	bf e3       	ldi	r27, 0x3F	; 63
    3308:	9b 07       	cpc	r25, r27
    330a:	49 f1       	breq	.+82     	; 0x335e <pow+0x6e>
    330c:	68 94       	set
    330e:	90 38       	cpi	r25, 0x80	; 128
    3310:	81 05       	cpc	r24, r1
    3312:	61 f0       	breq	.+24     	; 0x332c <pow+0x3c>
    3314:	80 38       	cpi	r24, 0x80	; 128
    3316:	bf ef       	ldi	r27, 0xFF	; 255
    3318:	9b 07       	cpc	r25, r27
    331a:	41 f0       	breq	.+16     	; 0x332c <pow+0x3c>
    331c:	99 23       	and	r25, r25
    331e:	42 f5       	brpl	.+80     	; 0x3370 <pow+0x80>
    3320:	ff 3f       	cpi	r31, 0xFF	; 255
    3322:	e1 05       	cpc	r30, r1
    3324:	31 05       	cpc	r19, r1
    3326:	21 05       	cpc	r18, r1
    3328:	11 f1       	breq	.+68     	; 0x336e <pow+0x7e>
    332a:	e8 94       	clt
    332c:	08 94       	sec
    332e:	e7 95       	ror	r30
    3330:	d9 01       	movw	r26, r18
    3332:	aa 23       	and	r26, r26
    3334:	29 f4       	brne	.+10     	; 0x3340 <pow+0x50>
    3336:	ab 2f       	mov	r26, r27
    3338:	be 2f       	mov	r27, r30
    333a:	f8 5f       	subi	r31, 0xF8	; 248
    333c:	d0 f3       	brcs	.-12     	; 0x3332 <pow+0x42>
    333e:	10 c0       	rjmp	.+32     	; 0x3360 <pow+0x70>
    3340:	ff 5f       	subi	r31, 0xFF	; 255
    3342:	70 f4       	brcc	.+28     	; 0x3360 <pow+0x70>
    3344:	a6 95       	lsr	r26
    3346:	e0 f7       	brcc	.-8      	; 0x3340 <pow+0x50>
    3348:	f7 39       	cpi	r31, 0x97	; 151
    334a:	50 f0       	brcs	.+20     	; 0x3360 <pow+0x70>
    334c:	19 f0       	breq	.+6      	; 0x3354 <pow+0x64>
    334e:	ff 3a       	cpi	r31, 0xAF	; 175
    3350:	38 f4       	brcc	.+14     	; 0x3360 <pow+0x70>
    3352:	9f 77       	andi	r25, 0x7F	; 127
    3354:	9f 93       	push	r25
    3356:	0c d0       	rcall	.+24     	; 0x3370 <pow+0x80>
    3358:	0f 90       	pop	r0
    335a:	07 fc       	sbrc	r0, 7
    335c:	90 58       	subi	r25, 0x80	; 128
    335e:	08 95       	ret
    3360:	3e f0       	brts	.+14     	; 0x3370 <pow+0x80>
    3362:	af ce       	rjmp	.-674    	; 0x30c2 <__fp_nan>
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	70 e0       	ldi	r23, 0x00	; 0
    3368:	80 e8       	ldi	r24, 0x80	; 128
    336a:	9f e3       	ldi	r25, 0x3F	; 63
    336c:	08 95       	ret
    336e:	4f e7       	ldi	r20, 0x7F	; 127
    3370:	9f 77       	andi	r25, 0x7F	; 127
    3372:	5f 93       	push	r21
    3374:	4f 93       	push	r20
    3376:	3f 93       	push	r19
    3378:	2f 93       	push	r18
    337a:	e3 d0       	rcall	.+454    	; 0x3542 <log>
    337c:	2f 91       	pop	r18
    337e:	3f 91       	pop	r19
    3380:	4f 91       	pop	r20
    3382:	5f 91       	pop	r21
    3384:	52 df       	rcall	.-348    	; 0x322a <__mulsf3>
    3386:	50 c0       	rjmp	.+160    	; 0x3428 <exp>

00003388 <sin>:
    3388:	9f 93       	push	r25
    338a:	d2 de       	rcall	.-604    	; 0x3130 <__fp_rempio2>
    338c:	0f 90       	pop	r0
    338e:	07 fc       	sbrc	r0, 7
    3390:	ee 5f       	subi	r30, 0xFE	; 254
    3392:	06 cf       	rjmp	.-500    	; 0x31a0 <__fp_sinus>
    3394:	11 f4       	brne	.+4      	; 0x339a <sin+0x12>
    3396:	0e f4       	brtc	.+2      	; 0x339a <sin+0x12>
    3398:	94 ce       	rjmp	.-728    	; 0x30c2 <__fp_nan>
    339a:	72 c0       	rjmp	.+228    	; 0x3480 <__fp_mpack>

0000339c <sqrt>:
    339c:	1a df       	rcall	.-460    	; 0x31d2 <__fp_splitA>
    339e:	d0 f3       	brcs	.-12     	; 0x3394 <sin+0xc>
    33a0:	99 23       	and	r25, r25
    33a2:	d9 f3       	breq	.-10     	; 0x339a <sin+0x12>
    33a4:	ce f3       	brts	.-14     	; 0x3398 <sin+0x10>
    33a6:	9f 57       	subi	r25, 0x7F	; 127
    33a8:	55 0b       	sbc	r21, r21
    33aa:	87 ff       	sbrs	r24, 7
    33ac:	77 d0       	rcall	.+238    	; 0x349c <__fp_norm2>
    33ae:	00 24       	eor	r0, r0
    33b0:	a0 e6       	ldi	r26, 0x60	; 96
    33b2:	40 ea       	ldi	r20, 0xA0	; 160
    33b4:	90 01       	movw	r18, r0
    33b6:	80 58       	subi	r24, 0x80	; 128
    33b8:	56 95       	lsr	r21
    33ba:	97 95       	ror	r25
    33bc:	28 f4       	brcc	.+10     	; 0x33c8 <sqrt+0x2c>
    33be:	80 5c       	subi	r24, 0xC0	; 192
    33c0:	66 0f       	add	r22, r22
    33c2:	77 1f       	adc	r23, r23
    33c4:	88 1f       	adc	r24, r24
    33c6:	20 f0       	brcs	.+8      	; 0x33d0 <sqrt+0x34>
    33c8:	26 17       	cp	r18, r22
    33ca:	37 07       	cpc	r19, r23
    33cc:	48 07       	cpc	r20, r24
    33ce:	30 f4       	brcc	.+12     	; 0x33dc <sqrt+0x40>
    33d0:	62 1b       	sub	r22, r18
    33d2:	73 0b       	sbc	r23, r19
    33d4:	84 0b       	sbc	r24, r20
    33d6:	20 29       	or	r18, r0
    33d8:	31 29       	or	r19, r1
    33da:	4a 2b       	or	r20, r26
    33dc:	a6 95       	lsr	r26
    33de:	17 94       	ror	r1
    33e0:	07 94       	ror	r0
    33e2:	20 25       	eor	r18, r0
    33e4:	31 25       	eor	r19, r1
    33e6:	4a 27       	eor	r20, r26
    33e8:	58 f7       	brcc	.-42     	; 0x33c0 <sqrt+0x24>
    33ea:	66 0f       	add	r22, r22
    33ec:	77 1f       	adc	r23, r23
    33ee:	88 1f       	adc	r24, r24
    33f0:	20 f0       	brcs	.+8      	; 0x33fa <sqrt+0x5e>
    33f2:	26 17       	cp	r18, r22
    33f4:	37 07       	cpc	r19, r23
    33f6:	48 07       	cpc	r20, r24
    33f8:	30 f4       	brcc	.+12     	; 0x3406 <sqrt+0x6a>
    33fa:	62 0b       	sbc	r22, r18
    33fc:	73 0b       	sbc	r23, r19
    33fe:	84 0b       	sbc	r24, r20
    3400:	20 0d       	add	r18, r0
    3402:	31 1d       	adc	r19, r1
    3404:	41 1d       	adc	r20, r1
    3406:	a0 95       	com	r26
    3408:	81 f7       	brne	.-32     	; 0x33ea <sqrt+0x4e>
    340a:	b9 01       	movw	r22, r18
    340c:	84 2f       	mov	r24, r20
    340e:	91 58       	subi	r25, 0x81	; 129
    3410:	88 0f       	add	r24, r24
    3412:	96 95       	lsr	r25
    3414:	87 95       	ror	r24
    3416:	08 95       	ret

00003418 <square>:
    3418:	9b 01       	movw	r18, r22
    341a:	ac 01       	movw	r20, r24
    341c:	06 cf       	rjmp	.-500    	; 0x322a <__mulsf3>
    341e:	19 f4       	brne	.+6      	; 0x3426 <square+0xe>
    3420:	0e f0       	brts	.+2      	; 0x3424 <square+0xc>
    3422:	49 ce       	rjmp	.-878    	; 0x30b6 <__fp_inf>
    3424:	f0 ce       	rjmp	.-544    	; 0x3206 <__fp_zero>
    3426:	4d ce       	rjmp	.-870    	; 0x30c2 <__fp_nan>

00003428 <exp>:
    3428:	d4 de       	rcall	.-600    	; 0x31d2 <__fp_splitA>
    342a:	c8 f3       	brcs	.-14     	; 0x341e <square+0x6>
    342c:	96 38       	cpi	r25, 0x86	; 134
    342e:	c0 f7       	brcc	.-16     	; 0x3420 <square+0x8>
    3430:	07 f8       	bld	r0, 7
    3432:	0f 92       	push	r0
    3434:	e8 94       	clt
    3436:	2b e3       	ldi	r18, 0x3B	; 59
    3438:	3a ea       	ldi	r19, 0xAA	; 170
    343a:	48 eb       	ldi	r20, 0xB8	; 184
    343c:	5f e7       	ldi	r21, 0x7F	; 127
    343e:	03 df       	rcall	.-506    	; 0x3246 <__mulsf3_pse>
    3440:	0f 92       	push	r0
    3442:	0f 92       	push	r0
    3444:	0f 92       	push	r0
    3446:	4d b7       	in	r20, 0x3d	; 61
    3448:	5e b7       	in	r21, 0x3e	; 62
    344a:	0f 92       	push	r0
    344c:	ba d0       	rcall	.+372    	; 0x35c2 <modf>
    344e:	ef ed       	ldi	r30, 0xDF	; 223
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	3a de       	rcall	.-908    	; 0x30c8 <__fp_powser>
    3454:	4f 91       	pop	r20
    3456:	5f 91       	pop	r21
    3458:	ef 91       	pop	r30
    345a:	ff 91       	pop	r31
    345c:	e5 95       	asr	r30
    345e:	ee 1f       	adc	r30, r30
    3460:	ff 1f       	adc	r31, r31
    3462:	49 f0       	breq	.+18     	; 0x3476 <exp+0x4e>
    3464:	fe 57       	subi	r31, 0x7E	; 126
    3466:	e0 68       	ori	r30, 0x80	; 128
    3468:	44 27       	eor	r20, r20
    346a:	ee 0f       	add	r30, r30
    346c:	44 1f       	adc	r20, r20
    346e:	fa 95       	dec	r31
    3470:	e1 f7       	brne	.-8      	; 0x346a <exp+0x42>
    3472:	41 95       	neg	r20
    3474:	55 0b       	sbc	r21, r21
    3476:	2c d0       	rcall	.+88     	; 0x34d0 <ldexp>
    3478:	0f 90       	pop	r0
    347a:	07 fe       	sbrs	r0, 7
    347c:	cf ce       	rjmp	.-610    	; 0x321c <inverse>
    347e:	08 95       	ret

00003480 <__fp_mpack>:
    3480:	9f 3f       	cpi	r25, 0xFF	; 255
    3482:	31 f0       	breq	.+12     	; 0x3490 <__fp_mpack_finite+0xc>

00003484 <__fp_mpack_finite>:
    3484:	91 50       	subi	r25, 0x01	; 1
    3486:	20 f4       	brcc	.+8      	; 0x3490 <__fp_mpack_finite+0xc>
    3488:	87 95       	ror	r24
    348a:	77 95       	ror	r23
    348c:	67 95       	ror	r22
    348e:	b7 95       	ror	r27
    3490:	88 0f       	add	r24, r24
    3492:	91 1d       	adc	r25, r1
    3494:	96 95       	lsr	r25
    3496:	87 95       	ror	r24
    3498:	97 f9       	bld	r25, 7
    349a:	08 95       	ret

0000349c <__fp_norm2>:
    349c:	91 50       	subi	r25, 0x01	; 1
    349e:	50 40       	sbci	r21, 0x00	; 0
    34a0:	66 0f       	add	r22, r22
    34a2:	77 1f       	adc	r23, r23
    34a4:	88 1f       	adc	r24, r24
    34a6:	d2 f7       	brpl	.-12     	; 0x349c <__fp_norm2>
    34a8:	08 95       	ret

000034aa <__fp_powsodd>:
    34aa:	9f 93       	push	r25
    34ac:	8f 93       	push	r24
    34ae:	7f 93       	push	r23
    34b0:	6f 93       	push	r22
    34b2:	ff 93       	push	r31
    34b4:	ef 93       	push	r30
    34b6:	9b 01       	movw	r18, r22
    34b8:	ac 01       	movw	r20, r24
    34ba:	b7 de       	rcall	.-658    	; 0x322a <__mulsf3>
    34bc:	ef 91       	pop	r30
    34be:	ff 91       	pop	r31
    34c0:	03 de       	rcall	.-1018   	; 0x30c8 <__fp_powser>
    34c2:	2f 91       	pop	r18
    34c4:	3f 91       	pop	r19
    34c6:	4f 91       	pop	r20
    34c8:	5f 91       	pop	r21
    34ca:	af ce       	rjmp	.-674    	; 0x322a <__mulsf3>
    34cc:	f4 cd       	rjmp	.-1048   	; 0x30b6 <__fp_inf>
    34ce:	d8 cf       	rjmp	.-80     	; 0x3480 <__fp_mpack>

000034d0 <ldexp>:
    34d0:	80 de       	rcall	.-768    	; 0x31d2 <__fp_splitA>
    34d2:	e8 f3       	brcs	.-6      	; 0x34ce <__fp_powsodd+0x24>
    34d4:	99 23       	and	r25, r25
    34d6:	d9 f3       	breq	.-10     	; 0x34ce <__fp_powsodd+0x24>
    34d8:	94 0f       	add	r25, r20
    34da:	51 1d       	adc	r21, r1
    34dc:	bb f3       	brvs	.-18     	; 0x34cc <__fp_powsodd+0x22>
    34de:	91 50       	subi	r25, 0x01	; 1
    34e0:	50 40       	sbci	r21, 0x00	; 0
    34e2:	94 f0       	brlt	.+36     	; 0x3508 <ldexp+0x38>
    34e4:	59 f0       	breq	.+22     	; 0x34fc <ldexp+0x2c>
    34e6:	88 23       	and	r24, r24
    34e8:	32 f0       	brmi	.+12     	; 0x34f6 <ldexp+0x26>
    34ea:	66 0f       	add	r22, r22
    34ec:	77 1f       	adc	r23, r23
    34ee:	88 1f       	adc	r24, r24
    34f0:	91 50       	subi	r25, 0x01	; 1
    34f2:	50 40       	sbci	r21, 0x00	; 0
    34f4:	c1 f7       	brne	.-16     	; 0x34e6 <ldexp+0x16>
    34f6:	9e 3f       	cpi	r25, 0xFE	; 254
    34f8:	51 05       	cpc	r21, r1
    34fa:	44 f7       	brge	.-48     	; 0x34cc <__fp_powsodd+0x22>
    34fc:	88 0f       	add	r24, r24
    34fe:	91 1d       	adc	r25, r1
    3500:	96 95       	lsr	r25
    3502:	87 95       	ror	r24
    3504:	97 f9       	bld	r25, 7
    3506:	08 95       	ret
    3508:	5f 3f       	cpi	r21, 0xFF	; 255
    350a:	ac f0       	brlt	.+42     	; 0x3536 <ldexp+0x66>
    350c:	98 3e       	cpi	r25, 0xE8	; 232
    350e:	9c f0       	brlt	.+38     	; 0x3536 <ldexp+0x66>
    3510:	bb 27       	eor	r27, r27
    3512:	86 95       	lsr	r24
    3514:	77 95       	ror	r23
    3516:	67 95       	ror	r22
    3518:	b7 95       	ror	r27
    351a:	08 f4       	brcc	.+2      	; 0x351e <ldexp+0x4e>
    351c:	b1 60       	ori	r27, 0x01	; 1
    351e:	93 95       	inc	r25
    3520:	c1 f7       	brne	.-16     	; 0x3512 <ldexp+0x42>
    3522:	bb 0f       	add	r27, r27
    3524:	58 f7       	brcc	.-42     	; 0x34fc <ldexp+0x2c>
    3526:	11 f4       	brne	.+4      	; 0x352c <ldexp+0x5c>
    3528:	60 ff       	sbrs	r22, 0
    352a:	e8 cf       	rjmp	.-48     	; 0x34fc <ldexp+0x2c>
    352c:	6f 5f       	subi	r22, 0xFF	; 255
    352e:	7f 4f       	sbci	r23, 0xFF	; 255
    3530:	8f 4f       	sbci	r24, 0xFF	; 255
    3532:	9f 4f       	sbci	r25, 0xFF	; 255
    3534:	e3 cf       	rjmp	.-58     	; 0x34fc <ldexp+0x2c>
    3536:	68 ce       	rjmp	.-816    	; 0x3208 <__fp_szero>
    3538:	0e f0       	brts	.+2      	; 0x353c <ldexp+0x6c>
    353a:	a2 cf       	rjmp	.-188    	; 0x3480 <__fp_mpack>
    353c:	c2 cd       	rjmp	.-1148   	; 0x30c2 <__fp_nan>
    353e:	68 94       	set
    3540:	ba cd       	rjmp	.-1164   	; 0x30b6 <__fp_inf>

00003542 <log>:
    3542:	47 de       	rcall	.-882    	; 0x31d2 <__fp_splitA>
    3544:	c8 f3       	brcs	.-14     	; 0x3538 <ldexp+0x68>
    3546:	99 23       	and	r25, r25
    3548:	d1 f3       	breq	.-12     	; 0x353e <ldexp+0x6e>
    354a:	c6 f3       	brts	.-16     	; 0x353c <ldexp+0x6c>
    354c:	df 93       	push	r29
    354e:	cf 93       	push	r28
    3550:	1f 93       	push	r17
    3552:	0f 93       	push	r16
    3554:	ff 92       	push	r15
    3556:	c9 2f       	mov	r28, r25
    3558:	dd 27       	eor	r29, r29
    355a:	88 23       	and	r24, r24
    355c:	2a f0       	brmi	.+10     	; 0x3568 <log+0x26>
    355e:	21 97       	sbiw	r28, 0x01	; 1
    3560:	66 0f       	add	r22, r22
    3562:	77 1f       	adc	r23, r23
    3564:	88 1f       	adc	r24, r24
    3566:	da f7       	brpl	.-10     	; 0x355e <log+0x1c>
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e8       	ldi	r20, 0x80	; 128
    356e:	5f eb       	ldi	r21, 0xBF	; 191
    3570:	9f e3       	ldi	r25, 0x3F	; 63
    3572:	88 39       	cpi	r24, 0x98	; 152
    3574:	20 f0       	brcs	.+8      	; 0x357e <log+0x3c>
    3576:	80 3e       	cpi	r24, 0xE0	; 224
    3578:	30 f0       	brcs	.+12     	; 0x3586 <log+0x44>
    357a:	21 96       	adiw	r28, 0x01	; 1
    357c:	8f 77       	andi	r24, 0x7F	; 127
    357e:	d4 db       	rcall	.-2136   	; 0x2d28 <__addsf3>
    3580:	e7 e0       	ldi	r30, 0x07	; 7
    3582:	f1 e0       	ldi	r31, 0x01	; 1
    3584:	03 c0       	rjmp	.+6      	; 0x358c <log+0x4a>
    3586:	d0 db       	rcall	.-2144   	; 0x2d28 <__addsf3>
    3588:	e4 e3       	ldi	r30, 0x34	; 52
    358a:	f1 e0       	ldi	r31, 0x01	; 1
    358c:	9d dd       	rcall	.-1222   	; 0x30c8 <__fp_powser>
    358e:	8b 01       	movw	r16, r22
    3590:	be 01       	movw	r22, r28
    3592:	ec 01       	movw	r28, r24
    3594:	fb 2e       	mov	r15, r27
    3596:	6f 57       	subi	r22, 0x7F	; 127
    3598:	71 09       	sbc	r23, r1
    359a:	75 95       	asr	r23
    359c:	77 1f       	adc	r23, r23
    359e:	88 0b       	sbc	r24, r24
    35a0:	99 0b       	sbc	r25, r25
    35a2:	2a dd       	rcall	.-1452   	; 0x2ff8 <__floatsisf>
    35a4:	28 e1       	ldi	r18, 0x18	; 24
    35a6:	32 e7       	ldi	r19, 0x72	; 114
    35a8:	41 e3       	ldi	r20, 0x31	; 49
    35aa:	5f e3       	ldi	r21, 0x3F	; 63
    35ac:	4a de       	rcall	.-876    	; 0x3242 <__mulsf3x>
    35ae:	af 2d       	mov	r26, r15
    35b0:	98 01       	movw	r18, r16
    35b2:	ae 01       	movw	r20, r28
    35b4:	ff 90       	pop	r15
    35b6:	0f 91       	pop	r16
    35b8:	1f 91       	pop	r17
    35ba:	cf 91       	pop	r28
    35bc:	df 91       	pop	r29
    35be:	c5 db       	rcall	.-2166   	; 0x2d4a <__addsf3x>
    35c0:	de cd       	rjmp	.-1092   	; 0x317e <__fp_round>

000035c2 <modf>:
    35c2:	fa 01       	movw	r30, r20
    35c4:	dc 01       	movw	r26, r24
    35c6:	aa 0f       	add	r26, r26
    35c8:	bb 1f       	adc	r27, r27
    35ca:	9b 01       	movw	r18, r22
    35cc:	ac 01       	movw	r20, r24
    35ce:	bf 57       	subi	r27, 0x7F	; 127
    35d0:	28 f4       	brcc	.+10     	; 0x35dc <modf+0x1a>
    35d2:	22 27       	eor	r18, r18
    35d4:	33 27       	eor	r19, r19
    35d6:	44 27       	eor	r20, r20
    35d8:	50 78       	andi	r21, 0x80	; 128
    35da:	1f c0       	rjmp	.+62     	; 0x361a <modf+0x58>
    35dc:	b7 51       	subi	r27, 0x17	; 23
    35de:	88 f4       	brcc	.+34     	; 0x3602 <modf+0x40>
    35e0:	ab 2f       	mov	r26, r27
    35e2:	00 24       	eor	r0, r0
    35e4:	46 95       	lsr	r20
    35e6:	37 95       	ror	r19
    35e8:	27 95       	ror	r18
    35ea:	01 1c       	adc	r0, r1
    35ec:	a3 95       	inc	r26
    35ee:	d2 f3       	brmi	.-12     	; 0x35e4 <modf+0x22>
    35f0:	00 20       	and	r0, r0
    35f2:	69 f0       	breq	.+26     	; 0x360e <modf+0x4c>
    35f4:	22 0f       	add	r18, r18
    35f6:	33 1f       	adc	r19, r19
    35f8:	44 1f       	adc	r20, r20
    35fa:	b3 95       	inc	r27
    35fc:	da f3       	brmi	.-10     	; 0x35f4 <modf+0x32>
    35fe:	0d d0       	rcall	.+26     	; 0x361a <modf+0x58>
    3600:	92 cb       	rjmp	.-2268   	; 0x2d26 <__subsf3>
    3602:	61 30       	cpi	r22, 0x01	; 1
    3604:	71 05       	cpc	r23, r1
    3606:	a0 e8       	ldi	r26, 0x80	; 128
    3608:	8a 07       	cpc	r24, r26
    360a:	b9 46       	sbci	r27, 0x69	; 105
    360c:	30 f4       	brcc	.+12     	; 0x361a <modf+0x58>
    360e:	9b 01       	movw	r18, r22
    3610:	ac 01       	movw	r20, r24
    3612:	66 27       	eor	r22, r22
    3614:	77 27       	eor	r23, r23
    3616:	88 27       	eor	r24, r24
    3618:	90 78       	andi	r25, 0x80	; 128
    361a:	30 96       	adiw	r30, 0x00	; 0
    361c:	21 f0       	breq	.+8      	; 0x3626 <modf+0x64>
    361e:	20 83       	st	Z, r18
    3620:	31 83       	std	Z+1, r19	; 0x01
    3622:	42 83       	std	Z+2, r20	; 0x02
    3624:	53 83       	std	Z+3, r21	; 0x03
    3626:	08 95       	ret

00003628 <dtostrf>:
    3628:	ef 92       	push	r14
    362a:	0f 93       	push	r16
    362c:	1f 93       	push	r17
    362e:	cf 93       	push	r28
    3630:	32 2f       	mov	r19, r18
    3632:	c0 2f       	mov	r28, r16
    3634:	47 ff       	sbrs	r20, 7
    3636:	02 c0       	rjmp	.+4      	; 0x363c <dtostrf+0x14>
    3638:	a4 e1       	ldi	r26, 0x14	; 20
    363a:	01 c0       	rjmp	.+2      	; 0x363e <dtostrf+0x16>
    363c:	a4 e0       	ldi	r26, 0x04	; 4
    363e:	e4 2f       	mov	r30, r20
    3640:	ff 27       	eor	r31, r31
    3642:	e7 fd       	sbrc	r30, 7
    3644:	f0 95       	com	r31
    3646:	f7 ff       	sbrs	r31, 7
    3648:	03 c0       	rjmp	.+6      	; 0x3650 <dtostrf+0x28>
    364a:	f0 95       	com	r31
    364c:	e1 95       	neg	r30
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	4c 2f       	mov	r20, r28
    3652:	51 2f       	mov	r21, r17
    3654:	2e 2f       	mov	r18, r30
    3656:	03 2f       	mov	r16, r19
    3658:	ea 2e       	mov	r14, r26
    365a:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <dtoa_prf>
    365e:	8c 2f       	mov	r24, r28
    3660:	91 2f       	mov	r25, r17
    3662:	cf 91       	pop	r28
    3664:	1f 91       	pop	r17
    3666:	0f 91       	pop	r16
    3668:	ef 90       	pop	r14
    366a:	08 95       	ret

0000366c <exit>:
    366c:	f8 94       	cli
    366e:	0c 94 e2 1d 	jmp	0x3bc4	; 0x3bc4 <_exit>

00003672 <itoa>:
    3672:	fb 01       	movw	r30, r22
    3674:	9f 01       	movw	r18, r30
    3676:	e8 94       	clt
    3678:	42 30       	cpi	r20, 0x02	; 2
    367a:	c4 f0       	brlt	.+48     	; 0x36ac <itoa+0x3a>
    367c:	45 32       	cpi	r20, 0x25	; 37
    367e:	b4 f4       	brge	.+44     	; 0x36ac <itoa+0x3a>
    3680:	4a 30       	cpi	r20, 0x0A	; 10
    3682:	29 f4       	brne	.+10     	; 0x368e <itoa+0x1c>
    3684:	97 fb       	bst	r25, 7
    3686:	1e f4       	brtc	.+6      	; 0x368e <itoa+0x1c>
    3688:	90 95       	com	r25
    368a:	81 95       	neg	r24
    368c:	9f 4f       	sbci	r25, 0xFF	; 255
    368e:	64 2f       	mov	r22, r20
    3690:	77 27       	eor	r23, r23
    3692:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__udivmodhi4>
    3696:	80 5d       	subi	r24, 0xD0	; 208
    3698:	8a 33       	cpi	r24, 0x3A	; 58
    369a:	0c f0       	brlt	.+2      	; 0x369e <itoa+0x2c>
    369c:	89 5d       	subi	r24, 0xD9	; 217
    369e:	81 93       	st	Z+, r24
    36a0:	cb 01       	movw	r24, r22
    36a2:	00 97       	sbiw	r24, 0x00	; 0
    36a4:	a1 f7       	brne	.-24     	; 0x368e <itoa+0x1c>
    36a6:	16 f4       	brtc	.+4      	; 0x36ac <itoa+0x3a>
    36a8:	5d e2       	ldi	r21, 0x2D	; 45
    36aa:	51 93       	st	Z+, r21
    36ac:	10 82       	st	Z, r1
    36ae:	c9 01       	movw	r24, r18
    36b0:	0c 94 ab 1d 	jmp	0x3b56	; 0x3b56 <strrev>

000036b4 <dtoa_prf>:
    36b4:	6f 92       	push	r6
    36b6:	7f 92       	push	r7
    36b8:	8f 92       	push	r8
    36ba:	9f 92       	push	r9
    36bc:	af 92       	push	r10
    36be:	bf 92       	push	r11
    36c0:	cf 92       	push	r12
    36c2:	df 92       	push	r13
    36c4:	ef 92       	push	r14
    36c6:	ff 92       	push	r15
    36c8:	0f 93       	push	r16
    36ca:	1f 93       	push	r17
    36cc:	cf 93       	push	r28
    36ce:	df 93       	push	r29
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	29 97       	sbiw	r28, 0x09	; 9
    36d6:	0f b6       	in	r0, 0x3f	; 63
    36d8:	f8 94       	cli
    36da:	de bf       	out	0x3e, r29	; 62
    36dc:	0f be       	out	0x3f, r0	; 63
    36de:	cd bf       	out	0x3d, r28	; 61
    36e0:	6a 01       	movw	r12, r20
    36e2:	12 2f       	mov	r17, r18
    36e4:	f0 2e       	mov	r15, r16
    36e6:	2b e3       	ldi	r18, 0x3B	; 59
    36e8:	20 17       	cp	r18, r16
    36ea:	18 f0       	brcs	.+6      	; 0x36f2 <dtoa_prf+0x3e>
    36ec:	b0 2e       	mov	r11, r16
    36ee:	b3 94       	inc	r11
    36f0:	02 c0       	rjmp	.+4      	; 0x36f6 <dtoa_prf+0x42>
    36f2:	3c e3       	ldi	r19, 0x3C	; 60
    36f4:	b3 2e       	mov	r11, r19
    36f6:	ae 01       	movw	r20, r28
    36f8:	4f 5f       	subi	r20, 0xFF	; 255
    36fa:	5f 4f       	sbci	r21, 0xFF	; 255
    36fc:	27 e0       	ldi	r18, 0x07	; 7
    36fe:	0b 2d       	mov	r16, r11
    3700:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <__ftoa_engine>
    3704:	bc 01       	movw	r22, r24
    3706:	a9 81       	ldd	r26, Y+1	; 0x01
    3708:	b0 e0       	ldi	r27, 0x00	; 0
    370a:	cd 01       	movw	r24, r26
    370c:	89 70       	andi	r24, 0x09	; 9
    370e:	90 70       	andi	r25, 0x00	; 0
    3710:	81 30       	cpi	r24, 0x01	; 1
    3712:	91 05       	cpc	r25, r1
    3714:	31 f0       	breq	.+12     	; 0x3722 <dtoa_prf+0x6e>
    3716:	e1 fc       	sbrc	r14, 1
    3718:	06 c0       	rjmp	.+12     	; 0x3726 <dtoa_prf+0x72>
    371a:	e0 fe       	sbrs	r14, 0
    371c:	06 c0       	rjmp	.+12     	; 0x372a <dtoa_prf+0x76>
    371e:	40 e2       	ldi	r20, 0x20	; 32
    3720:	05 c0       	rjmp	.+10     	; 0x372c <dtoa_prf+0x78>
    3722:	4d e2       	ldi	r20, 0x2D	; 45
    3724:	03 c0       	rjmp	.+6      	; 0x372c <dtoa_prf+0x78>
    3726:	4b e2       	ldi	r20, 0x2B	; 43
    3728:	01 c0       	rjmp	.+2      	; 0x372c <dtoa_prf+0x78>
    372a:	40 e0       	ldi	r20, 0x00	; 0
    372c:	a3 ff       	sbrs	r26, 3
    372e:	36 c0       	rjmp	.+108    	; 0x379c <dtoa_prf+0xe8>
    3730:	44 23       	and	r20, r20
    3732:	11 f0       	breq	.+4      	; 0x3738 <dtoa_prf+0x84>
    3734:	84 e0       	ldi	r24, 0x04	; 4
    3736:	01 c0       	rjmp	.+2      	; 0x373a <dtoa_prf+0x86>
    3738:	83 e0       	ldi	r24, 0x03	; 3
    373a:	81 17       	cp	r24, r17
    373c:	10 f4       	brcc	.+4      	; 0x3742 <dtoa_prf+0x8e>
    373e:	18 1b       	sub	r17, r24
    3740:	01 c0       	rjmp	.+2      	; 0x3744 <dtoa_prf+0x90>
    3742:	10 e0       	ldi	r17, 0x00	; 0
    3744:	e4 fc       	sbrc	r14, 4
    3746:	0b c0       	rjmp	.+22     	; 0x375e <dtoa_prf+0xaa>
    3748:	91 2f       	mov	r25, r17
    374a:	f6 01       	movw	r30, r12
    374c:	80 e2       	ldi	r24, 0x20	; 32
    374e:	02 c0       	rjmp	.+4      	; 0x3754 <dtoa_prf+0xa0>
    3750:	81 93       	st	Z+, r24
    3752:	91 50       	subi	r25, 0x01	; 1
    3754:	99 23       	and	r25, r25
    3756:	e1 f7       	brne	.-8      	; 0x3750 <dtoa_prf+0x9c>
    3758:	c1 0e       	add	r12, r17
    375a:	d1 1c       	adc	r13, r1
    375c:	10 e0       	ldi	r17, 0x00	; 0
    375e:	44 23       	and	r20, r20
    3760:	19 f0       	breq	.+6      	; 0x3768 <dtoa_prf+0xb4>
    3762:	f6 01       	movw	r30, r12
    3764:	41 93       	st	Z+, r20
    3766:	6f 01       	movw	r12, r30
    3768:	e2 fe       	sbrs	r14, 2
    376a:	05 c0       	rjmp	.+10     	; 0x3776 <dtoa_prf+0xc2>
    376c:	8e e4       	ldi	r24, 0x4E	; 78
    376e:	f6 01       	movw	r30, r12
    3770:	80 83       	st	Z, r24
    3772:	91 e4       	ldi	r25, 0x41	; 65
    3774:	04 c0       	rjmp	.+8      	; 0x377e <dtoa_prf+0xca>
    3776:	8e e6       	ldi	r24, 0x6E	; 110
    3778:	f6 01       	movw	r30, r12
    377a:	80 83       	st	Z, r24
    377c:	91 e6       	ldi	r25, 0x61	; 97
    377e:	91 83       	std	Z+1, r25	; 0x01
    3780:	82 83       	std	Z+2, r24	; 0x02
    3782:	83 e0       	ldi	r24, 0x03	; 3
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	c8 0e       	add	r12, r24
    3788:	d9 1e       	adc	r13, r25
    378a:	81 2f       	mov	r24, r17
    378c:	f6 01       	movw	r30, r12
    378e:	90 e2       	ldi	r25, 0x20	; 32
    3790:	02 c0       	rjmp	.+4      	; 0x3796 <dtoa_prf+0xe2>
    3792:	91 93       	st	Z+, r25
    3794:	81 50       	subi	r24, 0x01	; 1
    3796:	88 23       	and	r24, r24
    3798:	e1 f7       	brne	.-8      	; 0x3792 <dtoa_prf+0xde>
    379a:	3a c0       	rjmp	.+116    	; 0x3810 <dtoa_prf+0x15c>
    379c:	a2 ff       	sbrs	r26, 2
    379e:	3f c0       	rjmp	.+126    	; 0x381e <dtoa_prf+0x16a>
    37a0:	44 23       	and	r20, r20
    37a2:	11 f0       	breq	.+4      	; 0x37a8 <dtoa_prf+0xf4>
    37a4:	84 e0       	ldi	r24, 0x04	; 4
    37a6:	01 c0       	rjmp	.+2      	; 0x37aa <dtoa_prf+0xf6>
    37a8:	83 e0       	ldi	r24, 0x03	; 3
    37aa:	81 17       	cp	r24, r17
    37ac:	10 f4       	brcc	.+4      	; 0x37b2 <dtoa_prf+0xfe>
    37ae:	18 1b       	sub	r17, r24
    37b0:	01 c0       	rjmp	.+2      	; 0x37b4 <dtoa_prf+0x100>
    37b2:	10 e0       	ldi	r17, 0x00	; 0
    37b4:	e4 fc       	sbrc	r14, 4
    37b6:	0b c0       	rjmp	.+22     	; 0x37ce <dtoa_prf+0x11a>
    37b8:	91 2f       	mov	r25, r17
    37ba:	f6 01       	movw	r30, r12
    37bc:	80 e2       	ldi	r24, 0x20	; 32
    37be:	02 c0       	rjmp	.+4      	; 0x37c4 <dtoa_prf+0x110>
    37c0:	81 93       	st	Z+, r24
    37c2:	91 50       	subi	r25, 0x01	; 1
    37c4:	99 23       	and	r25, r25
    37c6:	e1 f7       	brne	.-8      	; 0x37c0 <dtoa_prf+0x10c>
    37c8:	c1 0e       	add	r12, r17
    37ca:	d1 1c       	adc	r13, r1
    37cc:	10 e0       	ldi	r17, 0x00	; 0
    37ce:	44 23       	and	r20, r20
    37d0:	19 f0       	breq	.+6      	; 0x37d8 <dtoa_prf+0x124>
    37d2:	f6 01       	movw	r30, r12
    37d4:	41 93       	st	Z+, r20
    37d6:	6f 01       	movw	r12, r30
    37d8:	e2 fe       	sbrs	r14, 2
    37da:	07 c0       	rjmp	.+14     	; 0x37ea <dtoa_prf+0x136>
    37dc:	89 e4       	ldi	r24, 0x49	; 73
    37de:	f6 01       	movw	r30, r12
    37e0:	80 83       	st	Z, r24
    37e2:	8e e4       	ldi	r24, 0x4E	; 78
    37e4:	81 83       	std	Z+1, r24	; 0x01
    37e6:	86 e4       	ldi	r24, 0x46	; 70
    37e8:	06 c0       	rjmp	.+12     	; 0x37f6 <dtoa_prf+0x142>
    37ea:	89 e6       	ldi	r24, 0x69	; 105
    37ec:	f6 01       	movw	r30, r12
    37ee:	80 83       	st	Z, r24
    37f0:	8e e6       	ldi	r24, 0x6E	; 110
    37f2:	81 83       	std	Z+1, r24	; 0x01
    37f4:	86 e6       	ldi	r24, 0x66	; 102
    37f6:	82 83       	std	Z+2, r24	; 0x02
    37f8:	83 e0       	ldi	r24, 0x03	; 3
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	c8 0e       	add	r12, r24
    37fe:	d9 1e       	adc	r13, r25
    3800:	81 2f       	mov	r24, r17
    3802:	f6 01       	movw	r30, r12
    3804:	90 e2       	ldi	r25, 0x20	; 32
    3806:	02 c0       	rjmp	.+4      	; 0x380c <dtoa_prf+0x158>
    3808:	91 93       	st	Z+, r25
    380a:	81 50       	subi	r24, 0x01	; 1
    380c:	88 23       	and	r24, r24
    380e:	e1 f7       	brne	.-8      	; 0x3808 <dtoa_prf+0x154>
    3810:	c1 0e       	add	r12, r17
    3812:	d1 1c       	adc	r13, r1
    3814:	f6 01       	movw	r30, r12
    3816:	10 82       	st	Z, r1
    3818:	8e ef       	ldi	r24, 0xFE	; 254
    381a:	9f ef       	ldi	r25, 0xFF	; 255
    381c:	af c0       	rjmp	.+350    	; 0x397c <dtoa_prf+0x2c8>
    381e:	21 e0       	ldi	r18, 0x01	; 1
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	44 23       	and	r20, r20
    3824:	11 f4       	brne	.+4      	; 0x382a <dtoa_prf+0x176>
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	30 e0       	ldi	r19, 0x00	; 0
    382a:	16 16       	cp	r1, r22
    382c:	17 06       	cpc	r1, r23
    382e:	1c f4       	brge	.+6      	; 0x3836 <dtoa_prf+0x182>
    3830:	cb 01       	movw	r24, r22
    3832:	01 96       	adiw	r24, 0x01	; 1
    3834:	02 c0       	rjmp	.+4      	; 0x383a <dtoa_prf+0x186>
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	28 0f       	add	r18, r24
    383c:	39 1f       	adc	r19, r25
    383e:	ff 20       	and	r15, r15
    3840:	21 f0       	breq	.+8      	; 0x384a <dtoa_prf+0x196>
    3842:	8f 2d       	mov	r24, r15
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	01 96       	adiw	r24, 0x01	; 1
    3848:	02 c0       	rjmp	.+4      	; 0x384e <dtoa_prf+0x19a>
    384a:	80 e0       	ldi	r24, 0x00	; 0
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	82 0f       	add	r24, r18
    3850:	93 1f       	adc	r25, r19
    3852:	21 2f       	mov	r18, r17
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	82 17       	cp	r24, r18
    3858:	93 07       	cpc	r25, r19
    385a:	1c f4       	brge	.+6      	; 0x3862 <dtoa_prf+0x1ae>
    385c:	51 2f       	mov	r21, r17
    385e:	58 1b       	sub	r21, r24
    3860:	01 c0       	rjmp	.+2      	; 0x3864 <dtoa_prf+0x1b0>
    3862:	50 e0       	ldi	r21, 0x00	; 0
    3864:	8e 2d       	mov	r24, r14
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	9c 01       	movw	r18, r24
    386a:	20 71       	andi	r18, 0x10	; 16
    386c:	30 70       	andi	r19, 0x00	; 0
    386e:	e4 fc       	sbrc	r14, 4
    3870:	0d c0       	rjmp	.+26     	; 0x388c <dtoa_prf+0x1d8>
    3872:	e3 fc       	sbrc	r14, 3
    3874:	0b c0       	rjmp	.+22     	; 0x388c <dtoa_prf+0x1d8>
    3876:	85 2f       	mov	r24, r21
    3878:	f6 01       	movw	r30, r12
    387a:	90 e2       	ldi	r25, 0x20	; 32
    387c:	02 c0       	rjmp	.+4      	; 0x3882 <dtoa_prf+0x1ce>
    387e:	91 93       	st	Z+, r25
    3880:	81 50       	subi	r24, 0x01	; 1
    3882:	88 23       	and	r24, r24
    3884:	e1 f7       	brne	.-8      	; 0x387e <dtoa_prf+0x1ca>
    3886:	c5 0e       	add	r12, r21
    3888:	d1 1c       	adc	r13, r1
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	44 23       	and	r20, r20
    388e:	19 f0       	breq	.+6      	; 0x3896 <dtoa_prf+0x1e2>
    3890:	f6 01       	movw	r30, r12
    3892:	41 93       	st	Z+, r20
    3894:	6f 01       	movw	r12, r30
    3896:	21 15       	cp	r18, r1
    3898:	31 05       	cpc	r19, r1
    389a:	59 f4       	brne	.+22     	; 0x38b2 <dtoa_prf+0x1fe>
    389c:	85 2f       	mov	r24, r21
    389e:	f6 01       	movw	r30, r12
    38a0:	90 e3       	ldi	r25, 0x30	; 48
    38a2:	02 c0       	rjmp	.+4      	; 0x38a8 <dtoa_prf+0x1f4>
    38a4:	91 93       	st	Z+, r25
    38a6:	81 50       	subi	r24, 0x01	; 1
    38a8:	88 23       	and	r24, r24
    38aa:	e1 f7       	brne	.-8      	; 0x38a4 <dtoa_prf+0x1f0>
    38ac:	c5 0e       	add	r12, r21
    38ae:	d1 1c       	adc	r13, r1
    38b0:	50 e0       	ldi	r21, 0x00	; 0
    38b2:	b6 0e       	add	r11, r22
    38b4:	4a 81       	ldd	r20, Y+2	; 0x02
    38b6:	20 e1       	ldi	r18, 0x10	; 16
    38b8:	62 2e       	mov	r6, r18
    38ba:	71 2c       	mov	r7, r1
    38bc:	6a 22       	and	r6, r26
    38be:	7b 22       	and	r7, r27
    38c0:	a4 ff       	sbrs	r26, 4
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <dtoa_prf+0x216>
    38c4:	41 33       	cpi	r20, 0x31	; 49
    38c6:	09 f4       	brne	.+2      	; 0x38ca <dtoa_prf+0x216>
    38c8:	ba 94       	dec	r11
    38ca:	1b 14       	cp	r1, r11
    38cc:	2c f4       	brge	.+10     	; 0x38d8 <dtoa_prf+0x224>
    38ce:	8b 2d       	mov	r24, r11
    38d0:	89 30       	cpi	r24, 0x09	; 9
    38d2:	18 f0       	brcs	.+6      	; 0x38da <dtoa_prf+0x226>
    38d4:	88 e0       	ldi	r24, 0x08	; 8
    38d6:	01 c0       	rjmp	.+2      	; 0x38da <dtoa_prf+0x226>
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	9b 01       	movw	r18, r22
    38dc:	77 ff       	sbrs	r23, 7
    38de:	02 c0       	rjmp	.+4      	; 0x38e4 <dtoa_prf+0x230>
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	a0 e0       	ldi	r26, 0x00	; 0
    38e6:	b0 e0       	ldi	r27, 0x00	; 0
    38e8:	9e e2       	ldi	r25, 0x2E	; 46
    38ea:	e9 2e       	mov	r14, r25
    38ec:	4b 01       	movw	r8, r22
    38ee:	88 1a       	sub	r8, r24
    38f0:	91 08       	sbc	r9, r1
    38f2:	cb 01       	movw	r24, r22
    38f4:	82 1b       	sub	r24, r18
    38f6:	93 0b       	sbc	r25, r19
    38f8:	8e 01       	movw	r16, r28
    38fa:	0f 5f       	subi	r16, 0xFF	; 255
    38fc:	1f 4f       	sbci	r17, 0xFF	; 255
    38fe:	08 0f       	add	r16, r24
    3900:	19 1f       	adc	r17, r25
    3902:	8f 2d       	mov	r24, r15
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	aa 24       	eor	r10, r10
    3908:	bb 24       	eor	r11, r11
    390a:	a8 1a       	sub	r10, r24
    390c:	b9 0a       	sbc	r11, r25
    390e:	ff ef       	ldi	r31, 0xFF	; 255
    3910:	2f 3f       	cpi	r18, 0xFF	; 255
    3912:	3f 07       	cpc	r19, r31
    3914:	19 f4       	brne	.+6      	; 0x391c <dtoa_prf+0x268>
    3916:	f6 01       	movw	r30, r12
    3918:	e1 92       	st	Z+, r14
    391a:	6f 01       	movw	r12, r30
    391c:	62 17       	cp	r22, r18
    391e:	73 07       	cpc	r23, r19
    3920:	44 f0       	brlt	.+16     	; 0x3932 <dtoa_prf+0x27e>
    3922:	82 16       	cp	r8, r18
    3924:	93 06       	cpc	r9, r19
    3926:	2c f4       	brge	.+10     	; 0x3932 <dtoa_prf+0x27e>
    3928:	f8 01       	movw	r30, r16
    392a:	ea 0f       	add	r30, r26
    392c:	fb 1f       	adc	r31, r27
    392e:	81 81       	ldd	r24, Z+1	; 0x01
    3930:	01 c0       	rjmp	.+2      	; 0x3934 <dtoa_prf+0x280>
    3932:	80 e3       	ldi	r24, 0x30	; 48
    3934:	21 50       	subi	r18, 0x01	; 1
    3936:	30 40       	sbci	r19, 0x00	; 0
    3938:	11 96       	adiw	r26, 0x01	; 1
    393a:	2a 15       	cp	r18, r10
    393c:	3b 05       	cpc	r19, r11
    393e:	24 f0       	brlt	.+8      	; 0x3948 <dtoa_prf+0x294>
    3940:	f6 01       	movw	r30, r12
    3942:	81 93       	st	Z+, r24
    3944:	6f 01       	movw	r12, r30
    3946:	e3 cf       	rjmp	.-58     	; 0x390e <dtoa_prf+0x25a>
    3948:	26 17       	cp	r18, r22
    394a:	37 07       	cpc	r19, r23
    394c:	41 f4       	brne	.+16     	; 0x395e <dtoa_prf+0x2aa>
    394e:	46 33       	cpi	r20, 0x36	; 54
    3950:	28 f4       	brcc	.+10     	; 0x395c <dtoa_prf+0x2a8>
    3952:	45 33       	cpi	r20, 0x35	; 53
    3954:	21 f4       	brne	.+8      	; 0x395e <dtoa_prf+0x2aa>
    3956:	61 14       	cp	r6, r1
    3958:	71 04       	cpc	r7, r1
    395a:	09 f4       	brne	.+2      	; 0x395e <dtoa_prf+0x2aa>
    395c:	81 e3       	ldi	r24, 0x31	; 49
    395e:	f6 01       	movw	r30, r12
    3960:	81 93       	st	Z+, r24
    3962:	85 2f       	mov	r24, r21
    3964:	df 01       	movw	r26, r30
    3966:	90 e2       	ldi	r25, 0x20	; 32
    3968:	02 c0       	rjmp	.+4      	; 0x396e <dtoa_prf+0x2ba>
    396a:	9d 93       	st	X+, r25
    396c:	81 50       	subi	r24, 0x01	; 1
    396e:	88 23       	and	r24, r24
    3970:	e1 f7       	brne	.-8      	; 0x396a <dtoa_prf+0x2b6>
    3972:	e5 0f       	add	r30, r21
    3974:	f1 1d       	adc	r31, r1
    3976:	10 82       	st	Z, r1
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	29 96       	adiw	r28, 0x09	; 9
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	df 91       	pop	r29
    398a:	cf 91       	pop	r28
    398c:	1f 91       	pop	r17
    398e:	0f 91       	pop	r16
    3990:	ff 90       	pop	r15
    3992:	ef 90       	pop	r14
    3994:	df 90       	pop	r13
    3996:	cf 90       	pop	r12
    3998:	bf 90       	pop	r11
    399a:	af 90       	pop	r10
    399c:	9f 90       	pop	r9
    399e:	8f 90       	pop	r8
    39a0:	7f 90       	pop	r7
    39a2:	6f 90       	pop	r6
    39a4:	08 95       	ret

000039a6 <__ftoa_engine>:
    39a6:	28 30       	cpi	r18, 0x08	; 8
    39a8:	08 f0       	brcs	.+2      	; 0x39ac <__ftoa_engine+0x6>
    39aa:	27 e0       	ldi	r18, 0x07	; 7
    39ac:	33 27       	eor	r19, r19
    39ae:	da 01       	movw	r26, r20
    39b0:	99 0f       	add	r25, r25
    39b2:	31 1d       	adc	r19, r1
    39b4:	87 fd       	sbrc	r24, 7
    39b6:	91 60       	ori	r25, 0x01	; 1
    39b8:	00 96       	adiw	r24, 0x00	; 0
    39ba:	61 05       	cpc	r22, r1
    39bc:	71 05       	cpc	r23, r1
    39be:	39 f4       	brne	.+14     	; 0x39ce <__ftoa_engine+0x28>
    39c0:	32 60       	ori	r19, 0x02	; 2
    39c2:	2e 5f       	subi	r18, 0xFE	; 254
    39c4:	3d 93       	st	X+, r19
    39c6:	30 e3       	ldi	r19, 0x30	; 48
    39c8:	2a 95       	dec	r18
    39ca:	e1 f7       	brne	.-8      	; 0x39c4 <__ftoa_engine+0x1e>
    39cc:	08 95       	ret
    39ce:	9f 3f       	cpi	r25, 0xFF	; 255
    39d0:	30 f0       	brcs	.+12     	; 0x39de <__ftoa_engine+0x38>
    39d2:	80 38       	cpi	r24, 0x80	; 128
    39d4:	71 05       	cpc	r23, r1
    39d6:	61 05       	cpc	r22, r1
    39d8:	09 f0       	breq	.+2      	; 0x39dc <__ftoa_engine+0x36>
    39da:	3c 5f       	subi	r19, 0xFC	; 252
    39dc:	3c 5f       	subi	r19, 0xFC	; 252
    39de:	3d 93       	st	X+, r19
    39e0:	91 30       	cpi	r25, 0x01	; 1
    39e2:	08 f0       	brcs	.+2      	; 0x39e6 <__ftoa_engine+0x40>
    39e4:	80 68       	ori	r24, 0x80	; 128
    39e6:	91 1d       	adc	r25, r1
    39e8:	df 93       	push	r29
    39ea:	cf 93       	push	r28
    39ec:	1f 93       	push	r17
    39ee:	0f 93       	push	r16
    39f0:	ff 92       	push	r15
    39f2:	ef 92       	push	r14
    39f4:	19 2f       	mov	r17, r25
    39f6:	98 7f       	andi	r25, 0xF8	; 248
    39f8:	96 95       	lsr	r25
    39fa:	e9 2f       	mov	r30, r25
    39fc:	96 95       	lsr	r25
    39fe:	96 95       	lsr	r25
    3a00:	e9 0f       	add	r30, r25
    3a02:	ff 27       	eor	r31, r31
    3a04:	ed 52       	subi	r30, 0x2D	; 45
    3a06:	fe 4f       	sbci	r31, 0xFE	; 254
    3a08:	99 27       	eor	r25, r25
    3a0a:	33 27       	eor	r19, r19
    3a0c:	ee 24       	eor	r14, r14
    3a0e:	ff 24       	eor	r15, r15
    3a10:	a7 01       	movw	r20, r14
    3a12:	e7 01       	movw	r28, r14
    3a14:	05 90       	lpm	r0, Z+
    3a16:	08 94       	sec
    3a18:	07 94       	ror	r0
    3a1a:	28 f4       	brcc	.+10     	; 0x3a26 <__ftoa_engine+0x80>
    3a1c:	36 0f       	add	r19, r22
    3a1e:	e7 1e       	adc	r14, r23
    3a20:	f8 1e       	adc	r15, r24
    3a22:	49 1f       	adc	r20, r25
    3a24:	51 1d       	adc	r21, r1
    3a26:	66 0f       	add	r22, r22
    3a28:	77 1f       	adc	r23, r23
    3a2a:	88 1f       	adc	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	06 94       	lsr	r0
    3a30:	a1 f7       	brne	.-24     	; 0x3a1a <__ftoa_engine+0x74>
    3a32:	05 90       	lpm	r0, Z+
    3a34:	07 94       	ror	r0
    3a36:	28 f4       	brcc	.+10     	; 0x3a42 <__ftoa_engine+0x9c>
    3a38:	e7 0e       	add	r14, r23
    3a3a:	f8 1e       	adc	r15, r24
    3a3c:	49 1f       	adc	r20, r25
    3a3e:	56 1f       	adc	r21, r22
    3a40:	c1 1d       	adc	r28, r1
    3a42:	77 0f       	add	r23, r23
    3a44:	88 1f       	adc	r24, r24
    3a46:	99 1f       	adc	r25, r25
    3a48:	66 1f       	adc	r22, r22
    3a4a:	06 94       	lsr	r0
    3a4c:	a1 f7       	brne	.-24     	; 0x3a36 <__ftoa_engine+0x90>
    3a4e:	05 90       	lpm	r0, Z+
    3a50:	07 94       	ror	r0
    3a52:	28 f4       	brcc	.+10     	; 0x3a5e <__ftoa_engine+0xb8>
    3a54:	f8 0e       	add	r15, r24
    3a56:	49 1f       	adc	r20, r25
    3a58:	56 1f       	adc	r21, r22
    3a5a:	c7 1f       	adc	r28, r23
    3a5c:	d1 1d       	adc	r29, r1
    3a5e:	88 0f       	add	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	66 1f       	adc	r22, r22
    3a64:	77 1f       	adc	r23, r23
    3a66:	06 94       	lsr	r0
    3a68:	a1 f7       	brne	.-24     	; 0x3a52 <__ftoa_engine+0xac>
    3a6a:	05 90       	lpm	r0, Z+
    3a6c:	07 94       	ror	r0
    3a6e:	20 f4       	brcc	.+8      	; 0x3a78 <__ftoa_engine+0xd2>
    3a70:	49 0f       	add	r20, r25
    3a72:	56 1f       	adc	r21, r22
    3a74:	c7 1f       	adc	r28, r23
    3a76:	d8 1f       	adc	r29, r24
    3a78:	99 0f       	add	r25, r25
    3a7a:	66 1f       	adc	r22, r22
    3a7c:	77 1f       	adc	r23, r23
    3a7e:	88 1f       	adc	r24, r24
    3a80:	06 94       	lsr	r0
    3a82:	a9 f7       	brne	.-22     	; 0x3a6e <__ftoa_engine+0xc8>
    3a84:	84 91       	lpm	r24, Z
    3a86:	10 95       	com	r17
    3a88:	17 70       	andi	r17, 0x07	; 7
    3a8a:	41 f0       	breq	.+16     	; 0x3a9c <__ftoa_engine+0xf6>
    3a8c:	d6 95       	lsr	r29
    3a8e:	c7 95       	ror	r28
    3a90:	57 95       	ror	r21
    3a92:	47 95       	ror	r20
    3a94:	f7 94       	ror	r15
    3a96:	e7 94       	ror	r14
    3a98:	1a 95       	dec	r17
    3a9a:	c1 f7       	brne	.-16     	; 0x3a8c <__ftoa_engine+0xe6>
    3a9c:	e9 e7       	ldi	r30, 0x79	; 121
    3a9e:	f1 e0       	ldi	r31, 0x01	; 1
    3aa0:	68 94       	set
    3aa2:	15 90       	lpm	r1, Z+
    3aa4:	15 91       	lpm	r17, Z+
    3aa6:	35 91       	lpm	r19, Z+
    3aa8:	65 91       	lpm	r22, Z+
    3aaa:	95 91       	lpm	r25, Z+
    3aac:	05 90       	lpm	r0, Z+
    3aae:	7f e2       	ldi	r23, 0x2F	; 47
    3ab0:	73 95       	inc	r23
    3ab2:	e1 18       	sub	r14, r1
    3ab4:	f1 0a       	sbc	r15, r17
    3ab6:	43 0b       	sbc	r20, r19
    3ab8:	56 0b       	sbc	r21, r22
    3aba:	c9 0b       	sbc	r28, r25
    3abc:	d0 09       	sbc	r29, r0
    3abe:	c0 f7       	brcc	.-16     	; 0x3ab0 <__ftoa_engine+0x10a>
    3ac0:	e1 0c       	add	r14, r1
    3ac2:	f1 1e       	adc	r15, r17
    3ac4:	43 1f       	adc	r20, r19
    3ac6:	56 1f       	adc	r21, r22
    3ac8:	c9 1f       	adc	r28, r25
    3aca:	d0 1d       	adc	r29, r0
    3acc:	7e f4       	brtc	.+30     	; 0x3aec <__ftoa_engine+0x146>
    3ace:	70 33       	cpi	r23, 0x30	; 48
    3ad0:	11 f4       	brne	.+4      	; 0x3ad6 <__ftoa_engine+0x130>
    3ad2:	8a 95       	dec	r24
    3ad4:	e6 cf       	rjmp	.-52     	; 0x3aa2 <__ftoa_engine+0xfc>
    3ad6:	e8 94       	clt
    3ad8:	01 50       	subi	r16, 0x01	; 1
    3ada:	30 f0       	brcs	.+12     	; 0x3ae8 <__ftoa_engine+0x142>
    3adc:	08 0f       	add	r16, r24
    3ade:	0a f4       	brpl	.+2      	; 0x3ae2 <__ftoa_engine+0x13c>
    3ae0:	00 27       	eor	r16, r16
    3ae2:	02 17       	cp	r16, r18
    3ae4:	08 f4       	brcc	.+2      	; 0x3ae8 <__ftoa_engine+0x142>
    3ae6:	20 2f       	mov	r18, r16
    3ae8:	23 95       	inc	r18
    3aea:	02 2f       	mov	r16, r18
    3aec:	7a 33       	cpi	r23, 0x3A	; 58
    3aee:	28 f0       	brcs	.+10     	; 0x3afa <__ftoa_engine+0x154>
    3af0:	79 e3       	ldi	r23, 0x39	; 57
    3af2:	7d 93       	st	X+, r23
    3af4:	2a 95       	dec	r18
    3af6:	e9 f7       	brne	.-6      	; 0x3af2 <__ftoa_engine+0x14c>
    3af8:	10 c0       	rjmp	.+32     	; 0x3b1a <__ftoa_engine+0x174>
    3afa:	7d 93       	st	X+, r23
    3afc:	2a 95       	dec	r18
    3afe:	89 f6       	brne	.-94     	; 0x3aa2 <__ftoa_engine+0xfc>
    3b00:	06 94       	lsr	r0
    3b02:	97 95       	ror	r25
    3b04:	67 95       	ror	r22
    3b06:	37 95       	ror	r19
    3b08:	17 95       	ror	r17
    3b0a:	17 94       	ror	r1
    3b0c:	e1 18       	sub	r14, r1
    3b0e:	f1 0a       	sbc	r15, r17
    3b10:	43 0b       	sbc	r20, r19
    3b12:	56 0b       	sbc	r21, r22
    3b14:	c9 0b       	sbc	r28, r25
    3b16:	d0 09       	sbc	r29, r0
    3b18:	98 f0       	brcs	.+38     	; 0x3b40 <__ftoa_engine+0x19a>
    3b1a:	23 95       	inc	r18
    3b1c:	7e 91       	ld	r23, -X
    3b1e:	73 95       	inc	r23
    3b20:	7a 33       	cpi	r23, 0x3A	; 58
    3b22:	08 f0       	brcs	.+2      	; 0x3b26 <__ftoa_engine+0x180>
    3b24:	70 e3       	ldi	r23, 0x30	; 48
    3b26:	7c 93       	st	X, r23
    3b28:	20 13       	cpse	r18, r16
    3b2a:	b8 f7       	brcc	.-18     	; 0x3b1a <__ftoa_engine+0x174>
    3b2c:	7e 91       	ld	r23, -X
    3b2e:	70 61       	ori	r23, 0x10	; 16
    3b30:	7d 93       	st	X+, r23
    3b32:	30 f0       	brcs	.+12     	; 0x3b40 <__ftoa_engine+0x19a>
    3b34:	83 95       	inc	r24
    3b36:	71 e3       	ldi	r23, 0x31	; 49
    3b38:	7d 93       	st	X+, r23
    3b3a:	70 e3       	ldi	r23, 0x30	; 48
    3b3c:	2a 95       	dec	r18
    3b3e:	e1 f7       	brne	.-8      	; 0x3b38 <__ftoa_engine+0x192>
    3b40:	11 24       	eor	r1, r1
    3b42:	ef 90       	pop	r14
    3b44:	ff 90       	pop	r15
    3b46:	0f 91       	pop	r16
    3b48:	1f 91       	pop	r17
    3b4a:	cf 91       	pop	r28
    3b4c:	df 91       	pop	r29
    3b4e:	99 27       	eor	r25, r25
    3b50:	87 fd       	sbrc	r24, 7
    3b52:	90 95       	com	r25
    3b54:	08 95       	ret

00003b56 <strrev>:
    3b56:	dc 01       	movw	r26, r24
    3b58:	fc 01       	movw	r30, r24
    3b5a:	67 2f       	mov	r22, r23
    3b5c:	71 91       	ld	r23, Z+
    3b5e:	77 23       	and	r23, r23
    3b60:	e1 f7       	brne	.-8      	; 0x3b5a <strrev+0x4>
    3b62:	32 97       	sbiw	r30, 0x02	; 2
    3b64:	04 c0       	rjmp	.+8      	; 0x3b6e <strrev+0x18>
    3b66:	7c 91       	ld	r23, X
    3b68:	6d 93       	st	X+, r22
    3b6a:	70 83       	st	Z, r23
    3b6c:	62 91       	ld	r22, -Z
    3b6e:	ae 17       	cp	r26, r30
    3b70:	bf 07       	cpc	r27, r31
    3b72:	c8 f3       	brcs	.-14     	; 0x3b66 <strrev+0x10>
    3b74:	08 95       	ret

00003b76 <__udivmodhi4>:
    3b76:	aa 1b       	sub	r26, r26
    3b78:	bb 1b       	sub	r27, r27
    3b7a:	51 e1       	ldi	r21, 0x11	; 17
    3b7c:	07 c0       	rjmp	.+14     	; 0x3b8c <__udivmodhi4_ep>

00003b7e <__udivmodhi4_loop>:
    3b7e:	aa 1f       	adc	r26, r26
    3b80:	bb 1f       	adc	r27, r27
    3b82:	a6 17       	cp	r26, r22
    3b84:	b7 07       	cpc	r27, r23
    3b86:	10 f0       	brcs	.+4      	; 0x3b8c <__udivmodhi4_ep>
    3b88:	a6 1b       	sub	r26, r22
    3b8a:	b7 0b       	sbc	r27, r23

00003b8c <__udivmodhi4_ep>:
    3b8c:	88 1f       	adc	r24, r24
    3b8e:	99 1f       	adc	r25, r25
    3b90:	5a 95       	dec	r21
    3b92:	a9 f7       	brne	.-22     	; 0x3b7e <__udivmodhi4_loop>
    3b94:	80 95       	com	r24
    3b96:	90 95       	com	r25
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	08 95       	ret

00003b9e <__divmodhi4>:
    3b9e:	97 fb       	bst	r25, 7
    3ba0:	09 2e       	mov	r0, r25
    3ba2:	07 26       	eor	r0, r23
    3ba4:	0a d0       	rcall	.+20     	; 0x3bba <__divmodhi4_neg1>
    3ba6:	77 fd       	sbrc	r23, 7
    3ba8:	04 d0       	rcall	.+8      	; 0x3bb2 <__divmodhi4_neg2>
    3baa:	e5 df       	rcall	.-54     	; 0x3b76 <__udivmodhi4>
    3bac:	06 d0       	rcall	.+12     	; 0x3bba <__divmodhi4_neg1>
    3bae:	00 20       	and	r0, r0
    3bb0:	1a f4       	brpl	.+6      	; 0x3bb8 <__divmodhi4_exit>

00003bb2 <__divmodhi4_neg2>:
    3bb2:	70 95       	com	r23
    3bb4:	61 95       	neg	r22
    3bb6:	7f 4f       	sbci	r23, 0xFF	; 255

00003bb8 <__divmodhi4_exit>:
    3bb8:	08 95       	ret

00003bba <__divmodhi4_neg1>:
    3bba:	f6 f7       	brtc	.-4      	; 0x3bb8 <__divmodhi4_exit>
    3bbc:	90 95       	com	r25
    3bbe:	81 95       	neg	r24
    3bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc2:	08 95       	ret

00003bc4 <_exit>:
    3bc4:	f8 94       	cli

00003bc6 <__stop_program>:
    3bc6:	ff cf       	rjmp	.-2      	; 0x3bc6 <__stop_program>
